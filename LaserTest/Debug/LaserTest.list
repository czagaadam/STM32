
LaserTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008584  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008748  08008748  00020318  2**0
                  CONTENTS
  4 .ARM          00000008  08008748  08008748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008750  08008750  00020318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008754  08008754  00018754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  08008758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020318  2**0
                  CONTENTS
 10 .bss          00000258  20000318  20000318  00020318  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000570  20000570  00020318  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016fdd  00000000  00000000  0002038b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e49  00000000  00000000  00037368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013a8  00000000  00000000  0003a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001248  00000000  00000000  0003b560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cc00  00000000  00000000  0003c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017d9d  00000000  00000000  000693a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011982a  00000000  00000000  00081145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005620  00000000  00000000  0019a970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000318 	.word	0x20000318
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008718 	.word	0x08008718

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000031c 	.word	0x2000031c
 80001e8:	08008718 	.word	0x08008718

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08e      	sub	sp, #56	; 0x38
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
 8000502:	4bb2      	ldr	r3, [pc, #712]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4ab1      	ldr	r2, [pc, #708]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000508:	f043 0304 	orr.w	r3, r3, #4
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4baf      	ldr	r3, [pc, #700]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	623b      	str	r3, [r7, #32]
 8000518:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
 800051e:	4bab      	ldr	r3, [pc, #684]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4aaa      	ldr	r2, [pc, #680]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000524:	f043 0320 	orr.w	r3, r3, #32
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4ba8      	ldr	r3, [pc, #672]	; (80007cc <MX_GPIO_Init+0x2e4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0320 	and.w	r3, r3, #32
 8000532:	61fb      	str	r3, [r7, #28]
 8000534:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
 800053a:	4ba4      	ldr	r3, [pc, #656]	; (80007cc <MX_GPIO_Init+0x2e4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4aa3      	ldr	r2, [pc, #652]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4ba1      	ldr	r3, [pc, #644]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	61bb      	str	r3, [r7, #24]
 8000550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	4b9d      	ldr	r3, [pc, #628]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a9c      	ldr	r2, [pc, #624]	; (80007cc <MX_GPIO_Init+0x2e4>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b9a      	ldr	r3, [pc, #616]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	4b96      	ldr	r3, [pc, #600]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a95      	ldr	r2, [pc, #596]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b93      	ldr	r3, [pc, #588]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	4b8f      	ldr	r3, [pc, #572]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a8e      	ldr	r2, [pc, #568]	; (80007cc <MX_GPIO_Init+0x2e4>)
 8000594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b8c      	ldr	r3, [pc, #560]	; (80007cc <MX_GPIO_Init+0x2e4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	4b88      	ldr	r3, [pc, #544]	; (80007cc <MX_GPIO_Init+0x2e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a87      	ldr	r2, [pc, #540]	; (80007cc <MX_GPIO_Init+0x2e4>)
 80005b0:	f043 0310 	orr.w	r3, r3, #16
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b85      	ldr	r3, [pc, #532]	; (80007cc <MX_GPIO_Init+0x2e4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0310 	and.w	r3, r3, #16
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b81      	ldr	r3, [pc, #516]	; (80007cc <MX_GPIO_Init+0x2e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a80      	ldr	r2, [pc, #512]	; (80007cc <MX_GPIO_Init+0x2e4>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b7e      	ldr	r3, [pc, #504]	; (80007cc <MX_GPIO_Init+0x2e4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2116      	movs	r1, #22
 80005e2:	487b      	ldr	r0, [pc, #492]	; (80007d0 <MX_GPIO_Init+0x2e8>)
 80005e4:	f000 ff84 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	4879      	ldr	r0, [pc, #484]	; (80007d4 <MX_GPIO_Init+0x2ec>)
 80005ee:	f000 ff7f 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|Laser1_Pin|Laser2_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005f8:	4877      	ldr	r0, [pc, #476]	; (80007d8 <MX_GPIO_Init+0x2f0>)
 80005fa:	f000 ff79 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000604:	4875      	ldr	r0, [pc, #468]	; (80007dc <MX_GPIO_Init+0x2f4>)
 8000606:	f000 ff73 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800060a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800061c:	230c      	movs	r3, #12
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000624:	4619      	mov	r1, r3
 8000626:	486e      	ldr	r0, [pc, #440]	; (80007e0 <MX_GPIO_Init+0x2f8>)
 8000628:	f000 fdb6 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800062c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800063e:	2305      	movs	r3, #5
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000646:	4619      	mov	r1, r3
 8000648:	4865      	ldr	r0, [pc, #404]	; (80007e0 <MX_GPIO_Init+0x2f8>)
 800064a:	f000 fda5 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000660:	230e      	movs	r3, #14
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	4619      	mov	r1, r3
 800066a:	485d      	ldr	r0, [pc, #372]	; (80007e0 <MX_GPIO_Init+0x2f8>)
 800066c:	f000 fd94 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000670:	2301      	movs	r3, #1
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000680:	230c      	movs	r3, #12
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	4619      	mov	r1, r3
 800068a:	4851      	ldr	r0, [pc, #324]	; (80007d0 <MX_GPIO_Init+0x2e8>)
 800068c:	f000 fd84 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000690:	2316      	movs	r3, #22
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4619      	mov	r1, r3
 80006a6:	484a      	ldr	r0, [pc, #296]	; (80007d0 <MX_GPIO_Init+0x2e8>)
 80006a8:	f000 fd76 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80006ac:	f248 0307 	movw	r3, #32775	; 0x8007
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	4619      	mov	r1, r3
 80006c2:	4844      	ldr	r0, [pc, #272]	; (80007d4 <MX_GPIO_Init+0x2ec>)
 80006c4:	f000 fd68 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80006c8:	f641 0358 	movw	r3, #6232	; 0x1858
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80006da:	230e      	movs	r3, #14
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	4619      	mov	r1, r3
 80006e4:	483b      	ldr	r0, [pc, #236]	; (80007d4 <MX_GPIO_Init+0x2ec>)
 80006e6:	f000 fd57 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	4834      	ldr	r0, [pc, #208]	; (80007d4 <MX_GPIO_Init+0x2ec>)
 8000702:	f000 fd49 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000706:	2320      	movs	r3, #32
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800070a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000718:	4619      	mov	r1, r3
 800071a:	482d      	ldr	r0, [pc, #180]	; (80007d0 <MX_GPIO_Init+0x2e8>)
 800071c:	f000 fd3c 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000720:	2303      	movs	r3, #3
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000730:	2309      	movs	r3, #9
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	482a      	ldr	r0, [pc, #168]	; (80007e4 <MX_GPIO_Init+0x2fc>)
 800073c:	f000 fd2c 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000740:	2304      	movs	r3, #4
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4619      	mov	r1, r3
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <MX_GPIO_Init+0x2fc>)
 8000754:	f000 fd20 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000758:	f248 1333 	movw	r3, #33075	; 0x8133
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076a:	230c      	movs	r3, #12
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000772:	4619      	mov	r1, r3
 8000774:	4819      	ldr	r0, [pc, #100]	; (80007dc <MX_GPIO_Init+0x2f4>)
 8000776:	f000 fd0f 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800077a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078c:	230c      	movs	r3, #12
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_GPIO_Init+0x300>)
 8000798:	f000 fcfe 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B7_Pin;
 800079c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007ae:	230e      	movs	r3, #14
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <MX_GPIO_Init+0x2fc>)
 80007ba:	f000 fced 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80007be:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80007c8:	e010      	b.n	80007ec <MX_GPIO_Init+0x304>
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	40021800 	.word	0x40021800
 80007e0:	40021400 	.word	0x40021400
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80007f4:	230c      	movs	r3, #12
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4863      	ldr	r0, [pc, #396]	; (800098c <MX_GPIO_Init+0x4a4>)
 8000800:	f000 fcca 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4619      	mov	r1, r3
 8000818:	485c      	ldr	r0, [pc, #368]	; (800098c <MX_GPIO_Init+0x4a4>)
 800081a:	f000 fcbd 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D2_Pin
                           D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D2_Pin
 800081e:	f240 7303 	movw	r3, #1795	; 0x703
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
                          |D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000830:	230c      	movs	r3, #12
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	4855      	ldr	r0, [pc, #340]	; (8000990 <MX_GPIO_Init+0x4a8>)
 800083c:	f000 fcac 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	484e      	ldr	r0, [pc, #312]	; (8000990 <MX_GPIO_Init+0x4a8>)
 8000856:	f000 fc9f 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin Laser1_Pin Laser2_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|Laser1_Pin|Laser2_Pin;
 800085a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	4847      	ldr	r0, [pc, #284]	; (8000990 <MX_GPIO_Init+0x4a8>)
 8000874:	f000 fc90 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000878:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800088a:	230e      	movs	r3, #14
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	483f      	ldr	r0, [pc, #252]	; (8000994 <MX_GPIO_Init+0x4ac>)
 8000896:	f000 fc7f 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800089a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008ac:	230e      	movs	r3, #14
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	4619      	mov	r1, r3
 80008b6:	4838      	ldr	r0, [pc, #224]	; (8000998 <MX_GPIO_Init+0x4b0>)
 80008b8:	f000 fc6e 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80008bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c2:	2312      	movs	r3, #18
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008ce:	2304      	movs	r3, #4
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	482f      	ldr	r0, [pc, #188]	; (8000998 <MX_GPIO_Init+0x4b0>)
 80008da:	f000 fc5d 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80008de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e4:	2312      	movs	r3, #18
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008f0:	2304      	movs	r3, #4
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	4828      	ldr	r0, [pc, #160]	; (800099c <MX_GPIO_Init+0x4b4>)
 80008fc:	f000 fc4c 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000900:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000912:	2307      	movs	r3, #7
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	481f      	ldr	r0, [pc, #124]	; (800099c <MX_GPIO_Init+0x4b4>)
 800091e:	f000 fc3b 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000922:	2348      	movs	r3, #72	; 0x48
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000932:	230e      	movs	r3, #14
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	4619      	mov	r1, r3
 800093c:	4814      	ldr	r0, [pc, #80]	; (8000990 <MX_GPIO_Init+0x4a8>)
 800093e:	f000 fc2b 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000954:	2309      	movs	r3, #9
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_GPIO_Init+0x4ac>)
 8000960:	f000 fc1a 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000964:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_GPIO_Init+0x4ac>)
 800097e:	f000 fc0b 	bl	8001198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000982:	bf00      	nop
 8000984:	3738      	adds	r7, #56	; 0x38
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40020400 	.word	0x40020400
 8000990:	40020c00 	.word	0x40020c00
 8000994:	40021800 	.word	0x40021800
 8000998:	40020800 	.word	0x40020800
 800099c:	40020000 	.word	0x40020000

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <MX_I2C1_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009ac:	4a1b      	ldr	r2, [pc, #108]	; (8000a1c <MX_I2C1_Init+0x7c>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009de:	f000 fda1 	bl	8001524 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f8f4 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_I2C1_Init+0x74>)
 80009f0:	f001 fd92 	bl	8002518 <HAL_I2CEx_ConfigAnalogFilter>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009fa:	f000 f8eb 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_I2C1_Init+0x74>)
 8000a02:	f001 fdc5 	bl	8002590 <HAL_I2CEx_ConfigDigitalFilter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a0c:	f000 f8e2 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000334 	.word	0x20000334
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	000186a0 	.word	0x000186a0

08000a20 <main>:
uint16_t sensor2_mm = 0;

const uint8_t numofsensors = 1;

int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  GPIOD->BSRR = (uint32_t)GPIO_PIN_15 << 16U;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <main+0xb4>)
 8000a26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a2a:	619a      	str	r2, [r3, #24]
  GPIOD->BSRR = (uint32_t)GPIO_PIN_14 << 16U;
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <main+0xb4>)
 8000a2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a32:	619a      	str	r2, [r3, #24]
  HAL_Init();
 8000a34:	f000 fa68 	bl	8000f08 <HAL_Init>
  SystemClock_Config();
 8000a38:	f000 f850 	bl	8000adc <SystemClock_Config>
  MX_GPIO_Init();
 8000a3c:	f7ff fd54 	bl	80004e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a40:	f7ff ffae 	bl	80009a0 <MX_I2C1_Init>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4a:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <main+0xb4>)
 8000a4c:	f000 fd50 	bl	80014f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a56:	481f      	ldr	r0, [pc, #124]	; (8000ad4 <main+0xb4>)
 8000a58:	f000 fd4a 	bl	80014f0 <HAL_GPIO_WritePin>
  //memory allocation for VL53L0X_Dev_t structures and gpio pins
  VL53L0X_InitHandlerClass(numofsensors);
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fd2e 	bl	80034c0 <VL53L0X_InitHandlerClass>
  //initialize VL53L0X_Dev_t structure, shutdown pin, comm type, speed, address
  //todo: return index number
  //VL53L0X_DefineAndPutDevice(GPIO_PIN_15, 1, 100, 0x60);
  HAL_Delay(500);
 8000a64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a68:	f000 fa90 	bl	8000f8c <HAL_Delay>
  VL53L0X_DefineAndPutDevice(GPIO_PIN_14, 1, 100, 0x22);
 8000a6c:	2322      	movs	r3, #34	; 0x22
 8000a6e:	2264      	movs	r2, #100	; 0x64
 8000a70:	2101      	movs	r1, #1
 8000a72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a76:	f002 fd51 	bl	800351c <VL53L0X_DefineAndPutDevice>
  HAL_Delay(500);
 8000a7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a7e:	f000 fa85 	bl	8000f8c <HAL_Delay>
  //shutdown pins low state
  VL53L0X_ResetNodes();
 8000a82:	f002 fdd5 	bl	8003630 <VL53L0X_ResetNodes>
  HAL_Delay(500);
 8000a86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a8a:	f000 fa7f 	bl	8000f8c <HAL_Delay>
  //set new address for 1st sensor
  //VL53L0X_ActiveNodeAddress(1);
  HAL_Delay(500);
 8000a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a92:	f000 fa7b 	bl	8000f8c <HAL_Delay>
  //initialize sensor with custom address
  //VL53L0X_APPStartCustomAddress(1);
  HAL_Delay(500);
 8000a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9a:	f000 fa77 	bl	8000f8c <HAL_Delay>
  //set new address for 2nd sensor
  VL53L0X_ActiveNodeAddress(2);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f002 fdee 	bl	8003680 <VL53L0X_ActiveNodeAddress>
  HAL_Delay(500);
 8000aa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aa8:	f000 fa70 	bl	8000f8c <HAL_Delay>
  //initialize sensor with custom address
  VL53L0X_APPStartCustomAddress(2);
 8000aac:	2002      	movs	r0, #2
 8000aae:	f002 fda9 	bl	8003604 <VL53L0X_APPStartCustomAddress>
  HAL_Delay(500);
 8000ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab6:	f000 fa69 	bl	8000f8c <HAL_Delay>
	  /*HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
	  HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
	  HAL_Delay(500);*/
	  //sensor1_mm = VL53L0X_NodeMeasure(1);
	  HAL_Delay(500);
 8000aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abe:	f000 fa65 	bl	8000f8c <HAL_Delay>
	  sensor2_mm = VL53L0X_NodeMeasure(2);
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f002 fe2c 	bl	8003720 <VL53L0X_NodeMeasure>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <main+0xb8>)
 8000ace:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(500);
 8000ad0:	e7f3      	b.n	8000aba <main+0x9a>
 8000ad2:	bf00      	nop
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	20000388 	.word	0x20000388

08000adc <SystemClock_Config>:
  }
}
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0320 	add.w	r3, r7, #32
 8000ae6:	2230      	movs	r2, #48	; 0x30
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fdba 	bl	8008664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <SystemClock_Config+0xcc>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <SystemClock_Config+0xcc>)
 8000b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <SystemClock_Config+0xcc>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <SystemClock_Config+0xd0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b28:	4a20      	ldr	r2, [pc, #128]	; (8000bac <SystemClock_Config+0xd0>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <SystemClock_Config+0xd0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b54:	2348      	movs	r3, #72	; 0x48
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 fd53 	bl	8002610 <HAL_RCC_OscConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b70:	f000 f830 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b74:	230f      	movs	r3, #15
 8000b76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2102      	movs	r1, #2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 ffb5 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b9c:	f000 f81a 	bl	8000bd4 <Error_Handler>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	3750      	adds	r7, #80	; 0x50
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40007000 	.word	0x40007000

08000bb0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc2:	f000 f9c3 	bl	8000f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40001000 	.word	0x40001000

08000bd4 <Error_Handler>:

void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_I2C_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <HAL_I2C_MspInit+0x8c>)
 8000c8a:	f000 fa85 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_InitTick+0xe4>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <HAL_InitTick+0xe4>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <HAL_InitTick+0xe4>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cec:	f107 0210 	add.w	r2, r7, #16
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 f90e 	bl	8002f18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d103      	bne.n	8000d0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d06:	f002 f8f3 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8000d0a:	6378      	str	r0, [r7, #52]	; 0x34
 8000d0c:	e004      	b.n	8000d18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d0e:	f002 f8ef 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 8000d12:	4603      	mov	r3, r0
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <HAL_InitTick+0xe8>)
 8000d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d20:	0c9b      	lsrs	r3, r3, #18
 8000d22:	3b01      	subs	r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <HAL_InitTick+0xec>)
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <HAL_InitTick+0xf0>)
 8000d2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <HAL_InitTick+0xec>)
 8000d2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_InitTick+0xec>)
 8000d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_InitTick+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_InitTick+0xec>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_InitTick+0xec>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d4c:	4817      	ldr	r0, [pc, #92]	; (8000dac <HAL_InitTick+0xec>)
 8000d4e:	f002 f915 	bl	8002f7c <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d11b      	bne.n	8000d98 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d60:	4812      	ldr	r0, [pc, #72]	; (8000dac <HAL_InitTick+0xec>)
 8000d62:	f002 f965 	bl	8003030 <HAL_TIM_Base_Start_IT>
 8000d66:	4603      	mov	r3, r0
 8000d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d111      	bne.n	8000d98 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d74:	2036      	movs	r0, #54	; 0x36
 8000d76:	f000 fa01 	bl	800117c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d808      	bhi.n	8000d92 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	2036      	movs	r0, #54	; 0x36
 8000d86:	f000 f9dd 	bl	8001144 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_InitTick+0xf4>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e002      	b.n	8000d98 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	431bde83 	.word	0x431bde83
 8000dac:	2000038c 	.word	0x2000038c
 8000db0:	40001000 	.word	0x40001000
 8000db4:	20000004 	.word	0x20000004

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM6_DAC_IRQHandler+0x10>)
 8000e16:	f002 f97b 	bl	8003110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000038c 	.word	0x2000038c

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f007 fc1e 	bl	8008694 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20030000 	.word	0x20030000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	200003d4 	.word	0x200003d4
 8000e8c:	20000570 	.word	0x20000570

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f007 fbdd 	bl	80086a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fd9b 	bl	8000a20 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 8000ef8:	08008758 	.word	0x08008758
  ldr r2, =_sbss
 8000efc:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8000f00:	20000570 	.word	0x20000570

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f8fc 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	200f      	movs	r0, #15
 8000f38:	f7ff fec2 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fe50 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	200003d8 	.word	0x200003d8

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	200003d8 	.word	0x200003d8

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001156:	f7ff ff61 	bl	800101c <__NVIC_GetPriorityGrouping>
 800115a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f7ff ffb1 	bl	80010c8 <NVIC_EncodePriority>
 8001166:	4602      	mov	r2, r0
 8001168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff80 	bl	8001074 <__NVIC_SetPriority>
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff54 	bl	8001038 <__NVIC_EnableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e177      	b.n	80014a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8166 	bne.w	800149e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d005      	beq.n	80011ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d130      	bne.n	800124c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80c0 	beq.w	800149e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b66      	ldr	r3, [pc, #408]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a65      	ldr	r2, [pc, #404]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b63      	ldr	r3, [pc, #396]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a61      	ldr	r2, [pc, #388]	; (80014c0 <HAL_GPIO_Init+0x328>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a58      	ldr	r2, [pc, #352]	; (80014c4 <HAL_GPIO_Init+0x32c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d037      	beq.n	80013d6 <HAL_GPIO_Init+0x23e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a57      	ldr	r2, [pc, #348]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d031      	beq.n	80013d2 <HAL_GPIO_Init+0x23a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a56      	ldr	r2, [pc, #344]	; (80014cc <HAL_GPIO_Init+0x334>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d02b      	beq.n	80013ce <HAL_GPIO_Init+0x236>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <HAL_GPIO_Init+0x338>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d025      	beq.n	80013ca <HAL_GPIO_Init+0x232>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a54      	ldr	r2, [pc, #336]	; (80014d4 <HAL_GPIO_Init+0x33c>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01f      	beq.n	80013c6 <HAL_GPIO_Init+0x22e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a53      	ldr	r2, [pc, #332]	; (80014d8 <HAL_GPIO_Init+0x340>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x22a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a52      	ldr	r2, [pc, #328]	; (80014dc <HAL_GPIO_Init+0x344>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x226>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x348>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x222>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a50      	ldr	r2, [pc, #320]	; (80014e4 <HAL_GPIO_Init+0x34c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x21e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x350>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x21a>
 80013ae:	2309      	movs	r3, #9
 80013b0:	e012      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013b2:	230a      	movs	r3, #10
 80013b4:	e010      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013b6:	2308      	movs	r3, #8
 80013b8:	e00e      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e00c      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013be:	2306      	movs	r3, #6
 80013c0:	e00a      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013c2:	2305      	movs	r3, #5
 80013c4:	e008      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e006      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013ca:	2303      	movs	r3, #3
 80013cc:	e004      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e002      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x240>
 80013d6:	2300      	movs	r3, #0
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f002 0203 	and.w	r2, r2, #3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4093      	lsls	r3, r2
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e8:	4935      	ldr	r1, [pc, #212]	; (80014c0 <HAL_GPIO_Init+0x328>)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_GPIO_Init+0x354>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141a:	4a34      	ldr	r2, [pc, #208]	; (80014ec <HAL_GPIO_Init+0x354>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001444:	4a29      	ldr	r2, [pc, #164]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_GPIO_Init+0x354>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_GPIO_Init+0x354>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_GPIO_Init+0x354>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2b0f      	cmp	r3, #15
 80014a8:	f67f ae84 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40013800 	.word	0x40013800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020400 	.word	0x40020400
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021400 	.word	0x40021400
 80014dc:	40021800 	.word	0x40021800
 80014e0:	40021c00 	.word	0x40021c00
 80014e4:	40022000 	.word	0x40022000
 80014e8:	40022400 	.word	0x40022400
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e12b      	b.n	800178e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d106      	bne.n	8001550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff fb70 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2224      	movs	r2, #36	; 0x24
 8001554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001588:	f001 fcb2 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 800158c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a81      	ldr	r2, [pc, #516]	; (8001798 <HAL_I2C_Init+0x274>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d807      	bhi.n	80015a8 <HAL_I2C_Init+0x84>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a80      	ldr	r2, [pc, #512]	; (800179c <HAL_I2C_Init+0x278>)
 800159c:	4293      	cmp	r3, r2
 800159e:	bf94      	ite	ls
 80015a0:	2301      	movls	r3, #1
 80015a2:	2300      	movhi	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	e006      	b.n	80015b6 <HAL_I2C_Init+0x92>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4a7d      	ldr	r2, [pc, #500]	; (80017a0 <HAL_I2C_Init+0x27c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	bf94      	ite	ls
 80015b0:	2301      	movls	r3, #1
 80015b2:	2300      	movhi	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0e7      	b.n	800178e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a78      	ldr	r2, [pc, #480]	; (80017a4 <HAL_I2C_Init+0x280>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	0c9b      	lsrs	r3, r3, #18
 80015c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a6a      	ldr	r2, [pc, #424]	; (8001798 <HAL_I2C_Init+0x274>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d802      	bhi.n	80015f8 <HAL_I2C_Init+0xd4>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	3301      	adds	r3, #1
 80015f6:	e009      	b.n	800160c <HAL_I2C_Init+0xe8>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a69      	ldr	r2, [pc, #420]	; (80017a8 <HAL_I2C_Init+0x284>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	3301      	adds	r3, #1
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	430b      	orrs	r3, r1
 8001612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800161e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	495c      	ldr	r1, [pc, #368]	; (8001798 <HAL_I2C_Init+0x274>)
 8001628:	428b      	cmp	r3, r1
 800162a:	d819      	bhi.n	8001660 <HAL_I2C_Init+0x13c>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1e59      	subs	r1, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fbb1 f3f3 	udiv	r3, r1, r3
 800163a:	1c59      	adds	r1, r3, #1
 800163c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001640:	400b      	ands	r3, r1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <HAL_I2C_Init+0x138>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1e59      	subs	r1, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	fbb1 f3f3 	udiv	r3, r1, r3
 8001654:	3301      	adds	r3, #1
 8001656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165a:	e051      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 800165c:	2304      	movs	r3, #4
 800165e:	e04f      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d111      	bne.n	800168c <HAL_I2C_Init+0x168>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	e012      	b.n	80016b2 <HAL_I2C_Init+0x18e>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1e58      	subs	r0, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6859      	ldr	r1, [r3, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	0099      	lsls	r1, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a2:	3301      	adds	r3, #1
 80016a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_I2C_Init+0x196>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e022      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10e      	bne.n	80016e0 <HAL_I2C_Init+0x1bc>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1e58      	subs	r0, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	440b      	add	r3, r1
 80016d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d4:	3301      	adds	r3, #1
 80016d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016de:	e00f      	b.n	8001700 <HAL_I2C_Init+0x1dc>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	0099      	lsls	r1, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	6809      	ldr	r1, [r1, #0]
 8001704:	4313      	orrs	r3, r2
 8001706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800172e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6911      	ldr	r1, [r2, #16]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68d2      	ldr	r2, [r2, #12]
 800173a:	4311      	orrs	r1, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	430b      	orrs	r3, r1
 8001742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	000186a0 	.word	0x000186a0
 800179c:	001e847f 	.word	0x001e847f
 80017a0:	003d08ff 	.word	0x003d08ff
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	10624dd3 	.word	0x10624dd3

080017ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	817b      	strh	r3, [r7, #10]
 80017bc:	4613      	mov	r3, r2
 80017be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff fbd8 	bl	8000f74 <HAL_GetTick>
 80017c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	f040 80e0 	bne.w	8001994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2319      	movs	r3, #25
 80017da:	2201      	movs	r2, #1
 80017dc:	4970      	ldr	r1, [pc, #448]	; (80019a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fc64 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
 80017ec:	e0d3      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_I2C_Master_Transmit+0x50>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e0cc      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d007      	beq.n	8001822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2221      	movs	r2, #33	; 0x21
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2210      	movs	r2, #16
 800183e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	893a      	ldrh	r2, [r7, #8]
 8001852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a50      	ldr	r2, [pc, #320]	; (80019a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001864:	8979      	ldrh	r1, [r7, #10]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 face 	bl	8001e0c <I2C_MasterRequestWrite>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e08d      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001890:	e066      	b.n	8001960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	6a39      	ldr	r1, [r7, #32]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 fd22 	bl	80022e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00d      	beq.n	80018be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d107      	bne.n	80018ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06b      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d11b      	bne.n	8001934 <HAL_I2C_Master_Transmit+0x188>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	d017      	beq.n	8001934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	6a39      	ldr	r1, [r7, #32]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fd19 	bl	8002370 <I2C_WaitOnBTFFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00d      	beq.n	8001960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	2b04      	cmp	r3, #4
 800194a:	d107      	bne.n	800195c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800195a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01a      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	d194      	bne.n	8001892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	e000      	b.n	8001996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001994:	2302      	movs	r3, #2
  }
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	00100002 	.word	0x00100002
 80019a4:	ffff0000 	.word	0xffff0000

080019a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	461a      	mov	r2, r3
 80019b4:	460b      	mov	r3, r1
 80019b6:	817b      	strh	r3, [r7, #10]
 80019b8:	4613      	mov	r3, r2
 80019ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019bc:	f7ff fada 	bl	8000f74 <HAL_GetTick>
 80019c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b20      	cmp	r3, #32
 80019cc:	f040 8217 	bne.w	8001dfe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2319      	movs	r3, #25
 80019d6:	2201      	movs	r2, #1
 80019d8:	497c      	ldr	r1, [pc, #496]	; (8001bcc <HAL_I2C_Master_Receive+0x224>)
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 fb66 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
 80019e8:	e20a      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_I2C_Master_Receive+0x50>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e203      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d007      	beq.n	8001a1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2222      	movs	r2, #34	; 0x22
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2210      	movs	r2, #16
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	893a      	ldrh	r2, [r7, #8]
 8001a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4a5c      	ldr	r2, [pc, #368]	; (8001bd0 <HAL_I2C_Master_Receive+0x228>)
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a60:	8979      	ldrh	r1, [r7, #10]
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fa52 	bl	8001f10 <I2C_MasterRequestRead>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e1c4      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d113      	bne.n	8001aa6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e198      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d11b      	bne.n	8001ae6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e178      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d11b      	bne.n	8001b26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	e158      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b4c:	e144      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80f1 	bhi.w	8001d3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d123      	bne.n	8001ba8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 fc4b 	bl	8002400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e145      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba6:	e117      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d14e      	bne.n	8001c4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <HAL_I2C_Master_Receive+0x22c>)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fa76 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e11a      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
 8001bca:	bf00      	nop
 8001bcc:	00100002 	.word	0x00100002
 8001bd0:	ffff0000 	.word	0xffff0000
 8001bd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c4c:	e0c4      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c54:	2200      	movs	r2, #0
 8001c56:	496c      	ldr	r1, [pc, #432]	; (8001e08 <HAL_I2C_Master_Receive+0x460>)
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fa27 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0cb      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	4955      	ldr	r1, [pc, #340]	; (8001e08 <HAL_I2C_Master_Receive+0x460>)
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f9f9 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e09d      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d38:	e04e      	b.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fb5e 	bl	8002400 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e058      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d124      	bne.n	8001dd8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d107      	bne.n	8001da6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f47f aeb6 	bne.w	8001b4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2220      	movs	r2, #32
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e000      	b.n	8001e00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
  }
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3728      	adds	r7, #40	; 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	00010004 	.word	0x00010004

08001e0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d006      	beq.n	8001e36 <I2C_MasterRequestWrite+0x2a>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d003      	beq.n	8001e36 <I2C_MasterRequestWrite+0x2a>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e34:	d108      	bne.n	8001e48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e00b      	b.n	8001e60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	2b12      	cmp	r3, #18
 8001e4e:	d107      	bne.n	8001e60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f91d 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00d      	beq.n	8001e94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	d103      	bne.n	8001e90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e035      	b.n	8001f00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e9c:	d108      	bne.n	8001eb0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	e01b      	b.n	8001ee8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	11db      	asrs	r3, r3, #7
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 0306 	and.w	r3, r3, #6
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f063 030f 	orn	r3, r3, #15
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <I2C_MasterRequestWrite+0xfc>)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f966 	bl	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e010      	b.n	8001f00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ede:	897b      	ldrh	r3, [r7, #10]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4907      	ldr	r1, [pc, #28]	; (8001f0c <I2C_MasterRequestWrite+0x100>)
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f956 	bl	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	00010008 	.word	0x00010008
 8001f0c:	00010002 	.word	0x00010002

08001f10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d006      	beq.n	8001f4a <I2C_MasterRequestRead+0x3a>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d003      	beq.n	8001f4a <I2C_MasterRequestRead+0x3a>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f48:	d108      	bne.n	8001f5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e00b      	b.n	8001f74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	2b11      	cmp	r3, #17
 8001f62:	d107      	bne.n	8001f74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f893 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00d      	beq.n	8001fa8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9a:	d103      	bne.n	8001fa4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e079      	b.n	800209c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb0:	d108      	bne.n	8001fc4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	611a      	str	r2, [r3, #16]
 8001fc2:	e05f      	b.n	8002084 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fc4:	897b      	ldrh	r3, [r7, #10]
 8001fc6:	11db      	asrs	r3, r3, #7
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f003 0306 	and.w	r3, r3, #6
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f063 030f 	orn	r3, r3, #15
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4930      	ldr	r1, [pc, #192]	; (80020a4 <I2C_MasterRequestRead+0x194>)
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f8dc 	bl	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e054      	b.n	800209c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ff2:	897b      	ldrh	r3, [r7, #10]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4929      	ldr	r1, [pc, #164]	; (80020a8 <I2C_MasterRequestRead+0x198>)
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f8cc 	bl	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e044      	b.n	800209c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002036:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f831 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00d      	beq.n	800206c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800205e:	d103      	bne.n	8002068 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e017      	b.n	800209c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800206c:	897b      	ldrh	r3, [r7, #10]
 800206e:	11db      	asrs	r3, r3, #7
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f003 0306 	and.w	r3, r3, #6
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f063 030e 	orn	r3, r3, #14
 800207c:	b2da      	uxtb	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <I2C_MasterRequestRead+0x198>)
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f888 	bl	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	00010008 	.word	0x00010008
 80020a8:	00010002 	.word	0x00010002

080020ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020bc:	e048      	b.n	8002150 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d044      	beq.n	8002150 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7fe ff55 	bl	8000f74 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d139      	bne.n	8002150 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10d      	bne.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	43da      	mvns	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4013      	ands	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
 8002100:	e00c      	b.n	800211c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	43da      	mvns	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4013      	ands	r3, r2
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	429a      	cmp	r2, r3
 8002120:	d116      	bne.n	8002150 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e023      	b.n	8002198 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	0c1b      	lsrs	r3, r3, #16
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10d      	bne.n	8002176 <I2C_WaitOnFlagUntilTimeout+0xca>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	43da      	mvns	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	e00c      	b.n	8002190 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	43da      	mvns	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	429a      	cmp	r2, r3
 8002194:	d093      	beq.n	80020be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021ae:	e071      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021be:	d123      	bne.n	8002208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e067      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d041      	beq.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002210:	f7fe feb0 	bl	8000f74 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	d302      	bcc.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d136      	bne.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10c      	bne.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e00b      	b.n	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	43da      	mvns	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d016      	beq.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e021      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10c      	bne.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e00b      	b.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4013      	ands	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f af6d 	bne.w	80021b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ec:	e034      	b.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f8e3 	bl	80024ba <I2C_IsAcknowledgeFailed>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e034      	b.n	8002368 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002304:	d028      	beq.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7fe fe35 	bl	8000f74 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11d      	bne.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b80      	cmp	r3, #128	; 0x80
 8002328:	d016      	beq.n	8002358 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e007      	b.n	8002368 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	2b80      	cmp	r3, #128	; 0x80
 8002364:	d1c3      	bne.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800237c:	e034      	b.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f89b 	bl	80024ba <I2C_IsAcknowledgeFailed>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e034      	b.n	80023f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d028      	beq.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002396:	f7fe fded 	bl	8000f74 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11d      	bne.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d016      	beq.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e007      	b.n	80023f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d1c3      	bne.n	800237e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800240c:	e049      	b.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	d119      	bne.n	8002450 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0210 	mvn.w	r2, #16
 8002424:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e030      	b.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7fe fd90 	bl	8000f74 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d302      	bcc.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d016      	beq.n	80024a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f043 0220 	orr.w	r2, r3, #32
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e007      	b.n	80024b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d1ae      	bne.n	800240e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d0:	d11b      	bne.n	800250a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f043 0204 	orr.w	r2, r3, #4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b20      	cmp	r3, #32
 800252c:	d129      	bne.n	8002582 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2224      	movs	r2, #36	; 0x24
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0210 	bic.w	r2, r2, #16
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d12a      	bne.n	8002600 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2224      	movs	r2, #36	; 0x24
 80025ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	f023 030f 	bic.w	r3, r3, #15
 80025d0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	89fb      	ldrh	r3, [r7, #14]
 80025d8:	4313      	orrs	r3, r2
 80025da:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	89fa      	ldrh	r2, [r7, #14]
 80025e2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e267      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d075      	beq.n	800271a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d00c      	beq.n	8002654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263a:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002642:	2b08      	cmp	r3, #8
 8002644:	d112      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002646:	4b82      	ldr	r3, [pc, #520]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002652:	d10b      	bne.n	800266c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	4b7e      	ldr	r3, [pc, #504]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d05b      	beq.n	8002718 <HAL_RCC_OscConfig+0x108>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d157      	bne.n	8002718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e242      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d106      	bne.n	8002684 <HAL_RCC_OscConfig+0x74>
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e01d      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x98>
 800268e:	4b70      	ldr	r3, [pc, #448]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6f      	ldr	r2, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6c      	ldr	r2, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0xb0>
 80026a8:	4b69      	ldr	r3, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a68      	ldr	r2, [pc, #416]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fc54 	bl	8000f74 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fc50 	bl	8000f74 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e207      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0xc0>
 80026ee:	e014      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f0:	f7fe fc40 	bl	8000f74 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fc3c 	bl	8000f74 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1f3      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0xe8>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d063      	beq.n	80027ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273a:	2b08      	cmp	r3, #8
 800273c:	d11c      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273e:	4b44      	ldr	r3, [pc, #272]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d116      	bne.n	8002778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d001      	beq.n	8002762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e1c7      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4937      	ldr	r1, [pc, #220]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	e03a      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002780:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_OscConfig+0x244>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fbf5 	bl	8000f74 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe fbf1 	bl	8000f74 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1a8      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b28      	ldr	r3, [pc, #160]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4925      	ldr	r1, [pc, #148]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
 80027c0:	e015      	b.n	80027ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c2:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x244>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c8:	f7fe fbd4 	bl	8000f74 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d0:	f7fe fbd0 	bl	8000f74 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e187      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d036      	beq.n	8002868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCC_OscConfig+0x248>)
 8002804:	2201      	movs	r2, #1
 8002806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fbb4 	bl	8000f74 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002810:	f7fe fbb0 	bl	8000f74 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e167      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x240>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x200>
 800282e:	e01b      	b.n	8002868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_OscConfig+0x248>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002836:	f7fe fb9d 	bl	8000f74 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	e00e      	b.n	800285c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe fb99 	bl	8000f74 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d907      	bls.n	800285c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e150      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285c:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1ea      	bne.n	800283e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8097 	beq.w	80029a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287a:	4b81      	ldr	r3, [pc, #516]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	4b7d      	ldr	r3, [pc, #500]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	4a7c      	ldr	r2, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002894:	6413      	str	r3, [r2, #64]	; 0x40
 8002896:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b77      	ldr	r3, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b2:	4b74      	ldr	r3, [pc, #464]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a73      	ldr	r2, [pc, #460]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe fb59 	bl	8000f74 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe fb55 	bl	8000f74 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e10c      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x474>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x2ea>
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e01c      	b.n	8002934 <HAL_RCC_OscConfig+0x324>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x30c>
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a5e      	ldr	r2, [pc, #376]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x324>
 800291c:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a57      	ldr	r2, [pc, #348]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	4b55      	ldr	r3, [pc, #340]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a54      	ldr	r2, [pc, #336]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800292e:	f023 0304 	bic.w	r3, r3, #4
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fb1a 	bl	8000f74 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	e00a      	b.n	800295a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f7fe fb16 	bl	8000f74 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0cb      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295a:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0ee      	beq.n	8002944 <HAL_RCC_OscConfig+0x334>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fe fb04 	bl	8000f74 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7fe fb00 	bl	8000f74 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0b5      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002986:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ee      	bne.n	8002970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a38      	ldr	r2, [pc, #224]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a1 	beq.w	8002af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d05c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d141      	bne.n	8002a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_OscConfig+0x478>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7fe fad4 	bl	8000f74 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7fe fad0 	bl	8000f74 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e087      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	019b      	lsls	r3, r3, #6
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	491b      	ldr	r1, [pc, #108]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <HAL_RCC_OscConfig+0x478>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe faa9 	bl	8000f74 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe faa5 	bl	8000f74 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e05c      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a38:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x416>
 8002a44:	e054      	b.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCC_OscConfig+0x478>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fa92 	bl	8000f74 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe fa8e 	bl	8000f74 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e045      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_OscConfig+0x470>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x444>
 8002a72:	e03d      	b.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e038      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000
 8002a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x4ec>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d028      	beq.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d121      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d11a      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d111      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	085b      	lsrs	r3, r3, #1
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0cc      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d044      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e067      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe f9c0 	bl	8000f74 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe f9bc 	bl	8000f74 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e04f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d20c      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f80a 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	08008730 	.word	0x08008730
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd0:	b094      	sub	sp, #80	; 0x50
 8002cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cdc:	2300      	movs	r3, #0
 8002cde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce4:	4b79      	ldr	r3, [pc, #484]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d00d      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x40>
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	f200 80e1 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x34>
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cfe:	e0db      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d04:	e0db      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d06:	4b73      	ldr	r3, [pc, #460]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d0a:	e0d8      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d16:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d063      	beq.n	8002dea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d22:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	099b      	lsrs	r3, r3, #6
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d3e:	4622      	mov	r2, r4
 8002d40:	462b      	mov	r3, r5
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	0159      	lsls	r1, r3, #5
 8002d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d50:	0150      	lsls	r0, r2, #5
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4621      	mov	r1, r4
 8002d58:	1a51      	subs	r1, r2, r1
 8002d5a:	6139      	str	r1, [r7, #16]
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d70:	4659      	mov	r1, fp
 8002d72:	018b      	lsls	r3, r1, #6
 8002d74:	4651      	mov	r1, sl
 8002d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	018a      	lsls	r2, r1, #6
 8002d7e:	4651      	mov	r1, sl
 8002d80:	ebb2 0801 	subs.w	r8, r2, r1
 8002d84:	4659      	mov	r1, fp
 8002d86:	eb63 0901 	sbc.w	r9, r3, r1
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d9e:	4690      	mov	r8, r2
 8002da0:	4699      	mov	r9, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	eb18 0303 	adds.w	r3, r8, r3
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	462b      	mov	r3, r5
 8002dac:	eb49 0303 	adc.w	r3, r9, r3
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	024b      	lsls	r3, r1, #9
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dc8:	4621      	mov	r1, r4
 8002dca:	024a      	lsls	r2, r1, #9
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ddc:	f7fd fa06 	bl	80001ec <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de8:	e058      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dea:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	2200      	movs	r2, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	4611      	mov	r1, r2
 8002df6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002e00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e04:	4642      	mov	r2, r8
 8002e06:	464b      	mov	r3, r9
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	0159      	lsls	r1, r3, #5
 8002e12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e16:	0150      	lsls	r0, r2, #5
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4641      	mov	r1, r8
 8002e1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e22:	4649      	mov	r1, r9
 8002e24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e40:	eb63 050b 	sbc.w	r5, r3, fp
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e52:	00e2      	lsls	r2, r4, #3
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	4643      	mov	r3, r8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	61fa      	str	r2, [r7, #28]
 8002e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e90:	f7fd f9ac 	bl	80001ec <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	0c1b      	lsrs	r3, r3, #16
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3750      	adds	r7, #80	; 0x50
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	007a1200 	.word	0x007a1200

08002ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_RCC_GetHCLKFreq+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff0 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	0a9b      	lsrs	r3, r3, #10
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08008740 	.word	0x08008740

08002f18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	220f      	movs	r2, #15
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0203 	and.w	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_RCC_GetClockConfig+0x60>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40023c00 	.word	0x40023c00

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e041      	b.n	8003012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f839 	bl	800301a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 f9c0 	bl	8003340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04e      	b.n	80030e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d022      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d01d      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d018      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_TIM_Base_Start_IT+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00e      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_TIM_Base_Start_IT+0xd4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d009      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_TIM_Base_Start_IT+0xd8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_TIM_Base_Start_IT+0x80>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a18      	ldr	r2, [pc, #96]	; (800310c <HAL_TIM_Base_Start_IT+0xdc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d111      	bne.n	80030d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d010      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	e007      	b.n	80030e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40000c00 	.word	0x40000c00
 8003104:	40010400 	.word	0x40010400
 8003108:	40014000 	.word	0x40014000
 800310c:	40001800 	.word	0x40001800

08003110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0202 	mvn.w	r2, #2
 8003144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8d2 	bl	8003304 <HAL_TIM_IC_CaptureCallback>
 8003160:	e005      	b.n	800316e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8c4 	bl	80032f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f8d5 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b00      	cmp	r3, #0
 800317c:	d020      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0204 	mvn.w	r2, #4
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8ac 	bl	8003304 <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f89e 	bl	80032f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8af 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d020      	beq.n	800320c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01b      	beq.n	800320c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0208 	mvn.w	r2, #8
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2204      	movs	r2, #4
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f886 	bl	8003304 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f878 	bl	80032f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f889 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	d020      	beq.n	8003258 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0210 	mvn.w	r2, #16
 8003228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2208      	movs	r2, #8
 800322e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f860 	bl	8003304 <HAL_TIM_IC_CaptureCallback>
 8003244:	e005      	b.n	8003252 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f852 	bl	80032f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f863 	bl	8003318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0201 	mvn.w	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fc9a 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f906 	bl	80034ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00c      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f834 	bl	800332c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00c      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0220 	mvn.w	r2, #32
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8d8 	bl	8003498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a46      	ldr	r2, [pc, #280]	; (800346c <TIM_Base_SetConfig+0x12c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <TIM_Base_SetConfig+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335e:	d00f      	beq.n	8003380 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a43      	ldr	r2, [pc, #268]	; (8003470 <TIM_Base_SetConfig+0x130>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00b      	beq.n	8003380 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a42      	ldr	r2, [pc, #264]	; (8003474 <TIM_Base_SetConfig+0x134>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a41      	ldr	r2, [pc, #260]	; (8003478 <TIM_Base_SetConfig+0x138>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a40      	ldr	r2, [pc, #256]	; (800347c <TIM_Base_SetConfig+0x13c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d108      	bne.n	8003392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a35      	ldr	r2, [pc, #212]	; (800346c <TIM_Base_SetConfig+0x12c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d02b      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d027      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a32      	ldr	r2, [pc, #200]	; (8003470 <TIM_Base_SetConfig+0x130>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d023      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a31      	ldr	r2, [pc, #196]	; (8003474 <TIM_Base_SetConfig+0x134>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01f      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a30      	ldr	r2, [pc, #192]	; (8003478 <TIM_Base_SetConfig+0x138>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d01b      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2f      	ldr	r2, [pc, #188]	; (800347c <TIM_Base_SetConfig+0x13c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d017      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2e      	ldr	r2, [pc, #184]	; (8003480 <TIM_Base_SetConfig+0x140>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2d      	ldr	r2, [pc, #180]	; (8003484 <TIM_Base_SetConfig+0x144>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00f      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <TIM_Base_SetConfig+0x148>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	; (800348c <TIM_Base_SetConfig+0x14c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <TIM_Base_SetConfig+0x150>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a29      	ldr	r2, [pc, #164]	; (8003494 <TIM_Base_SetConfig+0x154>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <TIM_Base_SetConfig+0x12c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0xf8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <TIM_Base_SetConfig+0x13c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d103      	bne.n	8003440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f023 0201 	bic.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	611a      	str	r2, [r3, #16]
  }
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800
 8003478:	40000c00 	.word	0x40000c00
 800347c:	40010400 	.word	0x40010400
 8003480:	40014000 	.word	0x40014000
 8003484:	40014400 	.word	0x40014400
 8003488:	40014800 	.word	0x40014800
 800348c:	40001800 	.word	0x40001800
 8003490:	40001c00 	.word	0x40001c00
 8003494:	40002000 	.word	0x40002000

08003498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <VL53L0X_InitHandlerClass>:
/**
  * @brief  Memory allocation for VL53L0X_Dev_t structures and gpio pins
  *             @arg numofDevices:	Specifies the number of sensor devices
  */
void VL53L0X_InitHandlerClass(uint8_t numofDevices)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
	NumofDevices = numofDevices;
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <VL53L0X_InitHandlerClass+0x4c>)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	7013      	strb	r3, [r2, #0]
	Devices = (VL53L0X_Dev_t*) calloc(NumofDevices + 1, sizeof(VL53L0X_Dev_t));
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <VL53L0X_InitHandlerClass+0x4c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80034da:	4618      	mov	r0, r3
 80034dc:	f004 fff8 	bl	80084d0 <calloc>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <VL53L0X_InitHandlerClass+0x50>)
 80034e6:	601a      	str	r2, [r3, #0]
	DeviceIndexer = 0;
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <VL53L0X_InitHandlerClass+0x54>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
	GPIODpins = (uint16_t*) calloc(NumofDevices + 1, sizeof(uint16_t));
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <VL53L0X_InitHandlerClass+0x4c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 ffea 	bl	80084d0 <calloc>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <VL53L0X_InitHandlerClass+0x58>)
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000009 	.word	0x20000009
 8003510:	200003e0 	.word	0x200003e0
 8003514:	200003dc 	.word	0x200003dc
 8003518:	200003e4 	.word	0x200003e4

0800351c <VL53L0X_DefineAndPutDevice>:
{
	return DeviceIndexer;
}

void VL53L0X_DefineAndPutDevice(uint16_t gpioDxshutpin, uint8_t type, uint8_t speed, uint8_t address)
{
 800351c:	b5b0      	push	{r4, r5, r7, lr}
 800351e:	b0da      	sub	sp, #360	; 0x168
 8003520:	af00      	add	r7, sp, #0
 8003522:	4605      	mov	r5, r0
 8003524:	460c      	mov	r4, r1
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800352e:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8003532:	462a      	mov	r2, r5
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800353a:	f2a3 1363 	subw	r3, r3, #355	; 0x163
 800353e:	4622      	mov	r2, r4
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003546:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800354a:	4602      	mov	r2, r0
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003552:	f2a3 1365 	subw	r3, r3, #357	; 0x165
 8003556:	460a      	mov	r2, r1
 8003558:	701a      	strb	r2, [r3, #0]
	DeviceIndexer++;
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <VL53L0X_DefineAndPutDevice+0xdc>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <VL53L0X_DefineAndPutDevice+0xdc>)
 8003564:	701a      	strb	r2, [r3, #0]
	VL53L0X_Dev_t device;
	device.comms_type      =  type;
 8003566:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800356a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800356e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8003572:	f2a2 1263 	subw	r2, r2, #355	; 0x163
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	device.comms_speed_khz =  speed;
 800357c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003580:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b29a      	uxth	r2, r3
 8003588:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800358c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003590:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
	device.I2cDevAddr = address;
 8003594:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003598:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800359c:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80035a0:	f2a2 1265 	subw	r2, r2, #357	; 0x165
 80035a4:	7812      	ldrb	r2, [r2, #0]
 80035a6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	Devices[DeviceIndexer] = device;
 80035aa:	4b14      	ldr	r3, [pc, #80]	; (80035fc <VL53L0X_DefineAndPutDevice+0xe0>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <VL53L0X_DefineAndPutDevice+0xdc>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	4619      	mov	r1, r3
 80035b4:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	441a      	add	r2, r3
 80035be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80035c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80035ce:	461a      	mov	r2, r3
 80035d0:	f005 f894 	bl	80086fc <memcpy>
	GPIODpins[DeviceIndexer] = gpioDxshutpin;
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <VL53L0X_DefineAndPutDevice+0xe4>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <VL53L0X_DefineAndPutDevice+0xdc>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80035e4:	f5a2 72b1 	sub.w	r2, r2, #354	; 0x162
 80035e8:	8812      	ldrh	r2, [r2, #0]
 80035ea:	801a      	strh	r2, [r3, #0]
}
 80035ec:	bf00      	nop
 80035ee:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bdb0      	pop	{r4, r5, r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200003dc 	.word	0x200003dc
 80035fc:	200003e0 	.word	0x200003e0
 8003600:	200003e4 	.word	0x200003e4

08003604 <VL53L0X_APPStartCustomAddress>:

void VL53L0X_APPStart(void) {
  //VL53L0X_Init();
}

void VL53L0X_APPStartCustomAddress(uint8_t Indexer) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	71fb      	strb	r3, [r7, #7]
  /* initialization */
  VL53L0X_CustomAddressInit(&(Devices[Indexer]));
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <VL53L0X_APPStartCustomAddress+0x28>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f004 fdb1 	bl	8008186 <VL53L0X_CustomAddressInit>
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200003e0 	.word	0x200003e0

08003630 <VL53L0X_ResetNodes>:
  VL53L0X_CustomAddressInit(&(Devices[DeviceIndexer]));
}

void VL53L0X_ResetNodes()

{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
	for(int i = 1; i < NumofDevices + 1; i++)
 8003636:	2301      	movs	r3, #1
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e00d      	b.n	8003658 <VL53L0X_ResetNodes+0x28>
	{
	HAL_GPIO_WritePin(GPIOD,GPIODpins[i],GPIO_PIN_RESET);
 800363c:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <VL53L0X_ResetNodes+0x44>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	2200      	movs	r2, #0
 800364a:	4619      	mov	r1, r3
 800364c:	480a      	ldr	r0, [pc, #40]	; (8003678 <VL53L0X_ResetNodes+0x48>)
 800364e:	f7fd ff4f 	bl	80014f0 <HAL_GPIO_WritePin>
	for(int i = 1; i < NumofDevices + 1; i++)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3301      	adds	r3, #1
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <VL53L0X_ResetNodes+0x4c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4293      	cmp	r3, r2
 8003662:	ddeb      	ble.n	800363c <VL53L0X_ResetNodes+0xc>
	}
	HAL_Delay(100);
 8003664:	2064      	movs	r0, #100	; 0x64
 8003666:	f7fd fc91 	bl	8000f8c <HAL_Delay>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200003e4 	.word	0x200003e4
 8003678:	40020c00 	.word	0x40020c00
 800367c:	20000009 	.word	0x20000009

08003680 <VL53L0X_ActiveNodeAddress>:

void VL53L0X_ActiveNodeAddress(uint8_t Indexer){
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
	//sTempMyDevice = GetDeviceDescriptor();

	uint8_t tempAddr = Devices[Indexer].I2cDevAddr;
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <VL53L0X_ActiveNodeAddress+0x94>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800369e:	73fb      	strb	r3, [r7, #15]
	Devices[Indexer].I2cDevAddr = 0x52;
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <VL53L0X_ActiveNodeAddress+0x94>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	2252      	movs	r2, #82	; 0x52
 80036b2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	HAL_GPIO_WritePin(GPIOD,GPIODpins[Indexer],GPIO_PIN_SET);
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <VL53L0X_ActiveNodeAddress+0x98>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4619      	mov	r1, r3
 80036c6:	4815      	ldr	r0, [pc, #84]	; (800371c <VL53L0X_ActiveNodeAddress+0x9c>)
 80036c8:	f7fd ff12 	bl	80014f0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80036cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036d0:	f7fd fc5c 	bl	8000f8c <HAL_Delay>

	VL53L0X_SetDeviceAddress(&(Devices[Indexer]), tempAddr);
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <VL53L0X_ActiveNodeAddress+0x94>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 f848 	bl	800377e <VL53L0X_SetDeviceAddress>

	Devices[Indexer].I2cDevAddr = tempAddr;
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <VL53L0X_ActiveNodeAddress+0x94>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	HAL_Delay(500);
 8003704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003708:	f7fd fc40 	bl	8000f8c <HAL_Delay>
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200003e0 	.word	0x200003e0
 8003718:	200003e4 	.word	0x200003e4
 800371c:	40020c00 	.word	0x40020c00

08003720 <VL53L0X_NodeMeasure>:
	Devices[DeviceIndexer].I2cDevAddr = tempAddr;

	HAL_Delay(500);
}

uint16_t VL53L0X_NodeMeasure(uint8_t Indexer) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
	uint16_t meas = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	81fb      	strh	r3, [r7, #14]
	VL53L0X_MeasureSingle(&meas,&(Devices[Indexer]));
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <VL53L0X_NodeMeasure+0x34>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	441a      	add	r2, r3
 800373e:	f107 030e 	add.w	r3, r7, #14
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f004 fce6 	bl	8008116 <VL53L0X_MeasureSingle>
	return meas;
 800374a:	89fb      	ldrh	r3, [r7, #14]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	200003e0 	.word	0x200003e0

08003758 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 fca0 	bl	80050ae <VL53L0X_get_offset_calibration_data_micro_meter>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	////LOG_FUNCTION_END(Status);
	return Status;
 8003772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
	//LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	218a      	movs	r1, #138	; 0x8a
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f004 fbae 	bl	8007efa <VL53L0X_WrByte>
 800379e:	4603      	mov	r3, r0
 80037a0:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	//LOG_FUNCTION_END(Status);
	return Status;
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80037b0:	b5b0      	push	{r4, r5, r7, lr}
 80037b2:	b096      	sub	sp, #88	; 0x58
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80037be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2188      	movs	r1, #136	; 0x88
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f004 fb95 	bl	8007efa <VL53L0X_WrByte>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037e4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037ee:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a9e      	ldr	r2, [pc, #632]	; (8003a70 <VL53L0X_DataInit+0x2c0>)
 80037f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a9d      	ldr	r2, [pc, #628]	; (8003a74 <VL53L0X_DataInit+0x2c4>)
 80037fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fab4 	bl	8003d7c <VL53L0X_GetDeviceParameters>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800381a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800381e:	2b00      	cmp	r3, #0
 8003820:	d112      	bne.n	8003848 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003822:	2300      	movs	r3, #0
 8003824:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003826:	2300      	movs	r3, #0
 8003828:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f103 0410 	add.w	r4, r3, #16
 8003830:	f107 0510 	add.w	r5, r7, #16
 8003834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800383a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800383c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800383e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003840:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2264      	movs	r2, #100	; 0x64
 800384c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003856:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003860:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800386a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003876:	2201      	movs	r2, #1
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f004 fb3d 	bl	8007efa <VL53L0X_WrByte>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003888:	4313      	orrs	r3, r2
 800388a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800388e:	2201      	movs	r2, #1
 8003890:	21ff      	movs	r1, #255	; 0xff
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f004 fb31 	bl	8007efa <VL53L0X_WrByte>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f004 fb25 	bl	8007efa <VL53L0X_WrByte>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80038be:	f107 030f 	add.w	r3, r7, #15
 80038c2:	461a      	mov	r2, r3
 80038c4:	2191      	movs	r1, #145	; 0x91
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f004 fb95 	bl	8007ff6 <VL53L0X_RdByte>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80038e2:	2201      	movs	r2, #1
 80038e4:	2100      	movs	r1, #0
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f004 fb07 	bl	8007efa <VL53L0X_WrByte>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80038fa:	2200      	movs	r2, #0
 80038fc:	21ff      	movs	r1, #255	; 0xff
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f004 fafb 	bl	8007efa <VL53L0X_WrByte>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800390c:	4313      	orrs	r3, r2
 800390e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003912:	2200      	movs	r2, #0
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f004 faef 	bl	8007efa <VL53L0X_WrByte>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003924:	4313      	orrs	r3, r2
 8003926:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800392a:	2300      	movs	r3, #0
 800392c:	653b      	str	r3, [r7, #80]	; 0x50
 800392e:	e014      	b.n	800395a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8003930:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003934:	2b00      	cmp	r3, #0
 8003936:	d114      	bne.n	8003962 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393a:	b29b      	uxth	r3, r3
 800393c:	2201      	movs	r2, #1
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fd0d 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800394e:	4313      	orrs	r3, r2
 8003950:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003956:	3301      	adds	r3, #1
 8003958:	653b      	str	r3, [r7, #80]	; 0x50
 800395a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800395c:	2b05      	cmp	r3, #5
 800395e:	dde7      	ble.n	8003930 <VL53L0X_DataInit+0x180>
 8003960:	e000      	b.n	8003964 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8003962:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003964:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003968:	2b00      	cmp	r3, #0
 800396a:	d107      	bne.n	800397c <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800396c:	2200      	movs	r2, #0
 800396e:	2102      	movs	r1, #2
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fcf5 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800397c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003980:	2b00      	cmp	r3, #0
 8003982:	d107      	bne.n	8003994 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003984:	2200      	movs	r2, #0
 8003986:	2103      	movs	r1, #3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fce9 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003994:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800399c:	2200      	movs	r2, #0
 800399e:	2104      	movs	r1, #4
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fcdd 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80039ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d107      	bne.n	80039c4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80039b4:	2200      	movs	r2, #0
 80039b6:	2105      	movs	r1, #5
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fcd1 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80039c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80039cc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80039d0:	2100      	movs	r1, #0
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fd74 	bl	80044c0 <VL53L0X_SetLimitCheckValue>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80039de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80039e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039ea:	2101      	movs	r1, #1
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fd67 	bl	80044c0 <VL53L0X_SetLimitCheckValue>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003a00:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003a04:	2102      	movs	r1, #2
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fd5a 	bl	80044c0 <VL53L0X_SetLimitCheckValue>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2103      	movs	r1, #3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fd4e 	bl	80044c0 <VL53L0X_SetLimitCheckValue>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003a2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003a3a:	22ff      	movs	r2, #255	; 0xff
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f004 fa5b 	bl	8007efa <VL53L0X_WrByte>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003a52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	////LOG_FUNCTION_END(Status);
	return Status;
 8003a62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3758      	adds	r7, #88	; 0x58
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	00016b85 	.word	0x00016b85
 8003a74:	000970a4 	.word	0x000970a4

08003a78 <VL53L0X_StaticInit>:
	//LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b09e      	sub	sp, #120	; 0x78
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003a86:	f107 031c 	add.w	r3, r7, #28
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f004 fde8 	bl	8008664 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	////LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f002 fa3c 	bl	8005f34 <VL53L0X_get_info_from_device>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003ac8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003ad4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d80d      	bhi.n	8003af8 <VL53L0X_StaticInit+0x80>
 8003adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d102      	bne.n	8003aea <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d806      	bhi.n	8003af8 <VL53L0X_StaticInit+0x80>
 8003aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	d90b      	bls.n	8003b10 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003af8:	f107 0218 	add.w	r2, r7, #24
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 fcce 	bl	80054a4 <VL53L0X_perform_ref_spad_management>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003b0e:	e009      	b.n	8003b24 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003b14:	461a      	mov	r2, r3
 8003b16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f001 fecf 	bl	80058bc <VL53L0X_set_reference_spads>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003b24:	4b94      	ldr	r3, [pc, #592]	; (8003d78 <VL53L0X_StaticInit+0x300>)
 8003b26:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003b28:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10f      	bne.n	8003b50 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003b3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b4a:	e001      	b.n	8003b50 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003b4c:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <VL53L0X_StaticInit+0x300>)
 8003b4e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003b50:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003b58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f003 fb08 	bl	8007170 <VL53L0X_load_tuning_settings>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003b66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2304      	movs	r3, #4
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f001 f8c9 	bl	8004d10 <VL53L0X_SetGpioConfig>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b84:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d121      	bne.n	8003bd0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	21ff      	movs	r1, #255	; 0xff
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f004 f9b2 	bl	8007efa <VL53L0X_WrByte>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003b9c:	f107 031a 	add.w	r3, r7, #26
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2184      	movs	r1, #132	; 0x84
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f004 fa45 	bl	8008034 <VL53L0X_RdWord>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bb8:	2200      	movs	r2, #0
 8003bba:	21ff      	movs	r1, #255	; 0xff
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f004 f99c 	bl	8007efa <VL53L0X_WrByte>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003bd0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003bd8:	8b7b      	ldrh	r3, [r7, #26]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	461a      	mov	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003be4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8c2 	bl	8003d7c <VL53L0X_GetDeviceParameters>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003bfe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d110      	bne.n	8003c28 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003c06:	f107 0319 	add.w	r3, r7, #25
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f984 	bl	8003f1a <VL53L0X_GetFractionEnable>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003c18:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003c20:	7e7a      	ldrb	r2, [r7, #25]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003c28:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10e      	bne.n	8003c4e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 0410 	add.w	r4, r3, #16
 8003c36:	f107 051c 	add.w	r5, r7, #28
 8003c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003c4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d111      	bne.n	8003c7a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003c56:	f107 0319 	add.w	r3, r7, #25
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f004 f9c9 	bl	8007ff6 <VL53L0X_RdByte>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003c6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003c72:	7e7a      	ldrb	r2, [r7, #25]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003c7a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c82:	2200      	movs	r2, #0
 8003c84:	2100      	movs	r1, #0
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f9a4 	bl	8003fd4 <VL53L0X_SetSequenceStepEnable>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003c92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f998 	bl	8003fd4 <VL53L0X_SetSequenceStepEnable>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8003caa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003cba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003cc2:	f107 0313 	add.w	r3, r7, #19
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2100      	movs	r1, #0
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f96a 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003cd6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003cde:	7cfa      	ldrb	r2, [r7, #19]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003ce6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003cee:	f107 0313 	add.w	r3, r7, #19
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f954 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d02:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003d0a:	7cfa      	ldrb	r2, [r7, #19]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003d12:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2103      	movs	r1, #3
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f002 fe88 	bl	8006a38 <get_sequence_step_timeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003d3e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f002 fe72 	bl	8006a38 <get_sequence_step_timeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 8003d6a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3770      	adds	r7, #112	; 0x70
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bdb0      	pop	{r4, r5, r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
	int i;

	////LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8b0 	bl	8003ef4 <VL53L0X_GetDeviceMode>
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	3308      	adds	r3, #8
 8003da4:	4619      	mov	r1, r3
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa5e 	bl	8004268 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003dac:	4603      	mov	r3, r0
 8003dae:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d107      	bne.n	8003dd6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	3310      	adds	r3, #16
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fa94 	bl	80042fa <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d107      	bne.n	8003dee <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff fcb7 	bl	8003758 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003dea:	4603      	mov	r3, r0
 8003dec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d134      	bne.n	8003e60 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	e02a      	b.n	8003e52 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d12a      	bne.n	8003e5a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	b299      	uxth	r1, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	3304      	adds	r3, #4
 8003e14:	461a      	mov	r2, r3
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fbb4 	bl	8004584 <VL53L0X_GetLimitCheckValue>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8003e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d117      	bne.n	8003e5e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	b299      	uxth	r1, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	3318      	adds	r3, #24
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb1b 	bl	8004478 <VL53L0X_GetLimitCheckEnable>
 8003e42:	4603      	mov	r3, r0
 8003e44:	461a      	mov	r2, r3
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	ddd1      	ble.n	8003dfc <VL53L0X_GetDeviceParameters+0x80>
 8003e58:	e002      	b.n	8003e60 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003e5a:	bf00      	nop
 8003e5c:	e000      	b.n	8003e60 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003e5e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	333c      	adds	r3, #60	; 0x3c
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fc16 	bl	80046a0 <VL53L0X_GetWrapAroundCheckEnable>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f879 	bl	8003f7e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8003e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	73fb      	strb	r3, [r7, #15]

	////LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	2b15      	cmp	r3, #21
 8003eb0:	bf8c      	ite	hi
 8003eb2:	2201      	movhi	r2, #1
 8003eb4:	2200      	movls	r2, #0
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	d10f      	bne.n	8003edc <VL53L0X_SetDeviceMode+0x40>
 8003ebc:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <VL53L0X_SetDeviceMode+0x54>)
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	741a      	strb	r2, [r3, #16]
		break;
 8003eda:	e001      	b.n	8003ee0 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003edc:	23f8      	movs	r3, #248	; 0xf8
 8003ede:	73fb      	strb	r3, [r7, #15]
	}

	////LOG_FUNCTION_END(Status);
	return Status;
 8003ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	0030000b 	.word	0x0030000b

08003ef4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
	////LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7c1a      	ldrb	r2, [r3, #16]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	701a      	strb	r2, [r3, #0]

	////LOG_FUNCTION_END(Status);
	return Status;
 8003f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <VL53L0X_GetFractionEnable>:
	//LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	2109      	movs	r1, #9
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f004 f862 	bl	8007ff6 <VL53L0X_RdByte>
 8003f32:	4603      	mov	r3, r0
 8003f34:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	701a      	strb	r2, [r3, #0]

	////LOG_FUNCTION_END(Status);
	return Status;
 8003f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003f66:	6839      	ldr	r1, [r7, #0]
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f002 ff6f 	bl	8006e4c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	////LOG_FUNCTION_END(Status);

	return Status;
 8003f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003f8c:	6839      	ldr	r1, [r7, #0]
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f003 f83c 	bl	800700c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003f94:	4603      	mov	r3, r0
 8003f96:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	////LOG_FUNCTION_END(Status);
	return Status;
 8003f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	460b      	mov	r3, r1
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	75fb      	strb	r3, [r7, #23]
	////LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f002 ff0e 	bl	8006dde <VL53L0X_get_vcsel_pulse_period>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	////LOG_FUNCTION_END(Status);
	return Status;
 8003fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	//LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003ff0:	f107 030f 	add.w	r3, r7, #15
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f003 fffc 	bl	8007ff6 <VL53L0X_RdByte>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d159      	bne.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 800400e:	78bb      	ldrb	r3, [r7, #2]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d12b      	bne.n	800406c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d825      	bhi.n	8004066 <VL53L0X_SetSequenceStepEnable+0x92>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004035 	.word	0x08004035
 8004024:	0800403f 	.word	0x0800403f
 8004028:	08004049 	.word	0x08004049
 800402c:	08004053 	.word	0x08004053
 8004030:	0800405d 	.word	0x0800405d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004034:	7dbb      	ldrb	r3, [r7, #22]
 8004036:	f043 0310 	orr.w	r3, r3, #16
 800403a:	75bb      	strb	r3, [r7, #22]
				break;
 800403c:	e041      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800403e:	7dbb      	ldrb	r3, [r7, #22]
 8004040:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004044:	75bb      	strb	r3, [r7, #22]
				break;
 8004046:	e03c      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004048:	7dbb      	ldrb	r3, [r7, #22]
 800404a:	f043 0304 	orr.w	r3, r3, #4
 800404e:	75bb      	strb	r3, [r7, #22]
				break;
 8004050:	e037      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004052:	7dbb      	ldrb	r3, [r7, #22]
 8004054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004058:	75bb      	strb	r3, [r7, #22]
				break;
 800405a:	e032      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800405c:	7dbb      	ldrb	r3, [r7, #22]
 800405e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004062:	75bb      	strb	r3, [r7, #22]
				break;
 8004064:	e02d      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004066:	23fc      	movs	r3, #252	; 0xfc
 8004068:	75fb      	strb	r3, [r7, #23]
 800406a:	e02a      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	2b04      	cmp	r3, #4
 8004070:	d825      	bhi.n	80040be <VL53L0X_SetSequenceStepEnable+0xea>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	0800408d 	.word	0x0800408d
 800407c:	08004097 	.word	0x08004097
 8004080:	080040a1 	.word	0x080040a1
 8004084:	080040ab 	.word	0x080040ab
 8004088:	080040b5 	.word	0x080040b5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800408c:	7dbb      	ldrb	r3, [r7, #22]
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	75bb      	strb	r3, [r7, #22]
				break;
 8004094:	e015      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004096:	7dbb      	ldrb	r3, [r7, #22]
 8004098:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800409c:	75bb      	strb	r3, [r7, #22]
				break;
 800409e:	e010      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80040a0:	7dbb      	ldrb	r3, [r7, #22]
 80040a2:	f023 0304 	bic.w	r3, r3, #4
 80040a6:	75bb      	strb	r3, [r7, #22]
				break;
 80040a8:	e00b      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80040aa:	7dbb      	ldrb	r3, [r7, #22]
 80040ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b0:	75bb      	strb	r3, [r7, #22]
				break;
 80040b2:	e006      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80040b4:	7dbb      	ldrb	r3, [r7, #22]
 80040b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ba:	75bb      	strb	r3, [r7, #22]
				break;
 80040bc:	e001      	b.n	80040c2 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80040be:	23fc      	movs	r3, #252	; 0xfc
 80040c0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	7dba      	ldrb	r2, [r7, #22]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d01e      	beq.n	8004108 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80040ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d107      	bne.n	80040e2 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 80040d2:	7dbb      	ldrb	r3, [r7, #22]
 80040d4:	461a      	mov	r2, r3
 80040d6:	2101      	movs	r1, #1
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f003 ff0e 	bl	8007efa <VL53L0X_WrByte>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80040e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7dba      	ldrb	r2, [r7, #22]
 80040ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80040f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004100:	6939      	ldr	r1, [r7, #16]
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff ff28 	bl	8003f58 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	//LOG_FUNCTION_END(Status);

	return Status;
 8004108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	72fb      	strb	r3, [r7, #11]
 8004122:	4613      	mov	r3, r2
 8004124:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
	//LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004130:	7afb      	ldrb	r3, [r7, #11]
 8004132:	2b04      	cmp	r3, #4
 8004134:	d836      	bhi.n	80041a4 <sequence_step_enabled+0x90>
 8004136:	a201      	add	r2, pc, #4	; (adr r2, 800413c <sequence_step_enabled+0x28>)
 8004138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413c:	08004151 	.word	0x08004151
 8004140:	08004163 	.word	0x08004163
 8004144:	08004175 	.word	0x08004175
 8004148:	08004187 	.word	0x08004187
 800414c:	08004199 	.word	0x08004199
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004150:	7abb      	ldrb	r3, [r7, #10]
 8004152:	111b      	asrs	r3, r3, #4
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	701a      	strb	r2, [r3, #0]
		break;
 8004160:	e022      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004162:	7abb      	ldrb	r3, [r7, #10]
 8004164:	10db      	asrs	r3, r3, #3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	701a      	strb	r2, [r3, #0]
		break;
 8004172:	e019      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004174:	7abb      	ldrb	r3, [r7, #10]
 8004176:	109b      	asrs	r3, r3, #2
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	701a      	strb	r2, [r3, #0]
		break;
 8004184:	e010      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004186:	7abb      	ldrb	r3, [r7, #10]
 8004188:	119b      	asrs	r3, r3, #6
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	b2da      	uxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	701a      	strb	r2, [r3, #0]
		break;
 8004196:	e007      	b.n	80041a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004198:	7abb      	ldrb	r3, [r7, #10]
 800419a:	09db      	lsrs	r3, r3, #7
 800419c:	b2da      	uxtb	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	701a      	strb	r2, [r3, #0]
		break;
 80041a2:	e001      	b.n	80041a8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041a4:	23fc      	movs	r3, #252	; 0xfc
 80041a6:	75fb      	strb	r3, [r7, #23]
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 80041a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73bb      	strb	r3, [r7, #14]
	//LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80041ca:	f107 030e 	add.w	r3, r7, #14
 80041ce:	461a      	mov	r2, r3
 80041d0:	2101      	movs	r1, #1
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f003 ff0f 	bl	8007ff6 <VL53L0X_RdByte>
 80041d8:	4603      	mov	r3, r0
 80041da:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80041e4:	7bba      	ldrb	r2, [r7, #14]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2100      	movs	r1, #0
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ff92 	bl	8004114 <sequence_step_enabled>
 80041f0:	4603      	mov	r3, r0
 80041f2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80041f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d108      	bne.n	800420e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80041fc:	7bba      	ldrb	r2, [r7, #14]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	3302      	adds	r3, #2
 8004202:	2101      	movs	r1, #1
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff85 	bl	8004114 <sequence_step_enabled>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800420e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d108      	bne.n	8004228 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004216:	7bba      	ldrb	r2, [r7, #14]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	2102      	movs	r1, #2
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff78 	bl	8004114 <sequence_step_enabled>
 8004224:	4603      	mov	r3, r0
 8004226:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d108      	bne.n	8004242 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004230:	7bba      	ldrb	r2, [r7, #14]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	3303      	adds	r3, #3
 8004236:	2103      	movs	r1, #3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff6b 	bl	8004114 <sequence_step_enabled>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d108      	bne.n	800425c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800424a:	7bba      	ldrb	r2, [r7, #14]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	3304      	adds	r3, #4
 8004250:	2104      	movs	r1, #4
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff ff5e 	bl	8004114 <sequence_step_enabled>
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 800425c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	//LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004276:	f107 030c 	add.w	r3, r7, #12
 800427a:	461a      	mov	r2, r3
 800427c:	21f8      	movs	r1, #248	; 0xf8
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f003 fed8 	bl	8008034 <VL53L0X_RdWord>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	461a      	mov	r2, r3
 8004296:	2104      	movs	r1, #4
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f003 feea 	bl	8008072 <VL53L0X_RdDWord>
 800429e:	4603      	mov	r3, r0
 80042a0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80042aa:	89bb      	ldrh	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	89ba      	ldrh	r2, [r7, #12]
 80042b4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 80042c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	//LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7f1b      	ldrb	r3, [r3, #28]
 80042e2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	7bba      	ldrb	r2, [r7, #14]
 80042e8:	701a      	strb	r2, [r3, #0]

	//LOG_FUNCTION_END(Status);
	return Status;
 80042ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004304:	2300      	movs	r3, #0
 8004306:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	//LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004308:	f107 030e 	add.w	r3, r7, #14
 800430c:	461a      	mov	r2, r3
 800430e:	2120      	movs	r1, #32
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f003 fe8f 	bl	8008034 <VL53L0X_RdWord>
 8004316:	4603      	mov	r3, r0
 8004318:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800431a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	771a      	strb	r2, [r3, #28]
 800433a:	e00b      	b.n	8004354 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800433c:	89fb      	ldrh	r3, [r7, #14]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8004354:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
 800436c:	4613      	mov	r3, r2
 800436e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004370:	2300      	movs	r3, #0
 8004372:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	//LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	2b05      	cmp	r3, #5
 8004384:	d902      	bls.n	800438c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004386:	23fc      	movs	r3, #252	; 0xfc
 8004388:	75fb      	strb	r3, [r7, #23]
 800438a:	e05b      	b.n	8004444 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800438c:	787b      	ldrb	r3, [r7, #1]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800439a:	2301      	movs	r3, #1
 800439c:	73bb      	strb	r3, [r7, #14]
 800439e:	e00a      	b.n	80043b6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	330c      	adds	r3, #12
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80043b6:	887b      	ldrh	r3, [r7, #2]
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	d841      	bhi.n	8004440 <VL53L0X_SetLimitCheckEnable+0xe0>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <VL53L0X_SetLimitCheckEnable+0x64>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043dd 	.word	0x080043dd
 80043c8:	080043e7 	.word	0x080043e7
 80043cc:	080043fd 	.word	0x080043fd
 80043d0:	08004407 	.word	0x08004407
 80043d4:	08004411 	.word	0x08004411
 80043d8:	08004429 	.word	0x08004429

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	7bfa      	ldrb	r2, [r7, #15]
 80043e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80043e4:	e02e      	b.n	8004444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	2144      	movs	r1, #68	; 0x44
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f003 fda2 	bl	8007f3a <VL53L0X_WrWord>
 80043f6:	4603      	mov	r3, r0
 80043f8:	75fb      	strb	r3, [r7, #23]

			break;
 80043fa:	e023      	b.n	8004444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004404:	e01e      	b.n	8004444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800440e:	e019      	b.n	8004444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004416:	7b7b      	ldrb	r3, [r7, #13]
 8004418:	22fe      	movs	r2, #254	; 0xfe
 800441a:	2160      	movs	r1, #96	; 0x60
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f003 fdac 	bl	8007f7a <VL53L0X_UpdateByte>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004426:	e00d      	b.n	8004444 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800442e:	7b7b      	ldrb	r3, [r7, #13]
 8004430:	22ef      	movs	r2, #239	; 0xef
 8004432:	2160      	movs	r1, #96	; 0x60
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f003 fda0 	bl	8007f7a <VL53L0X_UpdateByte>
 800443a:	4603      	mov	r3, r0
 800443c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800443e:	e001      	b.n	8004444 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004440:	23fc      	movs	r3, #252	; 0xfc
 8004442:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004444:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10f      	bne.n	800446c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800444c:	787b      	ldrb	r3, [r7, #1]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004452:	887b      	ldrh	r3, [r7, #2]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4413      	add	r3, r2
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800445e:	e005      	b.n	800446c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004460:	887b      	ldrh	r3, [r7, #2]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 800446c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	460b      	mov	r3, r1
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004486:	2300      	movs	r3, #0
 8004488:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	//LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	2b05      	cmp	r3, #5
 800448e:	d905      	bls.n	800449c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004490:	23fc      	movs	r3, #252	; 0xfc
 8004492:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e008      	b.n	80044ae <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800449c:	897b      	ldrh	r3, [r7, #10]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	7dba      	ldrb	r2, [r7, #22]
 80044ac:	701a      	strb	r2, [r3, #0]
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 80044ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	460b      	mov	r3, r1
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	//LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80044d2:	897b      	ldrh	r3, [r7, #10]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044dc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80044de:	7dbb      	ldrb	r3, [r7, #22]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80044e4:	897b      	ldrh	r3, [r7, #10]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	330c      	adds	r3, #12
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	e040      	b.n	8004576 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80044f4:	897b      	ldrh	r3, [r7, #10]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d830      	bhi.n	800455c <VL53L0X_SetLimitCheckValue+0x9c>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <VL53L0X_SetLimitCheckValue+0x40>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004519 	.word	0x08004519
 8004504:	08004521 	.word	0x08004521
 8004508:	08004537 	.word	0x08004537
 800450c:	0800453f 	.word	0x0800453f
 8004510:	08004547 	.word	0x08004547
 8004514:	08004547 	.word	0x08004547

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800451e:	e01f      	b.n	8004560 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004524:	b29b      	uxth	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	2144      	movs	r1, #68	; 0x44
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f003 fd05 	bl	8007f3a <VL53L0X_WrWord>
 8004530:	4603      	mov	r3, r0
 8004532:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004534:	e014      	b.n	8004560 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800453c:	e010      	b.n	8004560 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004544:	e00c      	b.n	8004560 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	2164      	movs	r1, #100	; 0x64
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f003 fcf2 	bl	8007f3a <VL53L0X_WrWord>
 8004556:	4603      	mov	r3, r0
 8004558:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800455a:	e001      	b.n	8004560 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800455c:	23fc      	movs	r3, #252	; 0xfc
 800455e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004560:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004568:	897b      	ldrh	r3, [r7, #10]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	330c      	adds	r3, #12
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8004576:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop

08004584 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	460b      	mov	r3, r1
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004592:	2300      	movs	r3, #0
 8004594:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	//LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800459a:	897b      	ldrh	r3, [r7, #10]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d847      	bhi.n	8004630 <VL53L0X_GetLimitCheckValue+0xac>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <VL53L0X_GetLimitCheckValue+0x24>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045c1 	.word	0x080045c1
 80045ac:	080045cd 	.word	0x080045cd
 80045b0:	080045f3 	.word	0x080045f3
 80045b4:	080045ff 	.word	0x080045ff
 80045b8:	0800460b 	.word	0x0800460b
 80045bc:	0800460b 	.word	0x0800460b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	77bb      	strb	r3, [r7, #30]
		break;
 80045ca:	e033      	b.n	8004634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80045cc:	f107 0316 	add.w	r3, r7, #22
 80045d0:	461a      	mov	r2, r3
 80045d2:	2144      	movs	r1, #68	; 0x44
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f003 fd2d 	bl	8008034 <VL53L0X_RdWord>
 80045da:	4603      	mov	r3, r0
 80045dc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80045de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80045e6:	8afb      	ldrh	r3, [r7, #22]
 80045e8:	025b      	lsls	r3, r3, #9
 80045ea:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77bb      	strb	r3, [r7, #30]
		break;
 80045f0:	e020      	b.n	8004634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	77bb      	strb	r3, [r7, #30]
		break;
 80045fc:	e01a      	b.n	8004634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	77bb      	strb	r3, [r7, #30]
		break;
 8004608:	e014      	b.n	8004634 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800460a:	f107 0316 	add.w	r3, r7, #22
 800460e:	461a      	mov	r2, r3
 8004610:	2164      	movs	r1, #100	; 0x64
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f003 fd0e 	bl	8008034 <VL53L0X_RdWord>
 8004618:	4603      	mov	r3, r0
 800461a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800461c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d102      	bne.n	800462a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004624:	8afb      	ldrh	r3, [r7, #22]
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	77bb      	strb	r3, [r7, #30]
		break;
 800462e:	e001      	b.n	8004634 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004630:	23fc      	movs	r3, #252	; 0xfc
 8004632:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004634:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d12a      	bne.n	8004692 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800463c:	7fbb      	ldrb	r3, [r7, #30]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d124      	bne.n	800468c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d110      	bne.n	800466a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	330c      	adds	r3, #12
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800465c:	897b      	ldrh	r3, [r7, #10]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004668:	e013      	b.n	8004692 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	330c      	adds	r3, #12
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800468a:	e002      	b.n	8004692 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	601a      	str	r2, [r3, #0]
		}
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8004692:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop

080046a0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	//LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80046ae:	f107 030e 	add.w	r3, r7, #14
 80046b2:	461a      	mov	r2, r3
 80046b4:	2101      	movs	r1, #1
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f003 fc9d 	bl	8007ff6 <VL53L0X_RdByte>
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80046c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10e      	bne.n	80046e6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80046c8:	7bba      	ldrb	r2, [r7, #14]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	b25b      	sxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	da03      	bge.n	80046e0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e002      	b.n	80046e6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2200      	movs	r2, #0
 80046e4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 80046f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	//LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004710:	f107 030e 	add.w	r3, r7, #14
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fbec 	bl	8003ef4 <VL53L0X_GetDeviceMode>
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d107      	bne.n	8004738 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004728:	7bbb      	ldrb	r3, [r7, #14]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f898 	bl	8004864 <VL53L0X_StartMeasurement>
 8004734:	4603      	mov	r3, r0
 8004736:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 fb3d 	bl	8005dc0 <VL53L0X_measurement_poll_for_completion>
 8004746:	4603      	mov	r3, r0
 8004748:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800474a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004752:	7bbb      	ldrb	r3, [r7, #14]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2203      	movs	r2, #3
 800475c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	//LOG_FUNCTION_END(Status);
	return Status;
 8004760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
	//LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800477c:	2301      	movs	r3, #1
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f001 fadf 	bl	8005d46 <VL53L0X_perform_ref_calibration>
 8004788:	4603      	mov	r3, r0
 800478a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	//LOG_FUNCTION_END(Status);
	return Status;
 800478c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80047ae:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80047b0:	7dbb      	ldrb	r3, [r7, #22]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d005      	beq.n	80047c2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80047b6:	7dbb      	ldrb	r3, [r7, #22]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d002      	beq.n	80047c2 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80047bc:	7dbb      	ldrb	r3, [r7, #22]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d147      	bne.n	8004852 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80047c2:	f107 030c 	add.w	r3, r7, #12
 80047c6:	f107 0210 	add.w	r2, r7, #16
 80047ca:	2101      	movs	r1, #1
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 fbc1 	bl	8004f54 <VL53L0X_GetInterruptThresholds>
 80047d2:	4603      	mov	r3, r0
 80047d4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80047dc:	d803      	bhi.n	80047e6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80047de:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80047e0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80047e4:	d935      	bls.n	8004852 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80047e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d131      	bne.n	8004852 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d006      	beq.n	8004802 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80047f4:	491a      	ldr	r1, [pc, #104]	; (8004860 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f002 fcba 	bl	8007170 <VL53L0X_load_tuning_settings>
 80047fc:	4603      	mov	r3, r0
 80047fe:	75fb      	strb	r3, [r7, #23]
 8004800:	e027      	b.n	8004852 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004802:	2204      	movs	r2, #4
 8004804:	21ff      	movs	r1, #255	; 0xff
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f003 fb77 	bl	8007efa <VL53L0X_WrByte>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	4313      	orrs	r3, r2
 8004814:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004816:	2200      	movs	r2, #0
 8004818:	2170      	movs	r1, #112	; 0x70
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f003 fb6d 	bl	8007efa <VL53L0X_WrByte>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	4313      	orrs	r3, r2
 8004828:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800482a:	2200      	movs	r2, #0
 800482c:	21ff      	movs	r1, #255	; 0xff
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f003 fb63 	bl	8007efa <VL53L0X_WrByte>
 8004834:	4603      	mov	r3, r0
 8004836:	461a      	mov	r2, r3
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	4313      	orrs	r3, r2
 800483c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f003 fb59 	bl	8007efa <VL53L0X_WrByte>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	4313      	orrs	r3, r2
 8004850:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004852:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000100 	.word	0x20000100

08004864 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	//LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004874:	f107 030e 	add.w	r3, r7, #14
 8004878:	4619      	mov	r1, r3
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fb3a 	bl	8003ef4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004880:	2201      	movs	r2, #1
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f003 fb38 	bl	8007efa <VL53L0X_WrByte>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800488e:	2201      	movs	r2, #1
 8004890:	21ff      	movs	r1, #255	; 0xff
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f003 fb31 	bl	8007efa <VL53L0X_WrByte>
 8004898:	4603      	mov	r3, r0
 800489a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800489c:	2200      	movs	r2, #0
 800489e:	2100      	movs	r1, #0
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f003 fb2a 	bl	8007efa <VL53L0X_WrByte>
 80048a6:	4603      	mov	r3, r0
 80048a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80048b0:	461a      	mov	r2, r3
 80048b2:	2191      	movs	r1, #145	; 0x91
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f003 fb20 	bl	8007efa <VL53L0X_WrByte>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80048be:	2201      	movs	r2, #1
 80048c0:	2100      	movs	r1, #0
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f003 fb19 	bl	8007efa <VL53L0X_WrByte>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80048cc:	2200      	movs	r2, #0
 80048ce:	21ff      	movs	r1, #255	; 0xff
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f003 fb12 	bl	8007efa <VL53L0X_WrByte>
 80048d6:	4603      	mov	r3, r0
 80048d8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80048da:	2200      	movs	r2, #0
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f003 fb0b 	bl	8007efa <VL53L0X_WrByte>
 80048e4:	4603      	mov	r3, r0
 80048e6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80048e8:	7bbb      	ldrb	r3, [r7, #14]
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d054      	beq.n	8004998 <VL53L0X_StartMeasurement+0x134>
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	dc6c      	bgt.n	80049cc <VL53L0X_StartMeasurement+0x168>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <VL53L0X_StartMeasurement+0x98>
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d034      	beq.n	8004964 <VL53L0X_StartMeasurement+0x100>
 80048fa:	e067      	b.n	80049cc <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80048fc:	2201      	movs	r2, #1
 80048fe:	2100      	movs	r1, #0
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f003 fafa 	bl	8007efa <VL53L0X_WrByte>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800490e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d15d      	bne.n	80049d2 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8004920:	f107 030d 	add.w	r3, r7, #13
 8004924:	461a      	mov	r2, r3
 8004926:	2100      	movs	r1, #0
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f003 fb64 	bl	8007ff6 <VL53L0X_RdByte>
 800492e:	4603      	mov	r3, r0
 8004930:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	3301      	adds	r3, #1
 8004936:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004938:	7b7a      	ldrb	r2, [r7, #13]
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	4013      	ands	r3, r2
 800493e:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	429a      	cmp	r2, r3
 8004944:	d107      	bne.n	8004956 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8004946:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004954:	d3e1      	bcc.n	800491a <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800495c:	d339      	bcc.n	80049d2 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800495e:	23f9      	movs	r3, #249	; 0xf9
 8004960:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004962:	e036      	b.n	80049d2 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004964:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800496c:	2101      	movs	r1, #1
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7ff ff12 	bl	8004798 <VL53L0X_CheckAndLoadInterruptSettings>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004978:	2202      	movs	r2, #2
 800497a:	2100      	movs	r1, #0
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f003 fabc 	bl	8007efa <VL53L0X_WrByte>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d123      	bne.n	80049d6 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2204      	movs	r2, #4
 8004992:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004996:	e01e      	b.n	80049d6 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80049a0:	2101      	movs	r1, #1
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fef8 	bl	8004798 <VL53L0X_CheckAndLoadInterruptSettings>
 80049a8:	4603      	mov	r3, r0
 80049aa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80049ac:	2204      	movs	r2, #4
 80049ae:	2100      	movs	r1, #0
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f003 faa2 	bl	8007efa <VL53L0X_WrByte>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80049ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2204      	movs	r2, #4
 80049c6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80049ca:	e006      	b.n	80049da <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80049cc:	23f8      	movs	r3, #248	; 0xf8
 80049ce:	75fb      	strb	r3, [r7, #23]
 80049d0:	e004      	b.n	80049dc <VL53L0X_StartMeasurement+0x178>
		break;
 80049d2:	bf00      	nop
 80049d4:	e002      	b.n	80049dc <VL53L0X_StartMeasurement+0x178>
		break;
 80049d6:	bf00      	nop
 80049d8:	e000      	b.n	80049dc <VL53L0X_StartMeasurement+0x178>
		break;
 80049da:	bf00      	nop
	}


	//LOG_FUNCTION_END(Status);
	return Status;
 80049dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	//LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80049fc:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80049fe:	7bbb      	ldrb	r3, [r7, #14]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d112      	bne.n	8004a2a <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4619      	mov	r1, r3
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fb18 	bl	8005040 <VL53L0X_GetInterruptMaskStatus>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d103      	bne.n	8004a22 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	e01c      	b.n	8004a5c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	e018      	b.n	8004a5c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004a2a:	f107 030d 	add.w	r3, r7, #13
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2114      	movs	r1, #20
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f003 fadf 	bl	8007ff6 <VL53L0X_RdByte>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004a44:	7b7b      	ldrb	r3, [r7, #13]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2201      	movs	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e002      	b.n	8004a5c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
		}
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8004a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004a68:	b5b0      	push	{r4, r5, r7, lr}
 8004a6a:	b096      	sub	sp, #88	; 0x58
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004a78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a7c:	230c      	movs	r3, #12
 8004a7e:	2114      	movs	r1, #20
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f003 fa15 	bl	8007eb0 <VL53L0X_ReadMulti>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004a8c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f040 80d1 	bne.w	8004c38 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004aa2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004abe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	021b      	lsls	r3, r3, #8
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	025b      	lsls	r3, r3, #9
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ada:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004adc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004af2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004afe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b1a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004b1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004b2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004b36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3c:	d046      	beq.n	8004bcc <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004b3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b40:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004b4c:	4a57      	ldr	r2, [pc, #348]	; (8004cac <VL53L0X_GetRangingMeasurementData+0x244>)
 8004b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8004b52:	1192      	asrs	r2, r2, #6
 8004b54:	17db      	asrs	r3, r3, #31
 8004b56:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004b58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7f1b      	ldrb	r3, [r3, #28]
 8004b66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004b6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d02c      	beq.n	8004bcc <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004b72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b74:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d10d      	bne.n	8004ba0 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8004b84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8004b8c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004b90:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b94:	e016      	b.n	8004bc4 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8004b96:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004b9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004b9e:	e011      	b.n	8004bc4 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004ba0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba6:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004baa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004bac:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004bb0:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004bb4:	121b      	asrs	r3, r3, #8
 8004bb6:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004bc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004bc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004bcc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00d      	beq.n	8004bf0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004bd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bd8:	089b      	lsrs	r3, r3, #2
 8004bda:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004be0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	75da      	strb	r2, [r3, #23]
 8004bee:	e006      	b.n	8004bfe <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004bf6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004bfe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004c02:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004c06:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f002 ff49 	bl	8007aac <VL53L0X_get_pal_range_status>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004c28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004c30:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c38:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d12f      	bne.n	8004ca0 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f107 040c 	add.w	r4, r7, #12
 8004c46:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004c5a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004c68:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004c6e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004c74:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004c7a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004c80:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004c86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004c90:	f107 050c 	add.w	r5, r7, #12
 8004c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8004ca0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3750      	adds	r7, #80	; 0x50
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bdb0      	pop	{r4, r5, r7, pc}
 8004cac:	10624dd3 	.word	0x10624dd3

08004cb0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

	//LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff f8eb 	bl	8003e9c <VL53L0X_SetDeviceMode>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d104      	bne.n	8004cdc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fd16 	bl	8004704 <VL53L0X_PerformSingleMeasurement>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff febe 	bl	8004a68 <VL53L0X_GetRangingMeasurementData>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f960 	bl	8004fc0 <VL53L0X_ClearInterruptMask>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]


	//LOG_FUNCTION_END(Status);
	return Status;
 8004d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	70fb      	strb	r3, [r7, #3]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70bb      	strb	r3, [r7, #2]
 8004d26:	4613      	mov	r3, r2
 8004d28:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	//LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004d34:	23f6      	movs	r3, #246	; 0xf6
 8004d36:	73fb      	strb	r3, [r7, #15]
 8004d38:	e105      	b.n	8004f46 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004d3a:	78bb      	ldrb	r3, [r7, #2]
 8004d3c:	2b14      	cmp	r3, #20
 8004d3e:	d110      	bne.n	8004d62 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004d40:	7e3b      	ldrb	r3, [r7, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d102      	bne.n	8004d4c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8004d46:	2310      	movs	r3, #16
 8004d48:	73bb      	strb	r3, [r7, #14]
 8004d4a:	e001      	b.n	8004d50 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004d50:	7bbb      	ldrb	r3, [r7, #14]
 8004d52:	461a      	mov	r2, r3
 8004d54:	2184      	movs	r1, #132	; 0x84
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f003 f8cf 	bl	8007efa <VL53L0X_WrByte>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e0f1      	b.n	8004f46 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8004d62:	78bb      	ldrb	r3, [r7, #2]
 8004d64:	2b15      	cmp	r3, #21
 8004d66:	f040 8097 	bne.w	8004e98 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	21ff      	movs	r1, #255	; 0xff
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f003 f8c3 	bl	8007efa <VL53L0X_WrByte>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2100      	movs	r1, #0
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f003 f8b9 	bl	8007efa <VL53L0X_WrByte>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004d92:	2200      	movs	r2, #0
 8004d94:	21ff      	movs	r1, #255	; 0xff
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f003 f8af 	bl	8007efa <VL53L0X_WrByte>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461a      	mov	r2, r3
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004da6:	2201      	movs	r2, #1
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f003 f8a5 	bl	8007efa <VL53L0X_WrByte>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004dba:	2202      	movs	r2, #2
 8004dbc:	2185      	movs	r1, #133	; 0x85
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f003 f89b 	bl	8007efa <VL53L0X_WrByte>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004dce:	2204      	movs	r2, #4
 8004dd0:	21ff      	movs	r1, #255	; 0xff
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f003 f891 	bl	8007efa <VL53L0X_WrByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004de2:	2200      	movs	r2, #0
 8004de4:	21cd      	movs	r1, #205	; 0xcd
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f003 f887 	bl	8007efa <VL53L0X_WrByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004df6:	2211      	movs	r2, #17
 8004df8:	21cc      	movs	r1, #204	; 0xcc
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f003 f87d 	bl	8007efa <VL53L0X_WrByte>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461a      	mov	r2, r3
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004e0a:	2207      	movs	r2, #7
 8004e0c:	21ff      	movs	r1, #255	; 0xff
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f003 f873 	bl	8007efa <VL53L0X_WrByte>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	21be      	movs	r1, #190	; 0xbe
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f003 f869 	bl	8007efa <VL53L0X_WrByte>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8004e32:	2206      	movs	r2, #6
 8004e34:	21ff      	movs	r1, #255	; 0xff
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f003 f85f 	bl	8007efa <VL53L0X_WrByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8004e46:	2209      	movs	r2, #9
 8004e48:	21cc      	movs	r1, #204	; 0xcc
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f003 f855 	bl	8007efa <VL53L0X_WrByte>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	21ff      	movs	r1, #255	; 0xff
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f003 f84b 	bl	8007efa <VL53L0X_WrByte>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004e6e:	2201      	movs	r2, #1
 8004e70:	21ff      	movs	r1, #255	; 0xff
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f003 f841 	bl	8007efa <VL53L0X_WrByte>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004e82:	2200      	movs	r2, #0
 8004e84:	2100      	movs	r1, #0
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f003 f837 	bl	8007efa <VL53L0X_WrByte>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	73fb      	strb	r3, [r7, #15]
 8004e96:	e056      	b.n	8004f46 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d120      	bne.n	8004ee2 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004ea0:	787b      	ldrb	r3, [r7, #1]
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d81b      	bhi.n	8004ede <VL53L0X_SetGpioConfig+0x1ce>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <VL53L0X_SetGpioConfig+0x19c>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ec1 	.word	0x08004ec1
 8004eb0:	08004ec7 	.word	0x08004ec7
 8004eb4:	08004ecd 	.word	0x08004ecd
 8004eb8:	08004ed3 	.word	0x08004ed3
 8004ebc:	08004ed9 	.word	0x08004ed9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73bb      	strb	r3, [r7, #14]
				break;
 8004ec4:	e00d      	b.n	8004ee2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73bb      	strb	r3, [r7, #14]
				break;
 8004eca:	e00a      	b.n	8004ee2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	73bb      	strb	r3, [r7, #14]
				break;
 8004ed0:	e007      	b.n	8004ee2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	73bb      	strb	r3, [r7, #14]
				break;
 8004ed6:	e004      	b.n	8004ee2 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004ed8:	2304      	movs	r3, #4
 8004eda:	73bb      	strb	r3, [r7, #14]
				break;
 8004edc:	e001      	b.n	8004ee2 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8004ede:	23f5      	movs	r3, #245	; 0xf5
 8004ee0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	461a      	mov	r2, r3
 8004eee:	210a      	movs	r1, #10
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f003 f802 	bl	8007efa <VL53L0X_WrByte>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004f02:	7e3b      	ldrb	r3, [r7, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73bb      	strb	r3, [r7, #14]
 8004f0c:	e001      	b.n	8004f12 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8004f0e:	2310      	movs	r3, #16
 8004f10:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004f12:	7bbb      	ldrb	r3, [r7, #14]
 8004f14:	22ef      	movs	r2, #239	; 0xef
 8004f16:	2184      	movs	r1, #132	; 0x84
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f003 f82e 	bl	8007f7a <VL53L0X_UpdateByte>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	787a      	ldrb	r2, [r7, #1]
 8004f2e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f83f 	bl	8004fc0 <VL53L0X_ClearInterruptMask>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]

	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop

08004f54 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	460b      	mov	r3, r1
 8004f62:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f64:	2300      	movs	r3, #0
 8004f66:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	//LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	210e      	movs	r1, #14
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f003 f85f 	bl	8008034 <VL53L0X_RdWord>
 8004f76:	4603      	mov	r3, r0
 8004f78:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004f7a:	8abb      	ldrh	r3, [r7, #20]
 8004f7c:	045b      	lsls	r3, r3, #17
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <VL53L0X_GetInterruptThresholds+0x68>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10f      	bne.n	8004fb0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	461a      	mov	r2, r3
 8004f96:	210c      	movs	r1, #12
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f003 f84b 	bl	8008034 <VL53L0X_RdWord>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004fa2:	8abb      	ldrh	r3, [r7, #20]
 8004fa4:	045b      	lsls	r3, r3, #17
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <VL53L0X_GetInterruptThresholds+0x68>)
 8004faa:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	6013      	str	r3, [r2, #0]
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8004fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	1ffe0000 	.word	0x1ffe0000

08004fc0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	//LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	210b      	movs	r1, #11
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f002 ff8f 	bl	8007efa <VL53L0X_WrByte>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	210b      	movs	r1, #11
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f002 ff88 	bl	8007efa <VL53L0X_WrByte>
 8004fea:	4603      	mov	r3, r0
 8004fec:	461a      	mov	r2, r3
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004ff4:	f107 030d 	add.w	r3, r7, #13
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	2113      	movs	r1, #19
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 fffa 	bl	8007ff6 <VL53L0X_RdByte>
 8005002:	4603      	mov	r3, r0
 8005004:	461a      	mov	r2, r3
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	4313      	orrs	r3, r2
 800500a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	3301      	adds	r3, #1
 8005010:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005012:	7b7b      	ldrb	r3, [r7, #13]
 8005014:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005018:	2b00      	cmp	r3, #0
 800501a:	d006      	beq.n	800502a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800501c:	7bbb      	ldrb	r3, [r7, #14]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d803      	bhi.n	800502a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0d3      	beq.n	8004fd2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800502a:	7bbb      	ldrb	r3, [r7, #14]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005030:	23f4      	movs	r3, #244	; 0xf4
 8005032:	73fb      	strb	r3, [r7, #15]

	//LOG_FUNCTION_END(Status);
	return Status;
 8005034:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	//LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800504e:	f107 030e 	add.w	r3, r7, #14
 8005052:	461a      	mov	r2, r3
 8005054:	2113      	movs	r1, #19
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f002 ffcd 	bl	8007ff6 <VL53L0X_RdByte>
 800505c:	4603      	mov	r3, r0
 800505e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	f003 0207 	and.w	r2, r3, #7
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800506a:	7bbb      	ldrb	r3, [r7, #14]
 800506c:	f003 0318 	and.w	r3, r3, #24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005074:	23fa      	movs	r3, #250	; 0xfa
 8005076:	73fb      	strb	r3, [r7, #15]

	//LOG_FUNCTION_END(Status);
	return Status;
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]
	//LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fa03 	bl	80054a4 <VL53L0X_perform_ref_spad_management>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	//LOG_FUNCTION_END(Status);

	return Status;
 80050a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80050bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80050c0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80050c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80050c8:	f107 0308 	add.w	r3, r7, #8
 80050cc:	461a      	mov	r2, r3
 80050ce:	2128      	movs	r1, #40	; 0x28
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f002 ffaf 	bl	8008034 <VL53L0X_RdWord>
 80050d6:	4603      	mov	r3, r0
 80050d8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80050da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d11e      	bne.n	8005120 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80050e2:	893b      	ldrh	r3, [r7, #8]
 80050e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80050ec:	893b      	ldrh	r3, [r7, #8]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	dd0b      	ble.n	8005110 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80050f8:	893a      	ldrh	r2, [r7, #8]
 80050fa:	897b      	ldrh	r3, [r7, #10]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	b29b      	uxth	r3, r3
 8005100:	b21b      	sxth	r3, r3
 8005102:	461a      	mov	r2, r3
					* 250;
 8005104:	23fa      	movs	r3, #250	; 0xfa
 8005106:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e007      	b.n	8005120 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005110:	893b      	ldrh	r3, [r7, #8]
 8005112:	b21b      	sxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	23fa      	movs	r3, #250	; 0xfa
 8005118:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005120:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800512c:	b480      	push	{r7}
 800512e:	b08b      	sub	sp, #44	; 0x2c
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800513a:	2308      	movs	r3, #8
 800513c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	f04f 32ff 	mov.w	r2, #4294967295
 8005148:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	fbb3 f2f2 	udiv	r2, r3, r2
 800515c:	69b9      	ldr	r1, [r7, #24]
 800515e:	fb01 f202 	mul.w	r2, r1, r2
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	e030      	b.n	80051ce <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800516c:	2300      	movs	r3, #0
 800516e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	4413      	add	r3, r2
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	429a      	cmp	r2, r3
 8005180:	d11e      	bne.n	80051c0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005182:	7ffa      	ldrb	r2, [r7, #31]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	fa42 f303 	asr.w	r3, r2, r3
 800518a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005190:	e016      	b.n	80051c0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00b      	beq.n	80051b4 <get_next_good_spad+0x88>
				success = 1;
 800519c:	2301      	movs	r3, #1
 800519e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	fb03 f202 	mul.w	r2, r3, r2
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	4413      	add	r3, r2
 80051ac:	461a      	mov	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	601a      	str	r2, [r3, #0]
				break;
 80051b2:	e009      	b.n	80051c8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	3301      	adds	r3, #1
 80051be:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3e4      	bcc.n	8005192 <get_next_good_spad+0x66>
				coarseIndex++) {
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	3301      	adds	r3, #1
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d202      	bcs.n	80051dc <get_next_good_spad+0xb0>
 80051d6:	7fbb      	ldrb	r3, [r7, #30]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0c7      	beq.n	800516c <get_next_good_spad+0x40>
		}
	}
}
 80051dc:	bf00      	nop
 80051de:	372c      	adds	r7, #44	; 0x2c
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80051f0:	2301      	movs	r3, #1
 80051f2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	099b      	lsrs	r3, r3, #6
 80051f8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80051fa:	4a07      	ldr	r2, [pc, #28]	; (8005218 <is_aperture+0x30>)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <is_aperture+0x22>
		isAperture = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	200002b8 	.word	0x200002b8

0800521c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005228:	2300      	movs	r3, #0
 800522a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800522c:	2308      	movs	r3, #8
 800522e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	fbb2 f3f3 	udiv	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005242:	69b9      	ldr	r1, [r7, #24]
 8005244:	fb01 f202 	mul.w	r2, r1, r2
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	429a      	cmp	r2, r3
 8005252:	d302      	bcc.n	800525a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005254:	23ce      	movs	r3, #206	; 0xce
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e010      	b.n	800527c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b25a      	sxtb	r2, r3
 8005264:	2101      	movs	r1, #1
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	b25b      	sxtb	r3, r3
 800526e:	4313      	orrs	r3, r2
 8005270:	b259      	sxtb	r1, r3
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	b2ca      	uxtb	r2, r1
 800527a:	701a      	strb	r2, [r3, #0]

	return status;
 800527c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3724      	adds	r7, #36	; 0x24
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005296:	2306      	movs	r3, #6
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	21b0      	movs	r1, #176	; 0xb0
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f002 fde0 	bl	8007e62 <VL53L0X_WriteMulti>
 80052a2:	4603      	mov	r3, r0
 80052a4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80052bc:	2306      	movs	r3, #6
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	21b0      	movs	r1, #176	; 0xb0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f002 fdf4 	bl	8007eb0 <VL53L0X_ReadMulti>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80052cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	460b      	mov	r3, r1
 80052e6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80052ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80052f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fa:	e02b      	b.n	8005354 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80052fc:	f107 031c 	add.w	r3, r7, #28
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7ff ff11 	bl	800512c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d103      	bne.n	800531a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005312:	23ce      	movs	r3, #206	; 0xce
 8005314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005318:	e020      	b.n	800535c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	461a      	mov	r2, r3
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	4413      	add	r3, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff60 	bl	80051e8 <is_aperture>
 8005328:	4603      	mov	r3, r0
 800532a:	461a      	mov	r2, r3
 800532c:	7afb      	ldrb	r3, [r7, #11]
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005332:	23ce      	movs	r3, #206	; 0xce
 8005334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005338:	e010      	b.n	800535c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800533e:	6a3a      	ldr	r2, [r7, #32]
 8005340:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005342:	6838      	ldr	r0, [r7, #0]
 8005344:	f7ff ff6a 	bl	800521c <enable_spad_bit>
		currentSpad++;
 8005348:	6a3b      	ldr	r3, [r7, #32]
 800534a:	3301      	adds	r3, #1
 800534c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	3301      	adds	r3, #1
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005358:	429a      	cmp	r2, r3
 800535a:	d3cf      	bcc.n	80052fc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800535c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535e:	6a3a      	ldr	r2, [r7, #32]
 8005360:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005362:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff8d 	bl	800528c <set_ref_spad_map>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005378:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800537c:	2b00      	cmp	r3, #0
 800537e:	d121      	bne.n	80053c4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005380:	f107 0314 	add.w	r3, r7, #20
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff ff93 	bl	80052b2 <get_ref_spad_map>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005396:	e011      	b.n	80053bc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	4413      	add	r3, r2
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	f107 0114 	add.w	r1, r7, #20
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	440b      	add	r3, r1
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d003      	beq.n	80053b6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80053ae:	23ce      	movs	r3, #206	; 0xce
 80053b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80053b4:	e006      	b.n	80053c4 <enable_ref_spads+0xec>
			}
			i++;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	3301      	adds	r3, #1
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80053bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3e9      	bcc.n	8005398 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80053c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3730      	adds	r7, #48	; 0x30
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08a      	sub	sp, #40	; 0x28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80053ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80053f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d107      	bne.n	8005408 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80053f8:	22c0      	movs	r2, #192	; 0xc0
 80053fa:	2101      	movs	r1, #1
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f002 fd7c 	bl	8007efa <VL53L0X_WrByte>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005408:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005410:	f107 0308 	add.w	r3, r7, #8
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fc4a 	bl	8004cb0 <VL53L0X_PerformSingleRangingMeasurement>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005422:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800542a:	2201      	movs	r2, #1
 800542c:	21ff      	movs	r1, #255	; 0xff
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f002 fd63 	bl	8007efa <VL53L0X_WrByte>
 8005434:	4603      	mov	r3, r0
 8005436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800543a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800543e:	2b00      	cmp	r3, #0
 8005440:	d107      	bne.n	8005452 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	21b6      	movs	r1, #182	; 0xb6
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f002 fdf4 	bl	8008034 <VL53L0X_RdWord>
 800544c:	4603      	mov	r3, r0
 800544e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005452:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800545a:	2200      	movs	r2, #0
 800545c:	21ff      	movs	r1, #255	; 0xff
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f002 fd4b 	bl	8007efa <VL53L0X_WrByte>
 8005464:	4603      	mov	r3, r0
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800546a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800546e:	2b00      	cmp	r3, #0
 8005470:	d112      	bne.n	8005498 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005476:	461a      	mov	r2, r3
 8005478:	2101      	movs	r1, #1
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f002 fd3d 	bl	8007efa <VL53L0X_WrByte>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005486:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005494:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8005498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800549c:	4618      	mov	r0, r3
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80054a4:	b590      	push	{r4, r7, lr}
 80054a6:	b09d      	sub	sp, #116	; 0x74
 80054a8:	af06      	add	r7, sp, #24
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80054b6:	23b4      	movs	r3, #180	; 0xb4
 80054b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80054bc:	2303      	movs	r3, #3
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80054c0:	232c      	movs	r3, #44	; 0x2c
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80054d0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80054d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80054de:	2306      	movs	r3, #6
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8005508:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800550a:	2300      	movs	r3, #0
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
 800550e:	e009      	b.n	8005524 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005514:	4413      	add	r3, r2
 8005516:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800551e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005520:	3301      	adds	r3, #1
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
 8005524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	429a      	cmp	r2, r3
 800552a:	d3f1      	bcc.n	8005510 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800552c:	2201      	movs	r2, #1
 800552e:	21ff      	movs	r1, #255	; 0xff
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f002 fce2 	bl	8007efa <VL53L0X_WrByte>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800553c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005544:	2200      	movs	r2, #0
 8005546:	214f      	movs	r1, #79	; 0x4f
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f002 fcd6 	bl	8007efa <VL53L0X_WrByte>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005554:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800555c:	222c      	movs	r2, #44	; 0x2c
 800555e:	214e      	movs	r1, #78	; 0x4e
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f002 fcca 	bl	8007efa <VL53L0X_WrByte>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800556c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005570:	2b00      	cmp	r3, #0
 8005572:	d107      	bne.n	8005584 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005574:	2200      	movs	r2, #0
 8005576:	21ff      	movs	r1, #255	; 0xff
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f002 fcbe 	bl	8007efa <VL53L0X_WrByte>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005584:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005588:	2b00      	cmp	r3, #0
 800558a:	d109      	bne.n	80055a0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800558c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005590:	461a      	mov	r2, r3
 8005592:	21b6      	movs	r1, #182	; 0xb6
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f002 fcb0 	bl	8007efa <VL53L0X_WrByte>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80055a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80055a8:	2200      	movs	r2, #0
 80055aa:	2180      	movs	r1, #128	; 0x80
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f002 fca4 	bl	8007efa <VL53L0X_WrByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80055b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80055c0:	f107 0210 	add.w	r2, r7, #16
 80055c4:	f107 0111 	add.w	r1, r7, #17
 80055c8:	2300      	movs	r3, #0
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fbbb 	bl	8005d46 <VL53L0X_perform_ref_calibration>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80055d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d121      	bne.n	8005622 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80055e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80055fa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80055fe:	f107 0218 	add.w	r2, r7, #24
 8005602:	9204      	str	r2, [sp, #16]
 8005604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005606:	9203      	str	r2, [sp, #12]
 8005608:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800560a:	9202      	str	r2, [sp, #8]
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	4623      	mov	r3, r4
 8005614:	4602      	mov	r2, r0
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff fe5e 	bl	80052d8 <enable_ref_spads>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005622:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005626:	2b00      	cmp	r3, #0
 8005628:	d174      	bne.n	8005714 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800562e:	f107 0312 	add.w	r3, r7, #18
 8005632:	4619      	mov	r1, r3
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff fecb 	bl	80053d0 <perform_ref_signal_measurement>
 800563a:	4603      	mov	r3, r0
 800563c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005640:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005644:	2b00      	cmp	r3, #0
 8005646:	d161      	bne.n	800570c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005648:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800564a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800564c:	429a      	cmp	r2, r3
 800564e:	d25d      	bcs.n	800570c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005650:	2300      	movs	r3, #0
 8005652:	64bb      	str	r3, [r7, #72]	; 0x48
 8005654:	e009      	b.n	800566a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800565a:	4413      	add	r3, r2
 800565c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005666:	3301      	adds	r3, #1
 8005668:	64bb      	str	r3, [r7, #72]	; 0x48
 800566a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	429a      	cmp	r2, r3
 8005670:	d3f1      	bcc.n	8005656 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005672:	e002      	b.n	800567a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005676:	3301      	adds	r3, #1
 8005678:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800567a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800567e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005680:	4413      	add	r3, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fdb0 	bl	80051e8 <is_aperture>
 8005688:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <VL53L0X_perform_ref_spad_management+0x1f2>
 800568e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	429a      	cmp	r2, r3
 8005694:	d3ee      	bcc.n	8005674 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005696:	2301      	movs	r3, #1
 8005698:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800569a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80056aa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80056ae:	f107 0218 	add.w	r2, r7, #24
 80056b2:	9204      	str	r2, [sp, #16]
 80056b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b6:	9203      	str	r2, [sp, #12]
 80056b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056ba:	9202      	str	r2, [sp, #8]
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	4623      	mov	r3, r4
 80056c4:	4602      	mov	r2, r0
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f7ff fe06 	bl	80052d8 <enable_ref_spads>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80056d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d11b      	bne.n	8005712 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80056de:	f107 0312 	add.w	r3, r7, #18
 80056e2:	4619      	mov	r1, r3
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff fe73 	bl	80053d0 <perform_ref_signal_measurement>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80056f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10c      	bne.n	8005712 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80056f8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80056fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d208      	bcs.n	8005712 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800570a:	e002      	b.n	8005712 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005710:	e000      	b.n	8005714 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005712:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005714:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005718:	2b00      	cmp	r3, #0
 800571a:	f040 80af 	bne.w	800587c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800571e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005720:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005722:	429a      	cmp	r2, r3
 8005724:	f240 80aa 	bls.w	800587c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800572e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005730:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005738:	f107 031c 	add.w	r3, r7, #28
 800573c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573e:	4618      	mov	r0, r3
 8005740:	f002 ffdc 	bl	80086fc <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005744:	8a7b      	ldrh	r3, [r7, #18]
 8005746:	461a      	mov	r2, r3
 8005748:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfb8      	it	lt
 8005750:	425b      	neglt	r3, r3
 8005752:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800575a:	e086      	b.n	800586a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005762:	f107 0314 	add.w	r3, r7, #20
 8005766:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800576a:	f7ff fcdf 	bl	800512c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d103      	bne.n	800577e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005776:	23ce      	movs	r3, #206	; 0xce
 8005778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800577c:	e07e      	b.n	800587c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800577e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4413      	add	r3, r2
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fd2e 	bl	80051e8 <is_aperture>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005792:	4293      	cmp	r3, r2
 8005794:	d003      	beq.n	800579e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800579c:	e06e      	b.n	800587c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	3301      	adds	r3, #1
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80057ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff fd32 	bl	800521c <enable_spad_bit>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80057be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10c      	bne.n	80057e0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80057c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c8:	3301      	adds	r3, #1
 80057ca:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff fd59 	bl	800528c <set_ref_spad_map>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80057e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d146      	bne.n	8005876 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80057e8:	f107 0312 	add.w	r3, r7, #18
 80057ec:	4619      	mov	r1, r3
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fdee 	bl	80053d0 <perform_ref_signal_measurement>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80057fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d13b      	bne.n	800587a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005802:	8a7b      	ldrh	r3, [r7, #18]
 8005804:	461a      	mov	r2, r3
 8005806:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	bfb8      	it	lt
 800580e:	425b      	neglt	r3, r3
 8005810:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005812:	8a7b      	ldrh	r3, [r7, #18]
 8005814:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005816:	429a      	cmp	r2, r3
 8005818:	d21c      	bcs.n	8005854 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581e:	429a      	cmp	r2, r3
 8005820:	d914      	bls.n	800584c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005822:	f107 031c 	add.w	r3, r7, #28
 8005826:	4619      	mov	r1, r3
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff fd2f 	bl	800528c <set_ref_spad_map>
 800582e:	4603      	mov	r3, r0
 8005830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800583a:	f107 011c 	add.w	r1, r7, #28
 800583e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005840:	4618      	mov	r0, r3
 8005842:	f002 ff5b 	bl	80086fc <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005848:	3b01      	subs	r3, #1
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800584c:	2301      	movs	r3, #1
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005852:	e00a      	b.n	800586a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800585e:	f107 031c 	add.w	r3, r7, #28
 8005862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005864:	4618      	mov	r0, r3
 8005866:	f002 ff49 	bl	80086fc <memcpy>
		while (!complete) {
 800586a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800586e:	2b00      	cmp	r3, #0
 8005870:	f43f af74 	beq.w	800575c <VL53L0X_perform_ref_spad_management+0x2b8>
 8005874:	e002      	b.n	800587c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800587a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800587c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005880:	2b00      	cmp	r3, #0
 8005882:	d115      	bne.n	80058b0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005888:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005890:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80058b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	375c      	adds	r7, #92	; 0x5c
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}

080058bc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b093      	sub	sp, #76	; 0x4c
 80058c0:	af06      	add	r7, sp, #24
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80058d4:	23b4      	movs	r3, #180	; 0xb4
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80058da:	2306      	movs	r3, #6
 80058dc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80058de:	232c      	movs	r3, #44	; 0x2c
 80058e0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80058e2:	2201      	movs	r2, #1
 80058e4:	21ff      	movs	r1, #255	; 0xff
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f002 fb07 	bl	8007efa <VL53L0X_WrByte>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80058f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80058fa:	2200      	movs	r2, #0
 80058fc:	214f      	movs	r1, #79	; 0x4f
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f002 fafb 	bl	8007efa <VL53L0X_WrByte>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800590a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800590e:	2b00      	cmp	r3, #0
 8005910:	d107      	bne.n	8005922 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005912:	222c      	movs	r2, #44	; 0x2c
 8005914:	214e      	movs	r1, #78	; 0x4e
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f002 faef 	bl	8007efa <VL53L0X_WrByte>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005922:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005926:	2b00      	cmp	r3, #0
 8005928:	d107      	bne.n	800593a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800592a:	2200      	movs	r2, #0
 800592c:	21ff      	movs	r1, #255	; 0xff
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f002 fae3 	bl	8007efa <VL53L0X_WrByte>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800593a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005946:	461a      	mov	r2, r3
 8005948:	21b6      	movs	r1, #182	; 0xb6
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f002 fad5 	bl	8007efa <VL53L0X_WrByte>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005956:	2300      	movs	r3, #0
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	e009      	b.n	8005970 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	4413      	add	r3, r2
 8005962:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	3301      	adds	r3, #1
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	429a      	cmp	r2, r3
 8005976:	d3f1      	bcc.n	800595c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d011      	beq.n	80059a2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800597e:	e002      	b.n	8005986 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	3301      	adds	r3, #1
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005986:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	4413      	add	r3, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff fc2a 	bl	80051e8 <is_aperture>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <VL53L0X_set_reference_spads+0xe6>
 800599a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3ee      	bcc.n	8005980 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80059ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b2:	79f9      	ldrb	r1, [r7, #7]
 80059b4:	f107 0214 	add.w	r2, r7, #20
 80059b8:	9204      	str	r2, [sp, #16]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059c0:	9202      	str	r2, [sp, #8]
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	4623      	mov	r3, r4
 80059ca:	4602      	mov	r2, r0
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fc83 	bl	80052d8 <enable_ref_spads>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80059d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10c      	bne.n	80059fa <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	79fa      	ldrb	r2, [r7, #7]
 80059f6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80059fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3734      	adds	r7, #52	; 0x34
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd90      	pop	{r4, r7, pc}

08005a06 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f002 fa65 	bl	8007efa <VL53L0X_WrByte>
 8005a30:	4603      	mov	r3, r0
 8005a32:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f9bf 	bl	8005dc0 <VL53L0X_measurement_poll_for_completion>
 8005a42:	4603      	mov	r3, r0
 8005a44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d105      	bne.n	8005a5a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005a4e:	2100      	movs	r1, #0
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff fab5 	bl	8004fc0 <VL53L0X_ClearInterruptMask>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2100      	movs	r1, #0
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f002 fa47 	bl	8007efa <VL53L0X_WrByte>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	4608      	mov	r0, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	70fb      	strb	r3, [r7, #3]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70bb      	strb	r3, [r7, #2]
 8005a92:	4613      	mov	r3, r2
 8005a94:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	21ff      	movs	r1, #255	; 0xff
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 fa29 	bl	8007efa <VL53L0X_WrByte>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 fa1f 	bl	8007efa <VL53L0X_WrByte>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	21ff      	movs	r1, #255	; 0xff
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f002 fa15 	bl	8007efa <VL53L0X_WrByte>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01e      	beq.n	8005b1e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005ae0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	21cb      	movs	r1, #203	; 0xcb
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f002 fa82 	bl	8007ff6 <VL53L0X_RdByte>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005afc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02a      	beq.n	8005b5a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005b04:	f107 030e 	add.w	r3, r7, #14
 8005b08:	461a      	mov	r2, r3
 8005b0a:	21ee      	movs	r1, #238	; 0xee
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f002 fa72 	bl	8007ff6 <VL53L0X_RdByte>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e01d      	b.n	8005b5a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005b1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005b26:	78bb      	ldrb	r3, [r7, #2]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	21cb      	movs	r1, #203	; 0xcb
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f002 f9e4 	bl	8007efa <VL53L0X_WrByte>
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005b44:	787b      	ldrb	r3, [r7, #1]
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	21ee      	movs	r1, #238	; 0xee
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f002 fa15 	bl	8007f7a <VL53L0X_UpdateByte>
 8005b50:	4603      	mov	r3, r0
 8005b52:	461a      	mov	r2, r3
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	21ff      	movs	r1, #255	; 0xff
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 f9cb 	bl	8007efa <VL53L0X_WrByte>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005b6e:	2201      	movs	r2, #1
 8005b70:	2100      	movs	r1, #0
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f002 f9c1 	bl	8007efa <VL53L0X_WrByte>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b82:	2200      	movs	r2, #0
 8005b84:	21ff      	movs	r1, #255	; 0xff
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f002 f9b7 	bl	8007efa <VL53L0X_WrByte>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	701a      	strb	r2, [r3, #0]

	return Status;
 8005ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b08a      	sub	sp, #40	; 0x28
 8005bb2:	af04      	add	r7, sp, #16
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	461a      	mov	r2, r3
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	71fb      	strb	r3, [r7, #7]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005bd8:	79bb      	ldrb	r3, [r7, #6]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005be4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005be6:	2201      	movs	r2, #1
 8005be8:	2101      	movs	r1, #1
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f002 f985 	bl	8007efa <VL53L0X_WrByte>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005bfc:	2140      	movs	r1, #64	; 0x40
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff01 	bl	8005a06 <VL53L0X_perform_single_ref_calibration>
 8005c04:	4603      	mov	r3, r0
 8005c06:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005c08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d115      	bne.n	8005c3c <VL53L0X_perform_vhv_calibration+0x8e>
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d112      	bne.n	8005c3c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005c16:	7d39      	ldrb	r1, [r7, #20]
 8005c18:	7d7a      	ldrb	r2, [r7, #21]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9303      	str	r3, [sp, #12]
 8005c1e:	2301      	movs	r3, #1
 8005c20:	9302      	str	r3, [sp, #8]
 8005c22:	f107 0313 	add.w	r3, r7, #19
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	2101      	movs	r1, #1
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff ff23 	bl	8005a7c <VL53L0X_ref_calibration_io>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]
 8005c3a:	e002      	b.n	8005c42 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d112      	bne.n	8005c70 <VL53L0X_perform_vhv_calibration+0xc2>
 8005c4a:	79bb      	ldrb	r3, [r7, #6]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00f      	beq.n	8005c70 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005c50:	7dbb      	ldrb	r3, [r7, #22]
 8005c52:	461a      	mov	r2, r3
 8005c54:	2101      	movs	r1, #1
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f002 f94f 	bl	8007efa <VL53L0X_WrByte>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	7dba      	ldrb	r2, [r7, #22]
 8005c6c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	; 0x28
 8005c80:	af04      	add	r7, sp, #16
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	4611      	mov	r1, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	71fb      	strb	r3, [r7, #7]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005ca2:	79bb      	ldrb	r3, [r7, #6]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005cae:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f002 f920 	bl	8007efa <VL53L0X_WrByte>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d105      	bne.n	8005cd2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fe9c 	bl	8005a06 <VL53L0X_perform_single_ref_calibration>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d115      	bne.n	8005d06 <VL53L0X_perform_phase_calibration+0x8a>
 8005cda:	79fb      	ldrb	r3, [r7, #7]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d112      	bne.n	8005d06 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005ce0:	7d39      	ldrb	r1, [r7, #20]
 8005ce2:	7d7a      	ldrb	r2, [r7, #21]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9302      	str	r3, [sp, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	f107 0313 	add.w	r3, r7, #19
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff febe 	bl	8005a7c <VL53L0X_ref_calibration_io>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]
 8005d04:	e002      	b.n	8005d0c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d112      	bne.n	8005d3a <VL53L0X_perform_phase_calibration+0xbe>
 8005d14:	79bb      	ldrb	r3, [r7, #6]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00f      	beq.n	8005d3a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d1a:	7dbb      	ldrb	r3, [r7, #22]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2101      	movs	r1, #1
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f002 f8ea 	bl	8007efa <VL53L0X_WrByte>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	7dba      	ldrb	r2, [r7, #22]
 8005d36:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3718      	adds	r7, #24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b086      	sub	sp, #24
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d54:	2300      	movs	r3, #0
 8005d56:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005d62:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	2300      	movs	r3, #0
 8005d68:	68b9      	ldr	r1, [r7, #8]
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff ff1f 	bl	8005bae <VL53L0X_perform_vhv_calibration>
 8005d70:	4603      	mov	r3, r0
 8005d72:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d107      	bne.n	8005d8c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff ff7a 	bl	8005c7c <VL53L0X_perform_phase_calibration>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10f      	bne.n	8005db4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d94:	7dbb      	ldrb	r3, [r7, #22]
 8005d96:	461a      	mov	r2, r3
 8005d98:	2101      	movs	r1, #1
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f002 f8ad 	bl	8007efa <VL53L0X_WrByte>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005da4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d103      	bne.n	8005db4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	7dba      	ldrb	r2, [r7, #22]
 8005db0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	//LOG_FUNCTION_START("");

	LoopNb = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005dd4:	f107 030f 	add.w	r3, r7, #15
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fe fe04 	bl	80049e8 <VL53L0X_GetMeasurementDataReady>
 8005de0:	4603      	mov	r3, r0
 8005de2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d110      	bne.n	8005e0e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d00f      	beq.n	8005e12 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	3301      	adds	r3, #1
 8005df6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005dfe:	d302      	bcc.n	8005e06 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005e00:	23f9      	movs	r3, #249	; 0xf9
 8005e02:	75fb      	strb	r3, [r7, #23]
			break;
 8005e04:	e006      	b.n	8005e14 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f002 f952 	bl	80080b0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005e0c:	e7e2      	b.n	8005dd4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005e0e:	bf00      	nop
 8005e10:	e000      	b.n	8005e14 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005e12:	bf00      	nop
	} while (1);

	//LOG_FUNCTION_END(Status);

	return Status;
 8005e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	3301      	adds	r3, #1
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b085      	sub	sp, #20
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e56:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005e58:	e002      	b.n	8005e60 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	089b      	lsrs	r3, r3, #2
 8005e5e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d8f8      	bhi.n	8005e5a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005e68:	e017      	b.n	8005e9a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4413      	add	r3, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d30b      	bcc.n	8005e8e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	4413      	add	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	e002      	b.n	8005e94 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e4      	bne.n	8005e6a <VL53L0X_isqrt+0x24>
	}

	return res;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	//LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2183      	movs	r1, #131	; 0x83
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f002 f81b 	bl	8007efa <VL53L0X_WrByte>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d11e      	bne.n	8005f14 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005eda:	f107 030f 	add.w	r3, r7, #15
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2183      	movs	r1, #131	; 0x83
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f002 f887 	bl	8007ff6 <VL53L0X_RdByte>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <VL53L0X_device_read_strobe+0x5a>
 8005ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	3301      	adds	r3, #1
 8005efe:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f06:	d3e8      	bcc.n	8005eda <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005f0e:	d301      	bcc.n	8005f14 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005f10:	23f9      	movs	r3, #249	; 0xf9
 8005f12:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005f14:	2201      	movs	r2, #1
 8005f16:	2183      	movs	r1, #131	; 0x83
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 ffee 	bl	8007efa <VL53L0X_WrByte>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	461a      	mov	r2, r3
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	75fb      	strb	r3, [r7, #23]

	//LOG_FUNCTION_END(Status);
	return Status;
 8005f28:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b098      	sub	sp, #96	; 0x60
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005f64:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005f68:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	//LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005f7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005f80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f84:	2b07      	cmp	r3, #7
 8005f86:	f000 8408 	beq.w	800679a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	2180      	movs	r1, #128	; 0x80
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 ffb3 	bl	8007efa <VL53L0X_WrByte>
 8005f94:	4603      	mov	r3, r0
 8005f96:	461a      	mov	r2, r3
 8005f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	21ff      	movs	r1, #255	; 0xff
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 ffa7 	bl	8007efa <VL53L0X_WrByte>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f001 ff9b 	bl	8007efa <VL53L0X_WrByte>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005fd2:	2206      	movs	r2, #6
 8005fd4:	21ff      	movs	r1, #255	; 0xff
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 ff8f 	bl	8007efa <VL53L0X_WrByte>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005fea:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005fee:	461a      	mov	r2, r3
 8005ff0:	2183      	movs	r1, #131	; 0x83
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 ffff 	bl	8007ff6 <VL53L0X_RdByte>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006000:	4313      	orrs	r3, r2
 8006002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006006:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800600a:	f043 0304 	orr.w	r3, r3, #4
 800600e:	b2db      	uxtb	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	2183      	movs	r1, #131	; 0x83
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f001 ff70 	bl	8007efa <VL53L0X_WrByte>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006022:	4313      	orrs	r3, r2
 8006024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006028:	2207      	movs	r2, #7
 800602a:	21ff      	movs	r1, #255	; 0xff
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 ff64 	bl	8007efa <VL53L0X_WrByte>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800603a:	4313      	orrs	r3, r2
 800603c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006040:	2201      	movs	r2, #1
 8006042:	2181      	movs	r1, #129	; 0x81
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 ff58 	bl	8007efa <VL53L0X_WrByte>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006052:	4313      	orrs	r3, r2
 8006054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f002 f829 	bl	80080b0 <VL53L0X_PollingDelay>
 800605e:	4603      	mov	r3, r0
 8006060:	461a      	mov	r2, r3
 8006062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006066:	4313      	orrs	r3, r2
 8006068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800606c:	2201      	movs	r2, #1
 800606e:	2180      	movs	r1, #128	; 0x80
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 ff42 	bl	8007efa <VL53L0X_WrByte>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800607e:	4313      	orrs	r3, r2
 8006080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 8098 	beq.w	80061c0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006094:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006098:	2b00      	cmp	r3, #0
 800609a:	f040 8091 	bne.w	80061c0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800609e:	226b      	movs	r2, #107	; 0x6b
 80060a0:	2194      	movs	r1, #148	; 0x94
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 ff29 	bl	8007efa <VL53L0X_WrByte>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fef9 	bl	8005eae <VL53L0X_device_read_strobe>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ce:	461a      	mov	r2, r3
 80060d0:	2190      	movs	r1, #144	; 0x90
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 ffcd 	bl	8008072 <VL53L0X_RdDWord>
 80060d8:	4603      	mov	r3, r0
 80060da:	461a      	mov	r2, r3
 80060dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	0bdb      	lsrs	r3, r3, #15
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006102:	2224      	movs	r2, #36	; 0x24
 8006104:	2194      	movs	r1, #148	; 0x94
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fef7 	bl	8007efa <VL53L0X_WrByte>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006114:	4313      	orrs	r3, r2
 8006116:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fec7 	bl	8005eae <VL53L0X_device_read_strobe>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006128:	4313      	orrs	r3, r2
 800612a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800612e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006132:	461a      	mov	r2, r3
 8006134:	2190      	movs	r1, #144	; 0x90
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 ff9b 	bl	8008072 <VL53L0X_RdDWord>
 800613c:	4603      	mov	r3, r0
 800613e:	461a      	mov	r2, r3
 8006140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006144:	4313      	orrs	r3, r2
 8006146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	0e1b      	lsrs	r3, r3, #24
 800614e:	b2db      	uxtb	r3, r3
 8006150:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	b2db      	uxtb	r3, r3
 8006158:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	0a1b      	lsrs	r3, r3, #8
 800615e:	b2db      	uxtb	r3, r3
 8006160:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	b2db      	uxtb	r3, r3
 8006166:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006168:	2225      	movs	r2, #37	; 0x25
 800616a:	2194      	movs	r1, #148	; 0x94
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 fec4 	bl	8007efa <VL53L0X_WrByte>
 8006172:	4603      	mov	r3, r0
 8006174:	461a      	mov	r2, r3
 8006176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800617a:	4313      	orrs	r3, r2
 800617c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fe94 	bl	8005eae <VL53L0X_device_read_strobe>
 8006186:	4603      	mov	r3, r0
 8006188:	461a      	mov	r2, r3
 800618a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800618e:	4313      	orrs	r3, r2
 8006190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006194:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006198:	461a      	mov	r2, r3
 800619a:	2190      	movs	r1, #144	; 0x90
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 ff68 	bl	8008072 <VL53L0X_RdDWord>
 80061a2:	4603      	mov	r3, r0
 80061a4:	461a      	mov	r2, r3
 80061a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	0e1b      	lsrs	r3, r3, #24
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	0c1b      	lsrs	r3, r3, #16
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	f003 0302 	and.w	r3, r3, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 8189 	beq.w	80064de <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80061cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061d0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f040 8182 	bne.w	80064de <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80061da:	2202      	movs	r2, #2
 80061dc:	2194      	movs	r1, #148	; 0x94
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 fe8b 	bl	8007efa <VL53L0X_WrByte>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff fe5b 	bl	8005eae <VL53L0X_device_read_strobe>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006200:	4313      	orrs	r3, r2
 8006202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006206:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800620a:	461a      	mov	r2, r3
 800620c:	2190      	movs	r1, #144	; 0x90
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f001 fef1 	bl	8007ff6 <VL53L0X_RdByte>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800621c:	4313      	orrs	r3, r2
 800621e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006222:	227b      	movs	r2, #123	; 0x7b
 8006224:	2194      	movs	r1, #148	; 0x94
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fe67 	bl	8007efa <VL53L0X_WrByte>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006234:	4313      	orrs	r3, r2
 8006236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff fe37 	bl	8005eae <VL53L0X_device_read_strobe>
 8006240:	4603      	mov	r3, r0
 8006242:	461a      	mov	r2, r3
 8006244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006248:	4313      	orrs	r3, r2
 800624a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800624e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006252:	461a      	mov	r2, r3
 8006254:	2190      	movs	r1, #144	; 0x90
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fecd 	bl	8007ff6 <VL53L0X_RdByte>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006264:	4313      	orrs	r3, r2
 8006266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800626a:	2277      	movs	r2, #119	; 0x77
 800626c:	2194      	movs	r1, #148	; 0x94
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fe43 	bl	8007efa <VL53L0X_WrByte>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800627c:	4313      	orrs	r3, r2
 800627e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff fe13 	bl	8005eae <VL53L0X_device_read_strobe>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006290:	4313      	orrs	r3, r2
 8006292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006296:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800629a:	461a      	mov	r2, r3
 800629c:	2190      	movs	r1, #144	; 0x90
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f001 fee7 	bl	8008072 <VL53L0X_RdDWord>
 80062a4:	4603      	mov	r3, r0
 80062a6:	461a      	mov	r2, r3
 80062a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	0e5b      	lsrs	r3, r3, #25
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	0c9b      	lsrs	r3, r3, #18
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	0adb      	lsrs	r3, r3, #11
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	091b      	lsrs	r3, r3, #4
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80062fc:	2278      	movs	r2, #120	; 0x78
 80062fe:	2194      	movs	r1, #148	; 0x94
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 fdfa 	bl	8007efa <VL53L0X_WrByte>
 8006306:	4603      	mov	r3, r0
 8006308:	461a      	mov	r2, r3
 800630a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800630e:	4313      	orrs	r3, r2
 8006310:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff fdca 	bl	8005eae <VL53L0X_device_read_strobe>
 800631a:	4603      	mov	r3, r0
 800631c:	461a      	mov	r2, r3
 800631e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006322:	4313      	orrs	r3, r2
 8006324:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800632c:	461a      	mov	r2, r3
 800632e:	2190      	movs	r1, #144	; 0x90
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f001 fe9e 	bl	8008072 <VL53L0X_RdDWord>
 8006336:	4603      	mov	r3, r0
 8006338:	461a      	mov	r2, r3
 800633a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800633e:	4313      	orrs	r3, r2
 8006340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	0f5b      	lsrs	r3, r3, #29
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006350:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006354:	4413      	add	r3, r2
 8006356:	b2db      	uxtb	r3, r3
 8006358:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	0d9b      	lsrs	r3, r3, #22
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006364:	b2db      	uxtb	r3, r3
 8006366:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	0bdb      	lsrs	r3, r3, #15
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006372:	b2db      	uxtb	r3, r3
 8006374:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	0a1b      	lsrs	r3, r3, #8
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006380:	b2db      	uxtb	r3, r3
 8006382:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638e:	b2db      	uxtb	r3, r3
 8006390:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	b2db      	uxtb	r3, r3
 8006396:	019b      	lsls	r3, r3, #6
 8006398:	b2db      	uxtb	r3, r3
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80063a4:	2279      	movs	r2, #121	; 0x79
 80063a6:	2194      	movs	r1, #148	; 0x94
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fda6 	bl	8007efa <VL53L0X_WrByte>
 80063ae:	4603      	mov	r3, r0
 80063b0:	461a      	mov	r2, r3
 80063b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff fd76 	bl	8005eae <VL53L0X_device_read_strobe>
 80063c2:	4603      	mov	r3, r0
 80063c4:	461a      	mov	r2, r3
 80063c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80063d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063d4:	461a      	mov	r2, r3
 80063d6:	2190      	movs	r1, #144	; 0x90
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fe4a 	bl	8008072 <VL53L0X_RdDWord>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80063ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ee:	0e9b      	lsrs	r3, r3, #26
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80063f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063fc:	4413      	add	r3, r2
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	0cdb      	lsrs	r3, r3, #19
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640c:	b2db      	uxtb	r3, r3
 800640e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	0b1b      	lsrs	r3, r3, #12
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800641a:	b2db      	uxtb	r3, r3
 800641c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006428:	b2db      	uxtb	r3, r3
 800642a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	b2db      	uxtb	r3, r3
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800643e:	227a      	movs	r2, #122	; 0x7a
 8006440:	2194      	movs	r1, #148	; 0x94
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 fd59 	bl	8007efa <VL53L0X_WrByte>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006450:	4313      	orrs	r3, r2
 8006452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7ff fd29 	bl	8005eae <VL53L0X_device_read_strobe>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006464:	4313      	orrs	r3, r2
 8006466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800646a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800646e:	461a      	mov	r2, r3
 8006470:	2190      	movs	r1, #144	; 0x90
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fdfd 	bl	8008072 <VL53L0X_RdDWord>
 8006478:	4603      	mov	r3, r0
 800647a:	461a      	mov	r2, r3
 800647c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006480:	4313      	orrs	r3, r2
 8006482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	0f9b      	lsrs	r3, r3, #30
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006496:	4413      	add	r3, r2
 8006498:	b2db      	uxtb	r3, r3
 800649a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	0ddb      	lsrs	r3, r3, #23
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	0c1b      	lsrs	r3, r3, #16
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	0a5b      	lsrs	r3, r3, #9
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	089b      	lsrs	r3, r3, #2
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80064d8:	2300      	movs	r3, #0
 80064da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80f1 	beq.w	80066cc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80064ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80064ee:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 80ea 	bne.w	80066cc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80064f8:	227b      	movs	r2, #123	; 0x7b
 80064fa:	2194      	movs	r1, #148	; 0x94
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fcfc 	bl	8007efa <VL53L0X_WrByte>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800650a:	4313      	orrs	r3, r2
 800650c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff fccc 	bl	8005eae <VL53L0X_device_read_strobe>
 8006516:	4603      	mov	r3, r0
 8006518:	461a      	mov	r2, r3
 800651a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800651e:	4313      	orrs	r3, r2
 8006520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006528:	461a      	mov	r2, r3
 800652a:	2190      	movs	r1, #144	; 0x90
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fda0 	bl	8008072 <VL53L0X_RdDWord>
 8006532:	4603      	mov	r3, r0
 8006534:	461a      	mov	r2, r3
 8006536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800653a:	4313      	orrs	r3, r2
 800653c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006540:	227c      	movs	r2, #124	; 0x7c
 8006542:	2194      	movs	r1, #148	; 0x94
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fcd8 	bl	8007efa <VL53L0X_WrByte>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006552:	4313      	orrs	r3, r2
 8006554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fca8 	bl	8005eae <VL53L0X_device_read_strobe>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006566:	4313      	orrs	r3, r2
 8006568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800656c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006570:	461a      	mov	r2, r3
 8006572:	2190      	movs	r1, #144	; 0x90
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fd7c 	bl	8008072 <VL53L0X_RdDWord>
 800657a:	4603      	mov	r3, r0
 800657c:	461a      	mov	r2, r3
 800657e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006582:	4313      	orrs	r3, r2
 8006584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006588:	2273      	movs	r2, #115	; 0x73
 800658a:	2194      	movs	r1, #148	; 0x94
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fcb4 	bl	8007efa <VL53L0X_WrByte>
 8006592:	4603      	mov	r3, r0
 8006594:	461a      	mov	r2, r3
 8006596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800659a:	4313      	orrs	r3, r2
 800659c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fc84 	bl	8005eae <VL53L0X_device_read_strobe>
 80065a6:	4603      	mov	r3, r0
 80065a8:	461a      	mov	r2, r3
 80065aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80065b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80065b8:	461a      	mov	r2, r3
 80065ba:	2190      	movs	r1, #144	; 0x90
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fd58 	bl	8008072 <VL53L0X_RdDWord>
 80065c2:	4603      	mov	r3, r0
 80065c4:	461a      	mov	r2, r3
 80065c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80065d8:	2274      	movs	r2, #116	; 0x74
 80065da:	2194      	movs	r1, #148	; 0x94
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 fc8c 	bl	8007efa <VL53L0X_WrByte>
 80065e2:	4603      	mov	r3, r0
 80065e4:	461a      	mov	r2, r3
 80065e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065ea:	4313      	orrs	r3, r2
 80065ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fc5c 	bl	8005eae <VL53L0X_device_read_strobe>
 80065f6:	4603      	mov	r3, r0
 80065f8:	461a      	mov	r2, r3
 80065fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065fe:	4313      	orrs	r3, r2
 8006600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006608:	461a      	mov	r2, r3
 800660a:	2190      	movs	r1, #144	; 0x90
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 fd30 	bl	8008072 <VL53L0X_RdDWord>
 8006612:	4603      	mov	r3, r0
 8006614:	461a      	mov	r2, r3
 8006616:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800661a:	4313      	orrs	r3, r2
 800661c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006626:	4313      	orrs	r3, r2
 8006628:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800662a:	2275      	movs	r2, #117	; 0x75
 800662c:	2194      	movs	r1, #148	; 0x94
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fc63 	bl	8007efa <VL53L0X_WrByte>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800663c:	4313      	orrs	r3, r2
 800663e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff fc33 	bl	8005eae <VL53L0X_device_read_strobe>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006650:	4313      	orrs	r3, r2
 8006652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800665a:	461a      	mov	r2, r3
 800665c:	2190      	movs	r1, #144	; 0x90
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f001 fd07 	bl	8008072 <VL53L0X_RdDWord>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800666c:	4313      	orrs	r3, r2
 800666e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006676:	b29b      	uxth	r3, r3
 8006678:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800667a:	2276      	movs	r2, #118	; 0x76
 800667c:	2194      	movs	r1, #148	; 0x94
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fc3b 	bl	8007efa <VL53L0X_WrByte>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800668c:	4313      	orrs	r3, r2
 800668e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fc0b 	bl	8005eae <VL53L0X_device_read_strobe>
 8006698:	4603      	mov	r3, r0
 800669a:	461a      	mov	r2, r3
 800669c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066aa:	461a      	mov	r2, r3
 80066ac:	2190      	movs	r1, #144	; 0x90
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f001 fcdf 	bl	8008072 <VL53L0X_RdDWord>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066bc:	4313      	orrs	r3, r2
 80066be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80066c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066c8:	4313      	orrs	r3, r2
 80066ca:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80066cc:	2200      	movs	r2, #0
 80066ce:	2181      	movs	r1, #129	; 0x81
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f001 fc12 	bl	8007efa <VL53L0X_WrByte>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066de:	4313      	orrs	r3, r2
 80066e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80066e4:	2206      	movs	r2, #6
 80066e6:	21ff      	movs	r1, #255	; 0xff
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 fc06 	bl	8007efa <VL53L0X_WrByte>
 80066ee:	4603      	mov	r3, r0
 80066f0:	461a      	mov	r2, r3
 80066f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80066fc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006700:	461a      	mov	r2, r3
 8006702:	2183      	movs	r1, #131	; 0x83
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 fc76 	bl	8007ff6 <VL53L0X_RdByte>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006712:	4313      	orrs	r3, r2
 8006714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006718:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800671c:	f023 0304 	bic.w	r3, r3, #4
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	2183      	movs	r1, #131	; 0x83
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fbe7 	bl	8007efa <VL53L0X_WrByte>
 800672c:	4603      	mov	r3, r0
 800672e:	461a      	mov	r2, r3
 8006730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006734:	4313      	orrs	r3, r2
 8006736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800673a:	2201      	movs	r2, #1
 800673c:	21ff      	movs	r1, #255	; 0xff
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 fbdb 	bl	8007efa <VL53L0X_WrByte>
 8006744:	4603      	mov	r3, r0
 8006746:	461a      	mov	r2, r3
 8006748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800674c:	4313      	orrs	r3, r2
 800674e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006752:	2201      	movs	r2, #1
 8006754:	2100      	movs	r1, #0
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fbcf 	bl	8007efa <VL53L0X_WrByte>
 800675c:	4603      	mov	r3, r0
 800675e:	461a      	mov	r2, r3
 8006760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006764:	4313      	orrs	r3, r2
 8006766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800676a:	2200      	movs	r2, #0
 800676c:	21ff      	movs	r1, #255	; 0xff
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fbc3 	bl	8007efa <VL53L0X_WrByte>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800677c:	4313      	orrs	r3, r2
 800677e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006782:	2200      	movs	r2, #0
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fbb7 	bl	8007efa <VL53L0X_WrByte>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006794:	4313      	orrs	r3, r2
 8006796:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800679a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 808f 	bne.w	80068c2 <VL53L0X_get_info_from_device+0x98e>
 80067a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067a8:	2b07      	cmp	r3, #7
 80067aa:	f000 808a 	beq.w	80068c2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d024      	beq.n	8006802 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80067b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80067bc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d11e      	bne.n	8006802 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80067ca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80067d4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80067d8:	2300      	movs	r3, #0
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067dc:	e00e      	b.n	80067fc <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80067de:	f107 0208 	add.w	r2, r7, #8
 80067e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e4:	4413      	add	r3, r2
 80067e6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80067f2:	460a      	mov	r2, r1
 80067f4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80067f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f8:	3301      	adds	r3, #1
 80067fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fe:	2b05      	cmp	r3, #5
 8006800:	dded      	ble.n	80067de <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d018      	beq.n	800683e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800680c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006810:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006814:	2b00      	cmp	r3, #0
 8006816:	d112      	bne.n	800683e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006818:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006822:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	33f3      	adds	r3, #243	; 0xf3
 8006830:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006832:	f107 0310 	add.w	r3, r7, #16
 8006836:	4619      	mov	r1, r3
 8006838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800683a:	f001 ff57 	bl	80086ec <strcpy>

		}

		if (((option & 4) == 4) &&
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	d030      	beq.n	80068aa <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006848:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800684c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006850:	2b00      	cmp	r3, #0
 8006852:	d12a      	bne.n	80068aa <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800685c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006866:	025b      	lsls	r3, r3, #9
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800686e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687a:	2b00      	cmp	r3, #0
 800687c:	d011      	beq.n	80068a2 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800687e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800688c:	fb02 f303 	mul.w	r3, r2, r3
 8006890:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006892:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006896:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800689a:	425b      	negs	r3, r3
 800689c:	b29b      	uxth	r3, r3
 800689e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80068a2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80068aa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80068b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 80068c2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3760      	adds	r7, #96	; 0x60
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
	//LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80068da:	f240 6277 	movw	r2, #1655	; 0x677
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80068e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80068ea:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	60bb      	str	r3, [r7, #8]

	//LOG_FUNCTION_END("");
	return macro_period_ps;
 80068fc:	68bb      	ldr	r3, [r7, #8]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800690a:	b480      	push	{r7}
 800690c:	b087      	sub	sp, #28
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006916:	2300      	movs	r3, #0
 8006918:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d017      	beq.n	8006954 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3b01      	subs	r3, #1
 8006928:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800692a:	e005      	b.n	8006938 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006932:	89fb      	ldrh	r3, [r7, #14]
 8006934:	3301      	adds	r3, #1
 8006936:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f4      	bne.n	800692c <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006942:	89fb      	ldrh	r3, [r7, #14]
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	b29b      	uxth	r3, r3
 800694c:	b2db      	uxtb	r3, r3
 800694e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006950:	4413      	add	r3, r2
 8006952:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006954:	8afb      	ldrh	r3, [r7, #22]

}
 8006956:	4618      	mov	r0, r3
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	4603      	mov	r3, r0
 800696a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006970:	88fb      	ldrh	r3, [r7, #6]
 8006972:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006974:	88fa      	ldrh	r2, [r7, #6]
 8006976:	0a12      	lsrs	r2, r2, #8
 8006978:	b292      	uxth	r2, r2
 800697a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006980:	68fb      	ldr	r3, [r7, #12]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	4619      	mov	r1, r3
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff ff91 	bl	80068ce <VL53L0X_calc_macro_period_ps>
 80069ac:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80069b4:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <VL53L0X_calc_timeout_mclks+0x50>)
 80069b6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ba:	099b      	lsrs	r3, r3, #6
 80069bc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069c4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	085b      	lsrs	r3, r3, #1
 80069cc:	441a      	add	r2, r3
	timeout_period_mclks =
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80069d6:	69fb      	ldr	r3, [r7, #28]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3720      	adds	r7, #32
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	10624dd3 	.word	0x10624dd3

080069e4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	807b      	strh	r3, [r7, #2]
 80069f0:	4613      	mov	r3, r2
 80069f2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80069f8:	787b      	ldrb	r3, [r7, #1]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff66 	bl	80068ce <VL53L0X_calc_macro_period_ps>
 8006a02:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <VL53L0X_calc_timeout_us+0x50>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	099b      	lsrs	r3, r3, #6
 8006a12:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006a14:	887b      	ldrh	r3, [r7, #2]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	fb02 f303 	mul.w	r3, r2, r3
 8006a1c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006a20:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <VL53L0X_calc_timeout_us+0x50>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006a2a:	697b      	ldr	r3, [r7, #20]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	10624dd3 	.word	0x10624dd3

08006a38 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08c      	sub	sp, #48	; 0x30
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	460b      	mov	r3, r1
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006a5e:	7afb      	ldrb	r3, [r7, #11]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <get_sequence_step_timeout+0x38>
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d002      	beq.n	8006a70 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d128      	bne.n	8006ac2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006a70:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006a74:	461a      	mov	r2, r3
 8006a76:	2100      	movs	r1, #0
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7fd fa93 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006a84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006a8c:	f107 0320 	add.w	r3, r7, #32
 8006a90:	461a      	mov	r2, r3
 8006a92:	2146      	movs	r1, #70	; 0x46
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f001 faae 	bl	8007ff6 <VL53L0X_RdByte>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006aa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7ff ff5b 	bl	8006962 <VL53L0X_decode_timeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006ab0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f7ff ff93 	bl	80069e4 <VL53L0X_calc_timeout_us>
 8006abe:	62b8      	str	r0, [r7, #40]	; 0x28
 8006ac0:	e092      	b.n	8006be8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006ac2:	7afb      	ldrb	r3, [r7, #11]
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d135      	bne.n	8006b34 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ac8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006acc:	461a      	mov	r2, r3
 8006ace:	2100      	movs	r1, #0
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f7fd fa67 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006adc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f040 8081 	bne.w	8006be8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ae6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006aea:	461a      	mov	r2, r3
 8006aec:	2100      	movs	r1, #0
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7fd fa58 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006afa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d109      	bne.n	8006b16 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006b02:	f107 031e 	add.w	r3, r7, #30
 8006b06:	461a      	mov	r2, r3
 8006b08:	2151      	movs	r1, #81	; 0x51
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f001 fa92 	bl	8008034 <VL53L0X_RdWord>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b16:	8bfb      	ldrh	r3, [r7, #30]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff ff22 	bl	8006962 <VL53L0X_decode_timeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006b22:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006b26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff ff5a 	bl	80069e4 <VL53L0X_calc_timeout_us>
 8006b30:	62b8      	str	r0, [r7, #40]	; 0x28
 8006b32:	e059      	b.n	8006be8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d156      	bne.n	8006be8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	4619      	mov	r1, r3
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f7fd fb39 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01d      	beq.n	8006b8c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b50:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b54:	461a      	mov	r2, r3
 8006b56:	2100      	movs	r1, #0
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7fd fa23 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006b64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10f      	bne.n	8006b8c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006b6c:	f107 031e 	add.w	r3, r7, #30
 8006b70:	461a      	mov	r2, r3
 8006b72:	2151      	movs	r1, #81	; 0x51
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f001 fa5d 	bl	8008034 <VL53L0X_RdWord>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006b80:	8bfb      	ldrh	r3, [r7, #30]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff feed 	bl	8006962 <VL53L0X_decode_timeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006b8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006b94:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006b98:	461a      	mov	r2, r3
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7fd fa01 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006ba8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10f      	bne.n	8006bd0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006bb0:	f107 031c 	add.w	r3, r7, #28
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	2171      	movs	r1, #113	; 0x71
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f001 fa3b 	bl	8008034 <VL53L0X_RdWord>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006bc4:	8bbb      	ldrh	r3, [r7, #28]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff fecb 	bl	8006962 <VL53L0X_decode_timeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006bd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006bd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006bd8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bde:	4619      	mov	r1, r3
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff feff 	bl	80069e4 <VL53L0X_calc_timeout_us>
 8006be6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	601a      	str	r2, [r3, #0]

	return Status;
 8006bee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3730      	adds	r7, #48	; 0x30
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08a      	sub	sp, #40	; 0x28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	460b      	mov	r3, r1
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <set_sequence_step_timeout+0x26>
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d002      	beq.n	8006c20 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006c1a:	7afb      	ldrb	r3, [r7, #11]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d138      	bne.n	8006c92 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006c20:	f107 031b 	add.w	r3, r7, #27
 8006c24:	461a      	mov	r2, r3
 8006c26:	2100      	movs	r1, #0
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7fd f9bb 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d11a      	bne.n	8006c72 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006c3c:	7efb      	ldrb	r3, [r7, #27]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7ff fea4 	bl	8006990 <VL53L0X_calc_timeout_mclks>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006c4c:	8bbb      	ldrh	r3, [r7, #28]
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	d903      	bls.n	8006c5c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006c54:	23ff      	movs	r3, #255	; 0xff
 8006c56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c5a:	e004      	b.n	8006c66 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006c5c:	8bbb      	ldrh	r3, [r7, #28]
 8006c5e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006c60:	3b01      	subs	r3, #1
 8006c62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006c72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f040 80ab 	bne.w	8006dd2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c80:	461a      	mov	r2, r3
 8006c82:	2146      	movs	r1, #70	; 0x46
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f001 f938 	bl	8007efa <VL53L0X_WrByte>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006c90:	e09f      	b.n	8006dd2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d135      	bne.n	8006d04 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006c98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d11b      	bne.n	8006cd8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ca0:	f107 031b 	add.w	r3, r7, #27
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7fd f97b 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006cb4:	7efb      	ldrb	r3, [r7, #27]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fe68 	bl	8006990 <VL53L0X_calc_timeout_mclks>
 8006cc0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fe1f 	bl	800690a <VL53L0X_encode_timeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006cd0:	8b3a      	ldrh	r2, [r7, #24]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d108      	bne.n	8006cf2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006ce0:	8b3b      	ldrh	r3, [r7, #24]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2151      	movs	r1, #81	; 0x51
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f001 f927 	bl	8007f3a <VL53L0X_WrWord>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006cf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d16b      	bne.n	8006dd2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006d02:	e066      	b.n	8006dd2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d160      	bne.n	8006dcc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8006d0a:	f107 0310 	add.w	r3, r7, #16
 8006d0e:	4619      	mov	r1, r3
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7fd fa51 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006d1a:	7cfb      	ldrb	r3, [r7, #19]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01d      	beq.n	8006d5c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d20:	f107 031b 	add.w	r3, r7, #27
 8006d24:	461a      	mov	r2, r3
 8006d26:	2100      	movs	r1, #0
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f7fd f93b 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006d34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10f      	bne.n	8006d5c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006d3c:	f107 0318 	add.w	r3, r7, #24
 8006d40:	461a      	mov	r2, r3
 8006d42:	2151      	movs	r1, #81	; 0x51
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f001 f975 	bl	8008034 <VL53L0X_RdWord>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006d50:	8b3b      	ldrh	r3, [r7, #24]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fe05 	bl	8006962 <VL53L0X_decode_timeout>
 8006d58:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006d5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006d64:	f107 031b 	add.w	r3, r7, #27
 8006d68:	461a      	mov	r2, r3
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7fd f919 	bl	8003fa4 <VL53L0X_GetVcselPulsePeriod>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006d78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d128      	bne.n	8006dd2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006d80:	7efb      	ldrb	r3, [r7, #27]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fe02 	bl	8006990 <VL53L0X_calc_timeout_mclks>
 8006d8c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d90:	6a3a      	ldr	r2, [r7, #32]
 8006d92:	4413      	add	r3, r2
 8006d94:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006d96:	6a38      	ldr	r0, [r7, #32]
 8006d98:	f7ff fdb7 	bl	800690a <VL53L0X_encode_timeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006da0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d108      	bne.n	8006dba <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006da8:	8bfb      	ldrh	r3, [r7, #30]
 8006daa:	461a      	mov	r2, r3
 8006dac:	2171      	movs	r1, #113	; 0x71
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f001 f8c3 	bl	8007f3a <VL53L0X_WrWord>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006dba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d107      	bne.n	8006dd2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006dca:	e002      	b.n	8006dd2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006dcc:	23fc      	movs	r3, #252	; 0xfc
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006dd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3728      	adds	r7, #40	; 0x28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b086      	sub	sp, #24
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	460b      	mov	r3, r1
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006df0:	7afb      	ldrb	r3, [r7, #11]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d00a      	beq.n	8006e10 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006dfa:	e013      	b.n	8006e24 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006dfc:	f107 0316 	add.w	r3, r7, #22
 8006e00:	461a      	mov	r2, r3
 8006e02:	2150      	movs	r1, #80	; 0x50
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f001 f8f6 	bl	8007ff6 <VL53L0X_RdByte>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006e0e:	e00b      	b.n	8006e28 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006e10:	f107 0316 	add.w	r3, r7, #22
 8006e14:	461a      	mov	r2, r3
 8006e16:	2170      	movs	r1, #112	; 0x70
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f001 f8ec 	bl	8007ff6 <VL53L0X_RdByte>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006e22:	e001      	b.n	8006e28 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006e24:	23fc      	movs	r3, #252	; 0xfc
 8006e26:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d107      	bne.n	8006e40 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006e30:	7dbb      	ldrb	r3, [r7, #22]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fff4 	bl	8005e20 <VL53L0X_decode_vcsel_period>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	701a      	strb	r2, [r3, #0]

	return Status;
 8006e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b092      	sub	sp, #72	; 0x48
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006e5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006e60:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006e62:	f240 7376 	movw	r3, #1910	; 0x776
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006e68:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006e6e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006e74:	f240 234e 	movw	r3, #590	; 0x24e
 8006e78:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006e7a:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006e80:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006e86:	f240 2326 	movw	r3, #550	; 0x226
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006e90:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006e94:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]

	//LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d205      	bcs.n	8006eae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ea2:	23fc      	movs	r3, #252	; 0xfc
 8006ea4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8006ea8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006eac:	e0aa      	b.n	8007004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006eae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006eba:	f107 0314 	add.w	r3, r7, #20
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fd f979 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006ecc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d15b      	bne.n	8006f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8006ed4:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8006eda:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8006ee0:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d052      	beq.n	8006f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8006ee6:	f107 0310 	add.w	r3, r7, #16
 8006eea:	461a      	mov	r2, r3
 8006eec:	2102      	movs	r1, #2
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fda2 	bl	8006a38 <get_sequence_step_timeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006efa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006f02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f06:	e07d      	b.n	8007004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006f08:	7d3b      	ldrb	r3, [r7, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006f0e:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f12:	4413      	add	r3, r2
 8006f14:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d204      	bcs.n	8006f28 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	643b      	str	r3, [r7, #64]	; 0x40
 8006f26:	e002      	b.n	8006f2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f28:	23fc      	movs	r3, #252	; 0xfc
 8006f2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006f2e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			//LOG_FUNCTION_END(Status);
			return Status;
 8006f36:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f3a:	e063      	b.n	8007004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006f3c:	7dbb      	ldrb	r3, [r7, #22]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d011      	beq.n	8006f66 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	4413      	add	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d204      	bcs.n	8006f5e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f5c:	e016      	b.n	8006f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f5e:	23fc      	movs	r3, #252	; 0xfc
 8006f60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006f64:	e012      	b.n	8006f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006f66:	7d7b      	ldrb	r3, [r7, #21]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00f      	beq.n	8006f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f70:	4413      	add	r3, r2
 8006f72:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d204      	bcs.n	8006f86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	643b      	str	r3, [r7, #64]	; 0x40
 8006f84:	e002      	b.n	8006f8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f86:	23fc      	movs	r3, #252	; 0xfc
 8006f88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006f8c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		//LOG_FUNCTION_END(Status);
		return Status;
 8006f94:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006f98:	e034      	b.n	8007004 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d019      	beq.n	8006fd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	2103      	movs	r1, #3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff fd45 	bl	8006a38 <get_sequence_step_timeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb8:	4413      	add	r3, r2
 8006fba:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d204      	bcs.n	8006fce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	643b      	str	r3, [r7, #64]	; 0x40
 8006fcc:	e002      	b.n	8006fd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fce:	23fc      	movs	r3, #252	; 0xfc
 8006fd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006fd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d111      	bne.n	8007000 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006fdc:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8006fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8006fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fec:	2104      	movs	r1, #4
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff fe03 	bl	8006bfa <set_sequence_step_timeout>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	//LOG_FUNCTION_END(Status);

	return Status;
 8007000:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8007004:	4618      	mov	r0, r3
 8007006:	3748      	adds	r7, #72	; 0x48
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b090      	sub	sp, #64	; 0x40
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007016:	2300      	movs	r3, #0
 8007018:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800701c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007020:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007022:	f240 7376 	movw	r3, #1910	; 0x776
 8007026:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007028:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800702c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800702e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007032:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007034:	f240 234e 	movw	r3, #590	; 0x24e
 8007038:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800703a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007040:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007046:	f240 2326 	movw	r3, #550	; 0x226
 800704a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

	//LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007050:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	441a      	add	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800705a:	f107 0318 	add.w	r3, r7, #24
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7fd f8a9 	bl	80041b8 <VL53L0X_GetSequenceStepEnables>
 8007066:	4603      	mov	r3, r0
 8007068:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800706c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		//LOG_FUNCTION_END(Status);
		return Status;
 8007074:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007078:	e075      	b.n	8007166 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800707a:	7e3b      	ldrb	r3, [r7, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d105      	bne.n	800708c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007080:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007086:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007088:	2b00      	cmp	r3, #0
 800708a:	d030      	beq.n	80070ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800708c:	f107 0310 	add.w	r3, r7, #16
 8007090:	461a      	mov	r2, r3
 8007092:	2102      	movs	r1, #2
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff fccf 	bl	8006a38 <get_sequence_step_timeout>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80070a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d122      	bne.n	80070ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80070a8:	7e3b      	ldrb	r3, [r7, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80070b2:	6939      	ldr	r1, [r7, #16]
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80070b8:	441a      	add	r2, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80070be:	7ebb      	ldrb	r3, [r7, #26]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80070c8:	6939      	ldr	r1, [r7, #16]
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	440b      	add	r3, r1
 80070ce:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80070d0:	441a      	add	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e00a      	b.n	80070ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80070d8:	7e7b      	ldrb	r3, [r7, #25]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80070e2:	6939      	ldr	r1, [r7, #16]
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80070e8:	441a      	add	r2, r3
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80070ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d114      	bne.n	8007120 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80070f6:	7efb      	ldrb	r3, [r7, #27]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d011      	beq.n	8007120 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	461a      	mov	r2, r3
 8007102:	2103      	movs	r1, #3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fc97 	bl	8006a38 <get_sequence_step_timeout>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007114:	68f9      	ldr	r1, [r7, #12]
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800711a:	441a      	add	r2, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007120:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007124:	2b00      	cmp	r3, #0
 8007126:	d114      	bne.n	8007152 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007128:	7f3b      	ldrb	r3, [r7, #28]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d011      	beq.n	8007152 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800712e:	f107 0314 	add.w	r3, r7, #20
 8007132:	461a      	mov	r2, r3
 8007134:	2104      	movs	r1, #4
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fc7e 	bl	8006a38 <get_sequence_step_timeout>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007146:	6979      	ldr	r1, [r7, #20]
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800714c:	441a      	add	r2, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007152:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007156:	2b00      	cmp	r3, #0
 8007158:	d103      	bne.n	8007162 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8007162:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007166:	4618      	mov	r0, r3
 8007168:	3740      	adds	r7, #64	; 0x40
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800717a:	2300      	movs	r3, #0
 800717c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	//LOG_FUNCTION_START("");

	Index = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007182:	e0c6      	b.n	8007312 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	4413      	add	r3, r2
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	3301      	adds	r3, #1
 8007192:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007194:	7cfb      	ldrb	r3, [r7, #19]
 8007196:	2bff      	cmp	r3, #255	; 0xff
 8007198:	f040 808d 	bne.w	80072b6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4413      	add	r3, r2
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	747b      	strb	r3, [r7, #17]
			Index++;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	3301      	adds	r3, #1
 80071aa:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80071ac:	7c7b      	ldrb	r3, [r7, #17]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d87e      	bhi.n	80072b0 <VL53L0X_load_tuning_settings+0x140>
 80071b2:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <VL53L0X_load_tuning_settings+0x48>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071c9 	.word	0x080071c9
 80071bc:	08007203 	.word	0x08007203
 80071c0:	0800723d 	.word	0x0800723d
 80071c4:	08007277 	.word	0x08007277
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	4413      	add	r3, r2
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	743b      	strb	r3, [r7, #16]
				Index++;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	3301      	adds	r3, #1
 80071d6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4413      	add	r3, r2
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	3301      	adds	r3, #1
 80071e6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80071e8:	7c3b      	ldrb	r3, [r7, #16]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4413      	add	r3, r2
 80071f6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	89ba      	ldrh	r2, [r7, #12]
 80071fc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8007200:	e087      	b.n	8007312 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	4413      	add	r3, r2
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	743b      	strb	r3, [r7, #16]
				Index++;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	3301      	adds	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	4413      	add	r3, r2
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3301      	adds	r3, #1
 8007220:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007222:	7c3b      	ldrb	r3, [r7, #16]
 8007224:	b29b      	uxth	r3, r3
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	b29a      	uxth	r2, r3
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	b29b      	uxth	r3, r3
 800722e:	4413      	add	r3, r2
 8007230:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	89ba      	ldrh	r2, [r7, #12]
 8007236:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800723a:	e06a      	b.n	8007312 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	4413      	add	r3, r2
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	743b      	strb	r3, [r7, #16]
				Index++;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	3301      	adds	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	4413      	add	r3, r2
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	3301      	adds	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800725c:	7c3b      	ldrb	r3, [r7, #16]
 800725e:	b29b      	uxth	r3, r3
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	b29a      	uxth	r2, r3
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	b29b      	uxth	r3, r3
 8007268:	4413      	add	r3, r2
 800726a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	89ba      	ldrh	r2, [r7, #12]
 8007270:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007274:	e04d      	b.n	8007312 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	4413      	add	r3, r2
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	3301      	adds	r3, #1
 8007284:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	4413      	add	r3, r2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	3301      	adds	r3, #1
 8007294:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007296:	7c3b      	ldrb	r3, [r7, #16]
 8007298:	b29b      	uxth	r3, r3
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	b29a      	uxth	r2, r3
 800729e:	7bfb      	ldrb	r3, [r7, #15]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	4413      	add	r3, r2
 80072a4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	89ba      	ldrh	r2, [r7, #12]
 80072aa:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80072ae:	e030      	b.n	8007312 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072b0:	23fc      	movs	r3, #252	; 0xfc
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e02d      	b.n	8007312 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80072b6:	7cfb      	ldrb	r3, [r7, #19]
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d828      	bhi.n	800730e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	4413      	add	r3, r2
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	74bb      	strb	r3, [r7, #18]
			Index++;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	3301      	adds	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80072cc:	2300      	movs	r3, #0
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e00f      	b.n	80072f2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	4413      	add	r3, r2
 80072d8:	7819      	ldrb	r1, [r3, #0]
 80072da:	f107 0208 	add.w	r2, r7, #8
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	4413      	add	r3, r2
 80072e2:	460a      	mov	r2, r1
 80072e4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	3301      	adds	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61bb      	str	r3, [r7, #24]
 80072f2:	7cfb      	ldrb	r3, [r7, #19]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	dbeb      	blt.n	80072d2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80072fa:	7cfb      	ldrb	r3, [r7, #19]
 80072fc:	f107 0208 	add.w	r2, r7, #8
 8007300:	7cb9      	ldrb	r1, [r7, #18]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fdad 	bl	8007e62 <VL53L0X_WriteMulti>
 8007308:	4603      	mov	r3, r0
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e001      	b.n	8007312 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800730e:	23fc      	movs	r3, #252	; 0xfc
 8007310:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	4413      	add	r3, r2
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <VL53L0X_load_tuning_settings+0x1b8>
 800731e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f43f af2e 	beq.w	8007184 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8007328:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007340:	2300      	movs	r3, #0
 8007342:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800734a:	f107 0313 	add.w	r3, r7, #19
 800734e:	4619      	mov	r1, r3
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7fc ffbd 	bl	80042d0 <VL53L0X_GetXTalkCompensationEnable>
 8007356:	4603      	mov	r3, r0
 8007358:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800735a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d111      	bne.n	8007386 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007362:	7cfb      	ldrb	r3, [r7, #19]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	8a9b      	ldrh	r3, [r3, #20]
 8007372:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	3380      	adds	r3, #128	; 0x80
 8007380:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007386:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3720      	adds	r7, #32
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	//LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80073aa:	f107 0310 	add.w	r3, r7, #16
 80073ae:	461a      	mov	r2, r3
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff ffbe 	bl	8007334 <VL53L0X_get_total_xtalk_rate>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80073bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d105      	bne.n	80073d0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	441a      	add	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	601a      	str	r2, [r3, #0]

	return Status;
 80073d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b09a      	sub	sp, #104	; 0x68
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80073ea:	2312      	movs	r3, #18
 80073ec:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80073ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073f2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80073f4:	2342      	movs	r3, #66	; 0x42
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80073f8:	2306      	movs	r3, #6
 80073fa:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80073fc:	2307      	movs	r3, #7
 80073fe:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	//LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007414:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	3380      	adds	r3, #128	; 0x80
 8007424:	0a1b      	lsrs	r3, r3, #8
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8007428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800742a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800742c:	fb02 f303 	mul.w	r3, r2, r3
 8007430:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01a      	beq.n	8007472 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	029b      	lsls	r3, r3, #10
 8007440:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007448:	4413      	add	r3, r2
 800744a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800744c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007456:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007458:	4613      	mov	r3, r2
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4413      	add	r3, r2
 800745e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007462:	fb03 f303 	mul.w	r3, r3, r3
 8007466:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007476:	fb02 f303 	mul.w	r3, r2, r3
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007482:	0c1b      	lsrs	r3, r3, #16
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	fb03 f303 	mul.w	r3, r3, r3
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800748e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007490:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800749a:	085a      	lsrs	r2, r3, #1
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	441a      	add	r2, r3
 80074a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ac:	fb02 f303 	mul.w	r3, r2, r3
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b8:	d302      	bcc.n	80074c0 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80074ba:	4b54      	ldr	r3, [pc, #336]	; (800760c <VL53L0X_calc_dmax+0x230>)
 80074bc:	663b      	str	r3, [r7, #96]	; 0x60
 80074be:	e015      	b.n	80074ec <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80074c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c2:	085a      	lsrs	r2, r3, #1
 80074c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c6:	441a      	add	r2, r3
 80074c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ce:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80074d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
 80074d8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80074da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80074e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074e6:	fb03 f303 	mul.w	r3, r3, r3
 80074ea:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80074ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ee:	039b      	lsls	r3, r3, #14
 80074f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80074f4:	4a46      	ldr	r2, [pc, #280]	; (8007610 <VL53L0X_calc_dmax+0x234>)
 80074f6:	fba2 2303 	umull	r2, r3, r2, r3
 80074fa:	099b      	lsrs	r3, r3, #6
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	fb03 f303 	mul.w	r3, r3, r3
 8007504:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8007506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007508:	fb03 f303 	mul.w	r3, r3, r3
 800750c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	3308      	adds	r3, #8
 8007512:	091b      	lsrs	r3, r3, #4
 8007514:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8007516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800751e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007520:	4613      	mov	r3, r2
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007530:	0b9b      	lsrs	r3, r3, #14
 8007532:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8007534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007538:	4413      	add	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800753c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4413      	add	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800754a:	fbb2 f3f3 	udiv	r3, r2, r3
 800754e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	039b      	lsls	r3, r3, #14
 8007554:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	085b      	lsrs	r3, r3, #1
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4413      	add	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8007560:	69ba      	ldr	r2, [r7, #24]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800757a:	4a25      	ldr	r2, [pc, #148]	; (8007610 <VL53L0X_calc_dmax+0x234>)
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	099b      	lsrs	r3, r3, #6
 8007582:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007590:	4a1f      	ldr	r2, [pc, #124]	; (8007610 <VL53L0X_calc_dmax+0x234>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	099b      	lsrs	r3, r3, #6
 8007598:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800759a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800759c:	3380      	adds	r3, #128	; 0x80
 800759e:	0a1b      	lsrs	r3, r3, #8
 80075a0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d008      	beq.n	80075ba <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	085a      	lsrs	r2, r3, #1
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ae:	441a      	add	r2, r3
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075b8:	e001      	b.n	80075be <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80075be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80075c0:	f7fe fc41 	bl	8005e46 <VL53L0X_isqrt>
 80075c4:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d008      	beq.n	80075de <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	085a      	lsrs	r2, r3, #1
 80075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d2:	441a      	add	r2, r3
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075dc:	e001      	b.n	80075e2 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80075e2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80075e4:	f7fe fc2f 	bl	8005e46 <VL53L0X_isqrt>
 80075e8:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80075ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d902      	bls.n	80075fe <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80075f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80075fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075fc:	601a      	str	r2, [r3, #0]

	//LOG_FUNCTION_END(Status);

	return Status;
 80075fe:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007602:	4618      	mov	r0, r3
 8007604:	3768      	adds	r7, #104	; 0x68
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	fff00000 	.word	0xfff00000
 8007610:	10624dd3 	.word	0x10624dd3

08007614 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b0b4      	sub	sp, #208	; 0xd0
 8007618:	af04      	add	r7, sp, #16
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007622:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800762a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800762e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007632:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007636:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800763a:	f241 235c 	movw	r3, #4700	; 0x125c
 800763e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007642:	4b9e      	ldr	r3, [pc, #632]	; (80078bc <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007648:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800764c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800764e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007656:	fbb2 f3f3 	udiv	r3, r2, r3
 800765a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800765c:	4b98      	ldr	r3, [pc, #608]	; (80078c0 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800765e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007664:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007666:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800766a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800766c:	f240 6377 	movw	r3, #1655	; 0x677
 8007670:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	//LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007686:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800768a:	0c1b      	lsrs	r3, r3, #16
 800768c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007694:	f107 0310 	add.w	r3, r7, #16
 8007698:	461a      	mov	r2, r3
 800769a:	68b9      	ldr	r1, [r7, #8]
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff fe78 	bl	8007392 <VL53L0X_get_total_signal_rate>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80076a8:	f107 0314 	add.w	r3, r7, #20
 80076ac:	461a      	mov	r2, r3
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fe3f 	bl	8007334 <VL53L0X_get_total_xtalk_rate>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80076c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80076ce:	0c1b      	lsrs	r3, r3, #16
 80076d0:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076d8:	fb02 f303 	mul.w	r3, r2, r3
 80076dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80076e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80076e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d902      	bls.n	80076f0 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80076ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80076f0:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d168      	bne.n	80077ca <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80076fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007708:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800770c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007710:	461a      	mov	r2, r3
 8007712:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f7ff f93a 	bl	8006990 <VL53L0X_calc_timeout_mclks>
 800771c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800772e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007732:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007736:	461a      	mov	r2, r3
 8007738:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff f927 	bl	8006990 <VL53L0X_calc_timeout_mclks>
 8007742:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007744:	2303      	movs	r3, #3
 8007746:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800774a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800774e:	2b08      	cmp	r3, #8
 8007750:	d102      	bne.n	8007758 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007752:	2302      	movs	r3, #2
 8007754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800775a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800775e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007762:	fb02 f303 	mul.w	r3, r2, r3
 8007766:	02db      	lsls	r3, r3, #11
 8007768:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800776c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007770:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007774:	4a53      	ldr	r2, [pc, #332]	; (80078c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007776:	fba2 2303 	umull	r2, r3, r2, r3
 800777a:	099b      	lsrs	r3, r3, #6
 800777c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007784:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800778e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007792:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007796:	4a4b      	ldr	r2, [pc, #300]	; (80078c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	099b      	lsrs	r3, r3, #6
 800779e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	3380      	adds	r3, #128	; 0x80
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077b0:	fb02 f303 	mul.w	r3, r2, r3
 80077b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80077b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077bc:	3380      	adds	r3, #128	; 0x80
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	021b      	lsls	r3, r3, #8
 80077c8:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80077ca:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <VL53L0X_calc_sigma_estimate+0x1c4>
		//LOG_FUNCTION_END(Status);
		return Status;
 80077d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80077d6:	e15e      	b.n	8007a96 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 80077d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10c      	bne.n	80077f8 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077e4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077ec:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	e14c      	b.n	8007a92 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80077f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007800:	2301      	movs	r3, #1
 8007802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800780a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800780c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780e:	041a      	lsls	r2, r3, #16
 8007810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007812:	fbb2 f3f3 	udiv	r3, r2, r3
 8007816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800781a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800781e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007820:	429a      	cmp	r2, r3
 8007822:	d902      	bls.n	800782a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800782a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800782e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800783a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800783e:	4613      	mov	r3, r2
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fafd 	bl	8005e46 <VL53L0X_isqrt>
 800784c:	4603      	mov	r3, r0
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	891b      	ldrh	r3, [r3, #8]
 8007856:	461a      	mov	r2, r3
 8007858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800785a:	fb02 f303 	mul.w	r3, r2, r3
 800785e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007862:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007864:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007868:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800786a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800786c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007870:	4a14      	ldr	r2, [pc, #80]	; (80078c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	099b      	lsrs	r3, r3, #6
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800787a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007882:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007884:	fba2 2303 	umull	r2, r3, r2, r3
 8007888:	099b      	lsrs	r3, r3, #6
 800788a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	fbb2 f3f3 	udiv	r3, r2, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfb8      	it	lt
 800789e:	425b      	neglt	r3, r3
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80078a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	7e1b      	ldrb	r3, [r3, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00b      	beq.n	80078c8 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 80078b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078b8:	e033      	b.n	8007922 <VL53L0X_calc_sigma_estimate+0x30e>
 80078ba:	bf00      	nop
 80078bc:	028f87ae 	.word	0x028f87ae
 80078c0:	0006999a 	.word	0x0006999a
 80078c4:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80078c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80078d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d8:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80078dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
 80078e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80078e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078ee:	4413      	add	r3, r2
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80078f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80078fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800790c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007910:	fb03 f303 	mul.w	r3, r3, r3
 8007914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800791c:	0b9b      	lsrs	r3, r3, #14
 800791e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007928:	fb02 f303 	mul.w	r3, r2, r3
 800792c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	fb03 f303 	mul.w	r3, r3, r3
 800793e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8007940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007944:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800794c:	0c1b      	lsrs	r3, r3, #16
 800794e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007952:	fb03 f303 	mul.w	r3, r3, r3
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	4413      	add	r3, r2
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007962:	f7fe fa70 	bl	8005e46 <VL53L0X_isqrt>
 8007966:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	3332      	adds	r3, #50	; 0x32
 8007972:	4a4b      	ldr	r2, [pc, #300]	; (8007aa0 <VL53L0X_calc_sigma_estimate+0x48c>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	095a      	lsrs	r2, r3, #5
 800797a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007988:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800798c:	fb02 f303 	mul.w	r3, r2, r3
 8007990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007998:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800799c:	3308      	adds	r3, #8
 800799e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80079a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079a6:	4a3f      	ldr	r2, [pc, #252]	; (8007aa4 <VL53L0X_calc_sigma_estimate+0x490>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	0b5b      	lsrs	r3, r3, #13
 80079ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80079b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d902      	bls.n	80079c2 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80079bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80079c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80079d0:	4a35      	ldr	r2, [pc, #212]	; (8007aa8 <VL53L0X_calc_sigma_estimate+0x494>)
 80079d2:	fba2 2303 	umull	r2, r3, r2, r3
 80079d6:	099b      	lsrs	r3, r3, #6
 80079d8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80079de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079e2:	441a      	add	r2, r3
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fa2b 	bl	8005e46 <VL53L0X_isqrt>
 80079f0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80079fe:	4a2a      	ldr	r2, [pc, #168]	; (8007aa8 <VL53L0X_calc_sigma_estimate+0x494>)
 8007a00:	fba2 2303 	umull	r2, r3, r2, r3
 8007a04:	099b      	lsrs	r3, r3, #6
 8007a06:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a0c:	fb03 f303 	mul.w	r3, r3, r3
 8007a10:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	fb03 f303 	mul.w	r3, r3, r3
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1e:	4413      	add	r3, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe fa10 	bl	8005e46 <VL53L0X_isqrt>
 8007a26:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a2e:	fb02 f303 	mul.w	r3, r2, r3
 8007a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <VL53L0X_calc_sigma_estimate+0x43c>
 8007a3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <VL53L0X_calc_sigma_estimate+0x43c>
 8007a44:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d903      	bls.n	8007a58 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007a5e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007a6a:	6939      	ldr	r1, [r7, #16]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	9303      	str	r3, [sp, #12]
 8007a70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007a74:	9302      	str	r3, [sp, #8]
 8007a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fca8 	bl	80073dc <VL53L0X_calc_dmax>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8007a92:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	37c0      	adds	r7, #192	; 0xc0
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	51eb851f 	.word	0x51eb851f
 8007aa4:	d1b71759 	.word	0xd1b71759
 8007aa8:	10624dd3 	.word	0x10624dd3

08007aac <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b090      	sub	sp, #64	; 0x40
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	460b      	mov	r3, r1
 8007aba:	72fb      	strb	r3, [r7, #11]
 8007abc:	4613      	mov	r3, r2
 8007abe:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007afe:	7afb      	ldrb	r3, [r7, #11]
 8007b00:	10db      	asrs	r3, r3, #3
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007b0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d017      	beq.n	8007b44 <VL53L0X_get_pal_range_status+0x98>
 8007b14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	d013      	beq.n	8007b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007b1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b20:	2b07      	cmp	r3, #7
 8007b22:	d00f      	beq.n	8007b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007b24:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b28:	2b0c      	cmp	r3, #12
 8007b2a:	d00b      	beq.n	8007b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007b2c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b30:	2b0d      	cmp	r3, #13
 8007b32:	d007      	beq.n	8007b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007b34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b38:	2b0e      	cmp	r3, #14
 8007b3a:	d003      	beq.n	8007b44 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007b3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007b40:	2b0f      	cmp	r3, #15
 8007b42:	d103      	bne.n	8007b4c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007b44:	2301      	movs	r3, #1
 8007b46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007b4a:	e002      	b.n	8007b52 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007b52:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007b5a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7fc fc88 	bl	8004478 <VL53L0X_GetLimitCheckEnable>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d02e      	beq.n	8007bd4 <VL53L0X_get_pal_range_status+0x128>
 8007b76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d12a      	bne.n	8007bd4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007b7e:	f107 0310 	add.w	r3, r7, #16
 8007b82:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007b86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7ff fd43 	bl	8007614 <VL53L0X_calc_sigma_estimate>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007b94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007ba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d113      	bne.n	8007bd4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007bac:	f107 0320 	add.w	r3, r7, #32
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7fc fce5 	bl	8004584 <VL53L0X_GetLimitCheckValue>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d006      	beq.n	8007bd4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8007bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d902      	bls.n	8007bd4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007bd4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d109      	bne.n	8007bf0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007bdc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007be0:	461a      	mov	r2, r3
 8007be2:	2102      	movs	r1, #2
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7fc fc47 	bl	8004478 <VL53L0X_GetLimitCheckEnable>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007bf0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d044      	beq.n	8007c82 <VL53L0X_get_pal_range_status+0x1d6>
 8007bf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d140      	bne.n	8007c82 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007c00:	f107 031c 	add.w	r3, r7, #28
 8007c04:	461a      	mov	r2, r3
 8007c06:	2102      	movs	r1, #2
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7fc fcbb 	bl	8004584 <VL53L0X_GetLimitCheckValue>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007c14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d107      	bne.n	8007c2c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	21ff      	movs	r1, #255	; 0xff
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f96a 	bl	8007efa <VL53L0X_WrByte>
 8007c26:	4603      	mov	r3, r0
 8007c28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007c2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8007c34:	f107 0316 	add.w	r3, r7, #22
 8007c38:	461a      	mov	r2, r3
 8007c3a:	21b6      	movs	r1, #182	; 0xb6
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f9f9 	bl	8008034 <VL53L0X_RdWord>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007c48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d107      	bne.n	8007c60 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007c50:	2200      	movs	r2, #0
 8007c52:	21ff      	movs	r1, #255	; 0xff
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f950 	bl	8007efa <VL53L0X_WrByte>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007c60:	8afb      	ldrh	r3, [r7, #22]
 8007c62:	025b      	lsls	r3, r3, #9
 8007c64:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d006      	beq.n	8007c82 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007c74:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d902      	bls.n	8007c82 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007c82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2103      	movs	r1, #3
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7fc fbf0 	bl	8004478 <VL53L0X_GetLimitCheckEnable>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d023      	beq.n	8007cee <VL53L0X_get_pal_range_status+0x242>
 8007ca6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d11f      	bne.n	8007cee <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007cae:	893b      	ldrh	r3, [r7, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb8:	e005      	b.n	8007cc6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	021a      	lsls	r2, r3, #8
 8007cbe:	893b      	ldrh	r3, [r7, #8]
 8007cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007cc6:	f107 0318 	add.w	r3, r7, #24
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2103      	movs	r1, #3
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7fc fc58 	bl	8004584 <VL53L0X_GetLimitCheckValue>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d006      	beq.n	8007cee <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007ce0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d202      	bcs.n	8007cee <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d14a      	bne.n	8007d8c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8007cf6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d103      	bne.n	8007d06 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d00:	22ff      	movs	r2, #255	; 0xff
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	e042      	b.n	8007d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007d06:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d007      	beq.n	8007d1e <VL53L0X_get_pal_range_status+0x272>
 8007d0e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d003      	beq.n	8007d1e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8007d16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d103      	bne.n	8007d26 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8007d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d20:	2205      	movs	r2, #5
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	e032      	b.n	8007d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007d26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d2a:	2b06      	cmp	r3, #6
 8007d2c:	d003      	beq.n	8007d36 <VL53L0X_get_pal_range_status+0x28a>
 8007d2e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d32:	2b09      	cmp	r3, #9
 8007d34:	d103      	bne.n	8007d3e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d38:	2204      	movs	r2, #4
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	e026      	b.n	8007d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007d3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d42:	2b08      	cmp	r3, #8
 8007d44:	d007      	beq.n	8007d56 <VL53L0X_get_pal_range_status+0x2aa>
 8007d46:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d4a:	2b0a      	cmp	r3, #10
 8007d4c:	d003      	beq.n	8007d56 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8007d4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d103      	bne.n	8007d5e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d58:	2203      	movs	r2, #3
 8007d5a:	701a      	strb	r2, [r3, #0]
 8007d5c:	e016      	b.n	8007d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007d5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d003      	beq.n	8007d6e <VL53L0X_get_pal_range_status+0x2c2>
 8007d66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d103      	bne.n	8007d76 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d70:	2202      	movs	r2, #2
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e00a      	b.n	8007d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007d76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d103      	bne.n	8007d86 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d80:	2201      	movs	r2, #1
 8007d82:	701a      	strb	r2, [r3, #0]
 8007d84:	e002      	b.n	8007d8c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d88:	2200      	movs	r2, #0
 8007d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007d94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d96:	2200      	movs	r2, #0
 8007d98:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007d9a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8007d9e:	461a      	mov	r2, r3
 8007da0:	2101      	movs	r1, #1
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7fc fb68 	bl	8004478 <VL53L0X_GetLimitCheckEnable>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007dae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d14f      	bne.n	8007e56 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <VL53L0X_get_pal_range_status+0x31a>
 8007dbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d103      	bne.n	8007dce <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dcc:	e002      	b.n	8007dd4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007dda:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8007dde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d003      	beq.n	8007dee <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007de6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d103      	bne.n	8007df6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007df4:	e002      	b.n	8007dfc <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007e06:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <VL53L0X_get_pal_range_status+0x36a>
 8007e0e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d103      	bne.n	8007e1e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e1c:	e002      	b.n	8007e24 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007e2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <VL53L0X_get_pal_range_status+0x392>
 8007e36:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d103      	bne.n	8007e46 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007e44:	e002      	b.n	8007e4c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007e52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	//LOG_FUNCTION_END(Status);
	return Status;
 8007e56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3740      	adds	r7, #64	; 0x40
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e72:	2300      	movs	r3, #0
 8007e74:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b3f      	cmp	r3, #63	; 0x3f
 8007e7e:	d901      	bls.n	8007e84 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e80:	23fc      	movs	r3, #252	; 0xfc
 8007e82:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007e8a:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	7af9      	ldrb	r1, [r7, #11]
 8007e90:	7df8      	ldrb	r0, [r7, #23]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	f000 fa16 	bl	80082c4 <VL53L0X_write_multi>
 8007e98:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <VL53L0X_WriteMulti+0x42>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ea0:	23ec      	movs	r3, #236	; 0xec
 8007ea2:	77fb      	strb	r3, [r7, #31]

    return Status;
 8007ea4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	603b      	str	r3, [r7, #0]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8007ec8:	d901      	bls.n	8007ece <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007eca:	23fc      	movs	r3, #252	; 0xfc
 8007ecc:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007ed4:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	7af9      	ldrb	r1, [r7, #11]
 8007eda:	7db8      	ldrb	r0, [r7, #22]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	f000 fa25 	bl	800832c <VL53L0X_read_multi>
 8007ee2:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <VL53L0X_ReadMulti+0x3e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007eea:	23ec      	movs	r3, #236	; 0xec
 8007eec:	75fb      	strb	r3, [r7, #23]

    return Status;
 8007eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	70fb      	strb	r3, [r7, #3]
 8007f06:	4613      	mov	r3, r2
 8007f08:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007f14:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 8007f16:	78ba      	ldrb	r2, [r7, #2]
 8007f18:	78f9      	ldrb	r1, [r7, #3]
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 fa41 	bl	80083a4 <VL53L0X_write_byte>
 8007f22:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <VL53L0X_WrByte+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f2a:	23ec      	movs	r3, #236	; 0xec
 8007f2c:	73fb      	strb	r3, [r7, #15]

    return Status;
 8007f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70fb      	strb	r3, [r7, #3]
 8007f46:	4613      	mov	r3, r2
 8007f48:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007f54:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 8007f56:	883a      	ldrh	r2, [r7, #0]
 8007f58:	78f9      	ldrb	r1, [r7, #3]
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fa3a 	bl	80083d6 <VL53L0X_write_word>
 8007f62:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f6a:	23ec      	movs	r3, #236	; 0xec
 8007f6c:	73fb      	strb	r3, [r7, #15]

    return Status;
 8007f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	4608      	mov	r0, r1
 8007f84:	4611      	mov	r1, r2
 8007f86:	461a      	mov	r2, r3
 8007f88:	4603      	mov	r3, r0
 8007f8a:	70fb      	strb	r3, [r7, #3]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70bb      	strb	r3, [r7, #2]
 8007f90:	4613      	mov	r3, r2
 8007f92:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f94:	2300      	movs	r3, #0
 8007f96:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007f9e:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 8007fa0:	f107 020f 	add.w	r2, r7, #15
 8007fa4:	78f9      	ldrb	r1, [r7, #3]
 8007fa6:	7dbb      	ldrb	r3, [r7, #22]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fa34 	bl	8008416 <VL53L0X_read_byte>
 8007fae:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007fb6:	23ec      	movs	r3, #236	; 0xec
 8007fb8:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 8007fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d113      	bne.n	8007fea <VL53L0X_UpdateByte+0x70>
        data = (data & AndData) | OrData;
 8007fc2:	7bfa      	ldrb	r2, [r7, #15]
 8007fc4:	78bb      	ldrb	r3, [r7, #2]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	787b      	ldrb	r3, [r7, #1]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 8007fd2:	7bfa      	ldrb	r2, [r7, #15]
 8007fd4:	78f9      	ldrb	r1, [r7, #3]
 8007fd6:	7dbb      	ldrb	r3, [r7, #22]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f9e3 	bl	80083a4 <VL53L0X_write_byte>
 8007fde:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <VL53L0X_UpdateByte+0x70>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007fe6:	23ec      	movs	r3, #236	; 0xec
 8007fe8:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 8007fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	460b      	mov	r3, r1
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008004:	2300      	movs	r3, #0
 8008006:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800800e:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 8008010:	7af9      	ldrb	r1, [r7, #11]
 8008012:	7dbb      	ldrb	r3, [r7, #22]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f9fd 	bl	8008416 <VL53L0X_read_byte>
 800801c:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <VL53L0X_RdByte+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008024:	23ec      	movs	r3, #236	; 0xec
 8008026:	75fb      	strb	r3, [r7, #23]

    return Status;
 8008028:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	460b      	mov	r3, r1
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800804c:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 800804e:	7af9      	ldrb	r1, [r7, #11]
 8008050:	7dbb      	ldrb	r3, [r7, #22]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	4618      	mov	r0, r3
 8008056:	f000 f9f6 	bl	8008446 <VL53L0X_read_word>
 800805a:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <VL53L0X_RdWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008062:	23ec      	movs	r3, #236	; 0xec
 8008064:	75fb      	strb	r3, [r7, #23]

    return Status;
 8008066:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 8008072:	b580      	push	{r7, lr}
 8008074:	b086      	sub	sp, #24
 8008076:	af00      	add	r7, sp, #0
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	460b      	mov	r3, r1
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008080:	2300      	movs	r3, #0
 8008082:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800808a:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 800808c:	7af9      	ldrb	r1, [r7, #11]
 800808e:	7dbb      	ldrb	r3, [r7, #22]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 f9f8 	bl	8008488 <VL53L0X_read_dword>
 8008098:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d001      	beq.n	80080a4 <VL53L0X_RdDWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80080a0:	23ec      	movs	r3, #236	; 0xec
 80080a2:	75fb      	strb	r3, [r7, #23]

    return Status;
 80080a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
    }
	*/

    volatile uint32_t i;
    //LOG_FUNCTION_START("");
    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]
 80080c0:	e003      	b.n	80080ca <VL53L0X_PollingDelay+0x1a>
        //Do nothing
        //__asm("nop");
    	//adam
    	__asm("Nop");
 80080c2:	bf00      	nop
    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2bf9      	cmp	r3, #249	; 0xf9
 80080ce:	d9f8      	bls.n	80080c2 <VL53L0X_PollingDelay+0x12>
    }

    //LOG_FUNCTION_END(status);
    return status;
 80080d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <isMeasurementReady>:
    return FALSE;
  }
  return deviceReady!=0;
}

static bool_t isMeasurementReady(VL53L0X_Dev_t *MyDevicePtr){
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint8_t deviceReady;
  uint32_t err_code;

  err_code = VL53L0X_GetMeasurementDataReady(MyDevicePtr, &deviceReady);
 80080e8:	f107 030b 	add.w	r3, r7, #11
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fc fc7a 	bl	80049e8 <VL53L0X_GetMeasurementDataReady>
 80080f4:	4603      	mov	r3, r0
 80080f6:	60fb      	str	r3, [r7, #12]
  if(VL53L0X_ERROR_NONE != err_code) {
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <isMeasurementReady+0x22>
    //CLS1_printf("ERROR: VL53L0X_GetMeasurementDataReady: %d\r\n", err_code);
    return FALSE;
 80080fe:	2300      	movs	r3, #0
 8008100:	e005      	b.n	800810e <isMeasurementReady+0x2e>
  }
  return deviceReady!=0;
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	2b00      	cmp	r3, #0
 8008106:	bf14      	ite	ne
 8008108:	2301      	movne	r3, #1
 800810a:	2300      	moveq	r3, #0
 800810c:	b2db      	uxtb	r3, r3
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <VL53L0X_MeasureSingle>:
    *mm = rangingData.RangeMilliMeter;
  }
  return ERR_OK;
}

uint8_t VL53L0X_MeasureSingle(uint16_t *mm, VL53L0X_Dev_t *MyDevicePtr) {
 8008116:	b580      	push	{r7, lr}
 8008118:	b08a      	sub	sp, #40	; 0x28
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  VL53L0X_RangingMeasurementData_t rangingData;
  uint32_t err_code;

  err_code = VL53L0X_StartMeasurement(MyDevicePtr);
 8008120:	6838      	ldr	r0, [r7, #0]
 8008122:	f7fc fb9f 	bl	8004864 <VL53L0X_StartMeasurement>
 8008126:	4603      	mov	r3, r0
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
  if (err_code!=VL53L0X_ERROR_NONE) {
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <VL53L0X_MeasureSingle+0x1e>
    //CLS1_printf("ERROR: VL53L0X_StartMeasurement() failed\r\n");
    return ERR_FAILED;
 8008130:	2300      	movs	r3, #0
 8008132:	e024      	b.n	800817e <VL53L0X_MeasureSingle+0x68>
  }
  do{
    /* blocking wait! */
  } while(!isMeasurementReady(MyDevicePtr));
 8008134:	6838      	ldr	r0, [r7, #0]
 8008136:	f7ff ffd3 	bl	80080e0 <isMeasurementReady>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f9      	beq.n	8008134 <VL53L0X_MeasureSingle+0x1e>

  err_code = VL53L0X_GetRangingMeasurementData(MyDevicePtr, &rangingData);
 8008140:	f107 0308 	add.w	r3, r7, #8
 8008144:	4619      	mov	r1, r3
 8008146:	6838      	ldr	r0, [r7, #0]
 8008148:	f7fc fc8e 	bl	8004a68 <VL53L0X_GetRangingMeasurementData>
 800814c:	4603      	mov	r3, r0
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
  if (err_code!=VL53L0X_ERROR_NONE) {
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <VL53L0X_MeasureSingle+0x44>
    //CLS1_printf("ERROR: VL53L0X_GetRangingMeasurementData() failed\r\n");
    return ERR_FAILED;
 8008156:	2300      	movs	r3, #0
 8008158:	e011      	b.n	800817e <VL53L0X_MeasureSingle+0x68>
  }
  err_code = VL53L0X_ClearInterruptMask(MyDevicePtr, 0);
 800815a:	2100      	movs	r1, #0
 800815c:	6838      	ldr	r0, [r7, #0]
 800815e:	f7fc ff2f 	bl	8004fc0 <VL53L0X_ClearInterruptMask>
 8008162:	4603      	mov	r3, r0
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
  if (err_code!=VL53L0X_ERROR_NONE) {
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <VL53L0X_MeasureSingle+0x5a>
    //CLS1_printf("ERROR: VL53L0X_ClearInterruptMask() failed\r\n");
    return ERR_FAILED;
 800816c:	2300      	movs	r3, #0
 800816e:	e006      	b.n	800817e <VL53L0X_MeasureSingle+0x68>
  }
  if (mm!=NULL) {
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <VL53L0X_MeasureSingle+0x66>
    *mm = rangingData.RangeMilliMeter;
 8008176:	8a3a      	ldrh	r2, [r7, #16]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3728      	adds	r7, #40	; 0x28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <VL53L0X_CustomAddressInit>:
  }
  return ERR_OK;
}

//adam 190911
uint8_t VL53L0X_CustomAddressInit(VL53L0X_Dev_t *MyDevicePtr) {
 8008186:	b580      	push	{r7, lr}
 8008188:	b086      	sub	sp, #24
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  uint8_t isApertureSpads;

  /* Initialize Comms */
  //MyDevice = *MyDevicePtr;

  err_code = VL53L0X_comms_initialise(I2C, (*MyDevicePtr).comms_speed_khz);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8008194:	4619      	mov	r1, r3
 8008196:	2001      	movs	r0, #1
 8008198:	f000 f882 	bl	80082a0 <VL53L0X_comms_initialise>
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]
  if(err_code!=VL53L0X_ERROR_NONE) {
 80081a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <VL53L0X_CustomAddressInit+0x26>
    //CLS1_printf("ERROR: VL53L0X_comms_initialise(): %d\r\n", err_code);
    return ERR_FAILED;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e075      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }

  err_code = VL53L0X_DataInit(MyDevicePtr);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7fb faff 	bl	80037b0 <VL53L0X_DataInit>
 80081b2:	4603      	mov	r3, r0
 80081b4:	75fb      	strb	r3, [r7, #23]
  if(err_code!=VL53L0X_ERROR_NONE) {
 80081b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <VL53L0X_CustomAddressInit+0x3c>
    //CLS1_printf("ERROR: DataInit(): %d\r\n", err_code);
    return ERR_FAILED;
 80081be:	2300      	movs	r3, #0
 80081c0:	e06a      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }

  err_code = VL53L0X_StaticInit(MyDevicePtr);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7fb fc58 	bl	8003a78 <VL53L0X_StaticInit>
 80081c8:	4603      	mov	r3, r0
 80081ca:	75fb      	strb	r3, [r7, #23]
  if(err_code != VL53L0X_ERROR_NONE) {
 80081cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <VL53L0X_CustomAddressInit+0x52>
    //CLS1_printf("ERROR: StaticInit: %d\r\n", err_code);
    return ERR_FAILED;
 80081d4:	2300      	movs	r3, #0
 80081d6:	e05f      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }

  VL53L0X_PerformRefSpadManagement(MyDevicePtr, &refSpadCount, &isApertureSpads);
 80081d8:	f107 020f 	add.w	r2, r7, #15
 80081dc:	f107 0310 	add.w	r3, r7, #16
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7fc ff4e 	bl	8005084 <VL53L0X_PerformRefSpadManagement>
  if(err_code!=VL53L0X_ERROR_NONE) {
 80081e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <VL53L0X_CustomAddressInit+0x6e>
    //CLS1_printf("ERROR: SpadCal: %d\r\n", err_code);
    return ERR_FAILED;
 80081f0:	2300      	movs	r3, #0
 80081f2:	e051      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }

  err_code = VL53L0X_PerformRefCalibration(MyDevicePtr, &vhvCalibrationValue, &phaseCalibrationValue);
 80081f4:	f107 0215 	add.w	r2, r7, #21
 80081f8:	f107 0316 	add.w	r3, r7, #22
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fc fab4 	bl	800476c <VL53L0X_PerformRefCalibration>
 8008204:	4603      	mov	r3, r0
 8008206:	75fb      	strb	r3, [r7, #23]
  if(err_code!=VL53L0X_ERROR_NONE) {
 8008208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <VL53L0X_CustomAddressInit+0x8e>
    //CLS1_printf("ERROR: VL53L0X_PerformRefCalibration(): %d\r\n", err_code);
    return ERR_FAILED;
 8008210:	2300      	movs	r3, #0
 8008212:	e041      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>

  //VL53L0X_DEVICEMODE_SINGLE_RANGING
  //VL53L0X_DEVICEMODE_CONTINUOUS_RANGING
  //VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING
  //err_code = VL53L0X_SetDeviceMode(&MyDevice, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
  err_code = VL53L0X_SetDeviceMode(MyDevicePtr, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008214:	2100      	movs	r1, #0
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7fb fe40 	bl	8003e9c <VL53L0X_SetDeviceMode>
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]
  if(err_code != VL53L0X_ERROR_NONE) {
 8008220:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <VL53L0X_CustomAddressInit+0xa6>
    //CLS1_printf("ERROR: VL53L0X_SetDeviceMode(): %d\r\n", err_code);
    return ERR_FAILED;
 8008228:	2300      	movs	r3, #0
 800822a:	e035      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>

  //for continuous ranging
  //VL53L0X_SetInterMeasurementPeriodMilliSeconds(&MyDevice, 1000);

  /* Enable/Disable Sigma and Signal check */
  err_code = VL53L0X_SetLimitCheckEnable(MyDevicePtr, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1 );
 800822c:	2201      	movs	r2, #1
 800822e:	2100      	movs	r1, #0
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7fc f895 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 8008236:	4603      	mov	r3, r0
 8008238:	75fb      	strb	r3, [r7, #23]
  if(err_code != VL53L0X_ERROR_NONE) {
 800823a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <VL53L0X_CustomAddressInit+0xc0>
    //CLS1_printf("ERROR: VL53L0X_SetLimitCheckEnable(): %d\r\n", err_code);
    return ERR_FAILED;
 8008242:	2300      	movs	r3, #0
 8008244:	e028      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }

  err_code = VL53L0X_SetLimitCheckEnable(MyDevicePtr, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1 );
 8008246:	2201      	movs	r2, #1
 8008248:	2101      	movs	r1, #1
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7fc f888 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 8008250:	4603      	mov	r3, r0
 8008252:	75fb      	strb	r3, [r7, #23]
  if(err_code != VL53L0X_ERROR_NONE) {
 8008254:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <VL53L0X_CustomAddressInit+0xda>
    //CLS1_printf("ERROR: VL53L0X_SetLimitCheckEnable(): %d\r\n", err_code);
    return ERR_FAILED;
 800825c:	2300      	movs	r3, #0
 800825e:	e01b      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }

  err_code = VL53L0X_SetLimitCheckEnable(MyDevicePtr, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1 );
 8008260:	2201      	movs	r2, #1
 8008262:	2103      	movs	r1, #3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7fc f87b 	bl	8004360 <VL53L0X_SetLimitCheckEnable>
 800826a:	4603      	mov	r3, r0
 800826c:	75fb      	strb	r3, [r7, #23]
  if(err_code != VL53L0X_ERROR_NONE) {
 800826e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <VL53L0X_CustomAddressInit+0xf4>
    //CLS1_printf("ERROR: VL53L0X_SetLimitCheckEnable(): %d\r\n", err_code);
    return ERR_FAILED;
 8008276:	2300      	movs	r3, #0
 8008278:	e00e      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }

  err_code = VL53L0X_SetLimitCheckValue(MyDevicePtr, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)( 1.5 * 0.023 * 65536 ) );
 800827a:	f640 02d4 	movw	r2, #2260	; 0x8d4
 800827e:	2103      	movs	r1, #3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7fc f91d 	bl	80044c0 <VL53L0X_SetLimitCheckValue>
 8008286:	4603      	mov	r3, r0
 8008288:	75fb      	strb	r3, [r7, #23]
  if(err_code != VL53L0X_ERROR_NONE) {
 800828a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <VL53L0X_CustomAddressInit+0x110>
    //CLS1_printf("ERROR: VL53L0X_SetLimitCheckValue(): %d\r\n", err_code);
    return ERR_FAILED;
 8008292:	2300      	movs	r3, #0
 8008294:	e000      	b.n	8008298 <VL53L0X_CustomAddressInit+0x112>
  }
  return ERR_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <VL53L0X_comms_initialise>:

	return min_version_comms_dll;
}

int32_t VL53L0X_comms_initialise(uint8_t comms_type, uint16_t comms_speed_khz)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	460a      	mov	r2, r1
 80082aa:	71fb      	strb	r3, [r7, #7]
 80082ac:	4613      	mov	r3, r2
 80082ae:	80bb      	strh	r3, [r7, #4]
	int32_t status   = STATUS_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

	return status;
 80082b4:	68fb      	ldr	r3, [r7, #12]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
	...

080082c4 <VL53L0X_write_multi>:
	return status;
}

//int32_t VL53L0X_write_multi(VL53L0X_DEV dev, uint8_t index, uint8_t *pdata,int32_t count)
int32_t VL53L0X_write_multi(uint8_t dev, uint8_t index, uint8_t *pdata,int32_t count)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af02      	add	r7, sp, #8
 80082ca:	60ba      	str	r2, [r7, #8]
 80082cc:	607b      	str	r3, [r7, #4]
 80082ce:	4603      	mov	r3, r0
 80082d0:	73fb      	strb	r3, [r7, #15]
 80082d2:	460b      	mov	r3, r1
 80082d4:	73bb      	strb	r3, [r7, #14]
	int32_t status = STATUS_OK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

		pvalue_as_str += 2;
	}
	trace_i2c("Write reg : 0x%04X, Val : 0x%s\n", index, value_as_str);
#endif
	if ((count + 1) > VL53L0X_MAX_I2C_XFER_SIZE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b3f      	cmp	r3, #63	; 0x3f
 80082de:	dd01      	ble.n	80082e4 <VL53L0X_write_multi+0x20>
		return STATUS_FAIL;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e01a      	b.n	800831a <VL53L0X_write_multi+0x56>
	buffer =  VL53L0X_GetLocalBuffer(dev, (count+1));
 80082e4:	4b0f      	ldr	r3, [pc, #60]	; (8008324 <VL53L0X_write_multi+0x60>)
 80082e6:	613b      	str	r3, [r7, #16]
	buffer[0] = index;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	7bba      	ldrb	r2, [r7, #14]
 80082ec:	701a      	strb	r2, [r3, #0]
	memcpy(&buffer[1], pdata, count);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	3301      	adds	r3, #1
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fa00 	bl	80086fc <memcpy>
	//status = VL53L0X_I2CWrite(dev, buffer, (count+1));
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, buffer, (count+1), 50);
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	b299      	uxth	r1, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	b29b      	uxth	r3, r3
 8008304:	3301      	adds	r3, #1
 8008306:	b29b      	uxth	r3, r3
 8008308:	2232      	movs	r2, #50	; 0x32
 800830a:	9200      	str	r2, [sp, #0]
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4806      	ldr	r0, [pc, #24]	; (8008328 <VL53L0X_write_multi+0x64>)
 8008310:	f7f9 fa4c 	bl	80017ac <HAL_I2C_Master_Transmit>
 8008314:	4603      	mov	r3, r0
 8008316:	617b      	str	r3, [r7, #20]
	return status;
 8008318:	697b      	ldr	r3, [r7, #20]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	200003e8 	.word	0x200003e8
 8008328:	20000334 	.word	0x20000334

0800832c <VL53L0X_read_multi>:

//int32_t VL53L0X_read_multi(VL53L0X_DEV dev, uint8_t index, uint8_t *pdata,int32_t count)
int32_t VL53L0X_read_multi(uint8_t dev, uint8_t index, uint8_t *pdata,int32_t count)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af02      	add	r7, sp, #8
 8008332:	60ba      	str	r2, [r7, #8]
 8008334:	607b      	str	r3, [r7, #4]
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
 800833a:	460b      	mov	r3, r1
 800833c:	73bb      	strb	r3, [r7, #14]
	int32_t status = STATUS_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]
	int32_t      i = 0;
	char   value_as_str[VL53L0X_MAX_STRING_LENGTH_PLT];
	char *pvalue_as_str;
#endif

	if ((count + 1) > VL53L0X_MAX_I2C_XFER_SIZE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b3f      	cmp	r3, #63	; 0x3f
 8008346:	dd01      	ble.n	800834c <VL53L0X_read_multi+0x20>
		return STATUS_FAIL;
 8008348:	2301      	movs	r3, #1
 800834a:	e022      	b.n	8008392 <VL53L0X_read_multi+0x66>

	buffer =  VL53L0X_GetLocalBuffer(dev, 1);
 800834c:	4b13      	ldr	r3, [pc, #76]	; (800839c <VL53L0X_read_multi+0x70>)
 800834e:	613b      	str	r3, [r7, #16]
	buffer[0] = index;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	7bba      	ldrb	r2, [r7, #14]
 8008354:	701a      	strb	r2, [r3, #0]
	//status = VL53L0X_I2CWrite(dev, (uint8_t *)buffer, (uint8_t)1);
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, (uint8_t *)buffer, (uint8_t)1, 50);
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	b299      	uxth	r1, r3
 800835a:	2332      	movs	r3, #50	; 0x32
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	2301      	movs	r3, #1
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	480f      	ldr	r0, [pc, #60]	; (80083a0 <VL53L0X_read_multi+0x74>)
 8008364:	f7f9 fa22 	bl	80017ac <HAL_I2C_Master_Transmit>
 8008368:	4603      	mov	r3, r0
 800836a:	617b      	str	r3, [r7, #20]
	if (!status) {
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10e      	bne.n	8008390 <VL53L0X_read_multi+0x64>
		pdata[0] = index;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	7bba      	ldrb	r2, [r7, #14]
 8008376:	701a      	strb	r2, [r3, #0]
		//status = VL53L0X_I2CRead(dev, pdata, count);
		status = HAL_I2C_Master_Receive(&hi2c1, dev, pdata, count, 50);
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	b299      	uxth	r1, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	b29b      	uxth	r3, r3
 8008380:	2232      	movs	r2, #50	; 0x32
 8008382:	9200      	str	r2, [sp, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4806      	ldr	r0, [pc, #24]	; (80083a0 <VL53L0X_read_multi+0x74>)
 8008388:	f7f9 fb0e 	bl	80019a8 <HAL_I2C_Master_Receive>
 800838c:	4603      	mov	r3, r0
 800838e:	617b      	str	r3, [r7, #20]
	}

	trace_i2c("Read  reg : 0x%04X, Val : 0x%s\n", index, value_as_str);
#endif

	return status;
 8008390:	697b      	ldr	r3, [r7, #20]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200003e8 	.word	0x200003e8
 80083a0:	20000334 	.word	0x20000334

080083a4 <VL53L0X_write_byte>:


//int32_t VL53L0X_write_byte(VL53L0X_DEV dev, uint8_t index, uint8_t data)
int32_t VL53L0X_write_byte(uint8_t dev, uint8_t index, uint8_t data)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	71fb      	strb	r3, [r7, #7]
 80083ae:	460b      	mov	r3, r1
 80083b0:	71bb      	strb	r3, [r7, #6]
 80083b2:	4613      	mov	r3, r2
 80083b4:	717b      	strb	r3, [r7, #5]
	int32_t status = STATUS_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
	const int32_t cbyte_count = 1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	60bb      	str	r3, [r7, #8]

	status = VL53L0X_write_multi(dev, index, &data, cbyte_count);
 80083be:	1d7a      	adds	r2, r7, #5
 80083c0:	79b9      	ldrb	r1, [r7, #6]
 80083c2:	79f8      	ldrb	r0, [r7, #7]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f7ff ff7d 	bl	80082c4 <VL53L0X_write_multi>
 80083ca:	60f8      	str	r0, [r7, #12]

	return status;
 80083cc:	68fb      	ldr	r3, [r7, #12]

}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <VL53L0X_write_word>:

//int32_t VL53L0X_write_word(VL53L0X_DEV dev, uint8_t index, uint16_t data)
int32_t VL53L0X_write_word(uint8_t dev, uint8_t index, uint16_t data)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	4603      	mov	r3, r0
 80083de:	71fb      	strb	r3, [r7, #7]
 80083e0:	460b      	mov	r3, r1
 80083e2:	71bb      	strb	r3, [r7, #6]
 80083e4:	4613      	mov	r3, r2
 80083e6:	80bb      	strh	r3, [r7, #4]
	int32_t status = STATUS_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]

	uint8_t  buffer[BYTES_PER_WORD];

	/* Split 16-bit word into MS and LS uint8_t */
	buffer[0] = (uint8_t)(data >> 8);
 80083ec:	88bb      	ldrh	r3, [r7, #4]
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	723b      	strb	r3, [r7, #8]
	buffer[1] = (uint8_t)(data &  0x00FF);
 80083f6:	88bb      	ldrh	r3, [r7, #4]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	727b      	strb	r3, [r7, #9]

	status = VL53L0X_write_multi(dev, index, buffer, BYTES_PER_WORD);
 80083fc:	f107 0208 	add.w	r2, r7, #8
 8008400:	79b9      	ldrb	r1, [r7, #6]
 8008402:	79f8      	ldrb	r0, [r7, #7]
 8008404:	2302      	movs	r3, #2
 8008406:	f7ff ff5d 	bl	80082c4 <VL53L0X_write_multi>
 800840a:	60f8      	str	r0, [r7, #12]

	return status;
 800840c:	68fb      	ldr	r3, [r7, #12]

}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <VL53L0X_read_byte>:
}


//int32_t VL53L0X_read_byte(VL53L0X_DEV dev, uint8_t index, uint8_t *pdata)
int32_t VL53L0X_read_byte(uint8_t dev, uint8_t index, uint8_t *pdata)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	4603      	mov	r3, r0
 800841e:	603a      	str	r2, [r7, #0]
 8008420:	71fb      	strb	r3, [r7, #7]
 8008422:	460b      	mov	r3, r1
 8008424:	71bb      	strb	r3, [r7, #6]
	int32_t status = STATUS_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
	int32_t cbyte_count = 1;
 800842a:	2301      	movs	r3, #1
 800842c:	60bb      	str	r3, [r7, #8]

	status = VL53L0X_read_multi(dev, index, pdata, cbyte_count);
 800842e:	79b9      	ldrb	r1, [r7, #6]
 8008430:	79f8      	ldrb	r0, [r7, #7]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	683a      	ldr	r2, [r7, #0]
 8008436:	f7ff ff79 	bl	800832c <VL53L0X_read_multi>
 800843a:	60f8      	str	r0, [r7, #12]

	return status;
 800843c:	68fb      	ldr	r3, [r7, #12]

}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <VL53L0X_read_word>:


//int32_t VL53L0X_read_word(VL53L0X_DEV dev, uint8_t index, uint16_t *pdata)
int32_t VL53L0X_read_word(uint8_t dev, uint8_t index, uint16_t *pdata)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	4603      	mov	r3, r0
 800844e:	603a      	str	r2, [r7, #0]
 8008450:	71fb      	strb	r3, [r7, #7]
 8008452:	460b      	mov	r3, r1
 8008454:	71bb      	strb	r3, [r7, #6]
	int32_t  status = STATUS_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[BYTES_PER_WORD];

	status = VL53L0X_read_multi(dev, index, buffer, BYTES_PER_WORD);
 800845a:	f107 0208 	add.w	r2, r7, #8
 800845e:	79b9      	ldrb	r1, [r7, #6]
 8008460:	79f8      	ldrb	r0, [r7, #7]
 8008462:	2302      	movs	r3, #2
 8008464:	f7ff ff62 	bl	800832c <VL53L0X_read_multi>
 8008468:	60f8      	str	r0, [r7, #12]
	*pdata = ((uint16_t)buffer[0]<<8) + (uint16_t)buffer[1];
 800846a:	7a3b      	ldrb	r3, [r7, #8]
 800846c:	b29b      	uxth	r3, r3
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	b29a      	uxth	r2, r3
 8008472:	7a7b      	ldrb	r3, [r7, #9]
 8008474:	b29b      	uxth	r3, r3
 8008476:	4413      	add	r3, r2
 8008478:	b29a      	uxth	r2, r3
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	801a      	strh	r2, [r3, #0]

	return status;
 800847e:	68fb      	ldr	r3, [r7, #12]

}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <VL53L0X_read_dword>:

//int32_t VL53L0X_read_dword(VL53L0X_DEV dev, uint8_t index, uint32_t *pdata)
int32_t VL53L0X_read_dword(uint8_t dev, uint8_t index, uint32_t *pdata)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	603a      	str	r2, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
 8008494:	460b      	mov	r3, r1
 8008496:	71bb      	strb	r3, [r7, #6]
	int32_t status = STATUS_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[BYTES_PER_DWORD];

	status = VL53L0X_read_multi(dev, index, buffer, BYTES_PER_DWORD);
 800849c:	f107 0208 	add.w	r2, r7, #8
 80084a0:	79b9      	ldrb	r1, [r7, #6]
 80084a2:	79f8      	ldrb	r0, [r7, #7]
 80084a4:	2304      	movs	r3, #4
 80084a6:	f7ff ff41 	bl	800832c <VL53L0X_read_multi>
 80084aa:	60f8      	str	r0, [r7, #12]
	*pdata = ((uint32_t)buffer[0]<<24) + ((uint32_t)buffer[1]<<16) +
 80084ac:	7a3b      	ldrb	r3, [r7, #8]
 80084ae:	061a      	lsls	r2, r3, #24
 80084b0:	7a7b      	ldrb	r3, [r7, #9]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	441a      	add	r2, r3
			((uint32_t)buffer[2]<<8) + (uint32_t)buffer[3];
 80084b6:	7abb      	ldrb	r3, [r7, #10]
 80084b8:	021b      	lsls	r3, r3, #8
	*pdata = ((uint32_t)buffer[0]<<24) + ((uint32_t)buffer[1]<<16) +
 80084ba:	4413      	add	r3, r2
			((uint32_t)buffer[2]<<8) + (uint32_t)buffer[3];
 80084bc:	7afa      	ldrb	r2, [r7, #11]
 80084be:	441a      	add	r2, r3
	*pdata = ((uint32_t)buffer[0]<<24) + ((uint32_t)buffer[1]<<16) +
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	601a      	str	r2, [r3, #0]

	return status;
 80084c4:	68fb      	ldr	r3, [r7, #12]

}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <calloc>:
 80084d0:	4b02      	ldr	r3, [pc, #8]	; (80084dc <calloc+0xc>)
 80084d2:	460a      	mov	r2, r1
 80084d4:	4601      	mov	r1, r0
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	f000 b802 	b.w	80084e0 <_calloc_r>
 80084dc:	20000314 	.word	0x20000314

080084e0 <_calloc_r>:
 80084e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e2:	fba1 2402 	umull	r2, r4, r1, r2
 80084e6:	b94c      	cbnz	r4, 80084fc <_calloc_r+0x1c>
 80084e8:	4611      	mov	r1, r2
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	f000 f82e 	bl	800854c <_malloc_r>
 80084f0:	9a01      	ldr	r2, [sp, #4]
 80084f2:	4605      	mov	r5, r0
 80084f4:	b930      	cbnz	r0, 8008504 <_calloc_r+0x24>
 80084f6:	4628      	mov	r0, r5
 80084f8:	b003      	add	sp, #12
 80084fa:	bd30      	pop	{r4, r5, pc}
 80084fc:	220c      	movs	r2, #12
 80084fe:	6002      	str	r2, [r0, #0]
 8008500:	2500      	movs	r5, #0
 8008502:	e7f8      	b.n	80084f6 <_calloc_r+0x16>
 8008504:	4621      	mov	r1, r4
 8008506:	f000 f8ad 	bl	8008664 <memset>
 800850a:	e7f4      	b.n	80084f6 <_calloc_r+0x16>

0800850c <sbrk_aligned>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	4e0e      	ldr	r6, [pc, #56]	; (8008548 <sbrk_aligned+0x3c>)
 8008510:	460c      	mov	r4, r1
 8008512:	6831      	ldr	r1, [r6, #0]
 8008514:	4605      	mov	r5, r0
 8008516:	b911      	cbnz	r1, 800851e <sbrk_aligned+0x12>
 8008518:	f000 f8ac 	bl	8008674 <_sbrk_r>
 800851c:	6030      	str	r0, [r6, #0]
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f8a7 	bl	8008674 <_sbrk_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d00a      	beq.n	8008540 <sbrk_aligned+0x34>
 800852a:	1cc4      	adds	r4, r0, #3
 800852c:	f024 0403 	bic.w	r4, r4, #3
 8008530:	42a0      	cmp	r0, r4
 8008532:	d007      	beq.n	8008544 <sbrk_aligned+0x38>
 8008534:	1a21      	subs	r1, r4, r0
 8008536:	4628      	mov	r0, r5
 8008538:	f000 f89c 	bl	8008674 <_sbrk_r>
 800853c:	3001      	adds	r0, #1
 800853e:	d101      	bne.n	8008544 <sbrk_aligned+0x38>
 8008540:	f04f 34ff 	mov.w	r4, #4294967295
 8008544:	4620      	mov	r0, r4
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	2000042c 	.word	0x2000042c

0800854c <_malloc_r>:
 800854c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008550:	1ccd      	adds	r5, r1, #3
 8008552:	f025 0503 	bic.w	r5, r5, #3
 8008556:	3508      	adds	r5, #8
 8008558:	2d0c      	cmp	r5, #12
 800855a:	bf38      	it	cc
 800855c:	250c      	movcc	r5, #12
 800855e:	2d00      	cmp	r5, #0
 8008560:	4607      	mov	r7, r0
 8008562:	db01      	blt.n	8008568 <_malloc_r+0x1c>
 8008564:	42a9      	cmp	r1, r5
 8008566:	d905      	bls.n	8008574 <_malloc_r+0x28>
 8008568:	230c      	movs	r3, #12
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	2600      	movs	r6, #0
 800856e:	4630      	mov	r0, r6
 8008570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008574:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008648 <_malloc_r+0xfc>
 8008578:	f000 f868 	bl	800864c <__malloc_lock>
 800857c:	f8d8 3000 	ldr.w	r3, [r8]
 8008580:	461c      	mov	r4, r3
 8008582:	bb5c      	cbnz	r4, 80085dc <_malloc_r+0x90>
 8008584:	4629      	mov	r1, r5
 8008586:	4638      	mov	r0, r7
 8008588:	f7ff ffc0 	bl	800850c <sbrk_aligned>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	4604      	mov	r4, r0
 8008590:	d155      	bne.n	800863e <_malloc_r+0xf2>
 8008592:	f8d8 4000 	ldr.w	r4, [r8]
 8008596:	4626      	mov	r6, r4
 8008598:	2e00      	cmp	r6, #0
 800859a:	d145      	bne.n	8008628 <_malloc_r+0xdc>
 800859c:	2c00      	cmp	r4, #0
 800859e:	d048      	beq.n	8008632 <_malloc_r+0xe6>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	4631      	mov	r1, r6
 80085a4:	4638      	mov	r0, r7
 80085a6:	eb04 0903 	add.w	r9, r4, r3
 80085aa:	f000 f863 	bl	8008674 <_sbrk_r>
 80085ae:	4581      	cmp	r9, r0
 80085b0:	d13f      	bne.n	8008632 <_malloc_r+0xe6>
 80085b2:	6821      	ldr	r1, [r4, #0]
 80085b4:	1a6d      	subs	r5, r5, r1
 80085b6:	4629      	mov	r1, r5
 80085b8:	4638      	mov	r0, r7
 80085ba:	f7ff ffa7 	bl	800850c <sbrk_aligned>
 80085be:	3001      	adds	r0, #1
 80085c0:	d037      	beq.n	8008632 <_malloc_r+0xe6>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	442b      	add	r3, r5
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	f8d8 3000 	ldr.w	r3, [r8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d038      	beq.n	8008642 <_malloc_r+0xf6>
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	42a2      	cmp	r2, r4
 80085d4:	d12b      	bne.n	800862e <_malloc_r+0xe2>
 80085d6:	2200      	movs	r2, #0
 80085d8:	605a      	str	r2, [r3, #4]
 80085da:	e00f      	b.n	80085fc <_malloc_r+0xb0>
 80085dc:	6822      	ldr	r2, [r4, #0]
 80085de:	1b52      	subs	r2, r2, r5
 80085e0:	d41f      	bmi.n	8008622 <_malloc_r+0xd6>
 80085e2:	2a0b      	cmp	r2, #11
 80085e4:	d917      	bls.n	8008616 <_malloc_r+0xca>
 80085e6:	1961      	adds	r1, r4, r5
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	6025      	str	r5, [r4, #0]
 80085ec:	bf18      	it	ne
 80085ee:	6059      	strne	r1, [r3, #4]
 80085f0:	6863      	ldr	r3, [r4, #4]
 80085f2:	bf08      	it	eq
 80085f4:	f8c8 1000 	streq.w	r1, [r8]
 80085f8:	5162      	str	r2, [r4, r5]
 80085fa:	604b      	str	r3, [r1, #4]
 80085fc:	4638      	mov	r0, r7
 80085fe:	f104 060b 	add.w	r6, r4, #11
 8008602:	f000 f829 	bl	8008658 <__malloc_unlock>
 8008606:	f026 0607 	bic.w	r6, r6, #7
 800860a:	1d23      	adds	r3, r4, #4
 800860c:	1af2      	subs	r2, r6, r3
 800860e:	d0ae      	beq.n	800856e <_malloc_r+0x22>
 8008610:	1b9b      	subs	r3, r3, r6
 8008612:	50a3      	str	r3, [r4, r2]
 8008614:	e7ab      	b.n	800856e <_malloc_r+0x22>
 8008616:	42a3      	cmp	r3, r4
 8008618:	6862      	ldr	r2, [r4, #4]
 800861a:	d1dd      	bne.n	80085d8 <_malloc_r+0x8c>
 800861c:	f8c8 2000 	str.w	r2, [r8]
 8008620:	e7ec      	b.n	80085fc <_malloc_r+0xb0>
 8008622:	4623      	mov	r3, r4
 8008624:	6864      	ldr	r4, [r4, #4]
 8008626:	e7ac      	b.n	8008582 <_malloc_r+0x36>
 8008628:	4634      	mov	r4, r6
 800862a:	6876      	ldr	r6, [r6, #4]
 800862c:	e7b4      	b.n	8008598 <_malloc_r+0x4c>
 800862e:	4613      	mov	r3, r2
 8008630:	e7cc      	b.n	80085cc <_malloc_r+0x80>
 8008632:	230c      	movs	r3, #12
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	4638      	mov	r0, r7
 8008638:	f000 f80e 	bl	8008658 <__malloc_unlock>
 800863c:	e797      	b.n	800856e <_malloc_r+0x22>
 800863e:	6025      	str	r5, [r4, #0]
 8008640:	e7dc      	b.n	80085fc <_malloc_r+0xb0>
 8008642:	605b      	str	r3, [r3, #4]
 8008644:	deff      	udf	#255	; 0xff
 8008646:	bf00      	nop
 8008648:	20000428 	.word	0x20000428

0800864c <__malloc_lock>:
 800864c:	4801      	ldr	r0, [pc, #4]	; (8008654 <__malloc_lock+0x8>)
 800864e:	f000 b84b 	b.w	80086e8 <__retarget_lock_acquire_recursive>
 8008652:	bf00      	nop
 8008654:	2000056c 	.word	0x2000056c

08008658 <__malloc_unlock>:
 8008658:	4801      	ldr	r0, [pc, #4]	; (8008660 <__malloc_unlock+0x8>)
 800865a:	f000 b846 	b.w	80086ea <__retarget_lock_release_recursive>
 800865e:	bf00      	nop
 8008660:	2000056c 	.word	0x2000056c

08008664 <memset>:
 8008664:	4402      	add	r2, r0
 8008666:	4603      	mov	r3, r0
 8008668:	4293      	cmp	r3, r2
 800866a:	d100      	bne.n	800866e <memset+0xa>
 800866c:	4770      	bx	lr
 800866e:	f803 1b01 	strb.w	r1, [r3], #1
 8008672:	e7f9      	b.n	8008668 <memset+0x4>

08008674 <_sbrk_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d06      	ldr	r5, [pc, #24]	; (8008690 <_sbrk_r+0x1c>)
 8008678:	2300      	movs	r3, #0
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	f7f8 fbd0 	bl	8000e24 <_sbrk>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_sbrk_r+0x1a>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_sbrk_r+0x1a>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	20000568 	.word	0x20000568

08008694 <__errno>:
 8008694:	4b01      	ldr	r3, [pc, #4]	; (800869c <__errno+0x8>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	20000314 	.word	0x20000314

080086a0 <__libc_init_array>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	4d0d      	ldr	r5, [pc, #52]	; (80086d8 <__libc_init_array+0x38>)
 80086a4:	4c0d      	ldr	r4, [pc, #52]	; (80086dc <__libc_init_array+0x3c>)
 80086a6:	1b64      	subs	r4, r4, r5
 80086a8:	10a4      	asrs	r4, r4, #2
 80086aa:	2600      	movs	r6, #0
 80086ac:	42a6      	cmp	r6, r4
 80086ae:	d109      	bne.n	80086c4 <__libc_init_array+0x24>
 80086b0:	4d0b      	ldr	r5, [pc, #44]	; (80086e0 <__libc_init_array+0x40>)
 80086b2:	4c0c      	ldr	r4, [pc, #48]	; (80086e4 <__libc_init_array+0x44>)
 80086b4:	f000 f830 	bl	8008718 <_init>
 80086b8:	1b64      	subs	r4, r4, r5
 80086ba:	10a4      	asrs	r4, r4, #2
 80086bc:	2600      	movs	r6, #0
 80086be:	42a6      	cmp	r6, r4
 80086c0:	d105      	bne.n	80086ce <__libc_init_array+0x2e>
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c8:	4798      	blx	r3
 80086ca:	3601      	adds	r6, #1
 80086cc:	e7ee      	b.n	80086ac <__libc_init_array+0xc>
 80086ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d2:	4798      	blx	r3
 80086d4:	3601      	adds	r6, #1
 80086d6:	e7f2      	b.n	80086be <__libc_init_array+0x1e>
 80086d8:	08008750 	.word	0x08008750
 80086dc:	08008750 	.word	0x08008750
 80086e0:	08008750 	.word	0x08008750
 80086e4:	08008754 	.word	0x08008754

080086e8 <__retarget_lock_acquire_recursive>:
 80086e8:	4770      	bx	lr

080086ea <__retarget_lock_release_recursive>:
 80086ea:	4770      	bx	lr

080086ec <strcpy>:
 80086ec:	4603      	mov	r3, r0
 80086ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086f2:	f803 2b01 	strb.w	r2, [r3], #1
 80086f6:	2a00      	cmp	r2, #0
 80086f8:	d1f9      	bne.n	80086ee <strcpy+0x2>
 80086fa:	4770      	bx	lr

080086fc <memcpy>:
 80086fc:	440a      	add	r2, r1
 80086fe:	4291      	cmp	r1, r2
 8008700:	f100 33ff 	add.w	r3, r0, #4294967295
 8008704:	d100      	bne.n	8008708 <memcpy+0xc>
 8008706:	4770      	bx	lr
 8008708:	b510      	push	{r4, lr}
 800870a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800870e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008712:	4291      	cmp	r1, r2
 8008714:	d1f9      	bne.n	800870a <memcpy+0xe>
 8008716:	bd10      	pop	{r4, pc}

08008718 <_init>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr

08008724 <_fini>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr
